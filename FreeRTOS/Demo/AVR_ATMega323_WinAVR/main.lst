   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
 140               	vErrorChecks:
 141               		.stabd	46,0,0
   1:main.c        **** /*
   2:main.c        ****     FreeRTOS V7.6.0 - Copyright (C) 2013 Real Time Engineers Ltd. 
   3:main.c        ****     All rights reserved
   4:main.c        **** 
   5:main.c        ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:main.c        **** 
   7:main.c        ****     ***************************************************************************
   8:main.c        ****      *                                                                       *
   9:main.c        ****      *    FreeRTOS provides completely free yet professionally developed,    *
  10:main.c        ****      *    robust, strictly quality controlled, supported, and cross          *
  11:main.c        ****      *    platform software that has become a de facto standard.             *
  12:main.c        ****      *                                                                       *
  13:main.c        ****      *    Help yourself get started quickly and support the FreeRTOS         *
  14:main.c        ****      *    project by purchasing a FreeRTOS tutorial book, reference          *
  15:main.c        ****      *    manual, or both from: http://www.FreeRTOS.org/Documentation        *
  16:main.c        ****      *                                                                       *
  17:main.c        ****      *    Thank you!                                                         *
  18:main.c        ****      *                                                                       *
  19:main.c        ****     ***************************************************************************
  20:main.c        **** 
  21:main.c        ****     This file is part of the FreeRTOS distribution.
  22:main.c        **** 
  23:main.c        ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  24:main.c        ****     the terms of the GNU General Public License (version 2) as published by the
  25:main.c        ****     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
  26:main.c        **** 
  27:main.c        ****     >>! NOTE: The modification to the GPL is included to allow you to distribute
  28:main.c        ****     >>! a combined work that includes FreeRTOS without being obliged to provide
  29:main.c        ****     >>! the source code for proprietary components outside of the FreeRTOS
  30:main.c        ****     >>! kernel.
  31:main.c        **** 
  32:main.c        ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  33:main.c        ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  34:main.c        ****     FOR A PARTICULAR PURPOSE.  Full license text is available from the following
  35:main.c        ****     link: http://www.freertos.org/a00114.html
  36:main.c        **** 
  37:main.c        ****     1 tab == 4 spaces!
  38:main.c        **** 
  39:main.c        ****     ***************************************************************************
  40:main.c        ****      *                                                                       *
  41:main.c        ****      *    Having a problem?  Start by reading the FAQ "My application does   *
  42:main.c        ****      *    not run, what could be wrong?"                                     *
  43:main.c        ****      *                                                                       *
  44:main.c        ****      *    http://www.FreeRTOS.org/FAQHelp.html                               *
  45:main.c        ****      *                                                                       *
  46:main.c        ****     ***************************************************************************
  47:main.c        **** 
  48:main.c        ****     http://www.FreeRTOS.org - Documentation, books, training, latest versions,
  49:main.c        ****     license and Real Time Engineers Ltd. contact details.
  50:main.c        **** 
  51:main.c        ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  52:main.c        ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  53:main.c        ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  54:main.c        **** 
  55:main.c        ****     http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High
  56:main.c        ****     Integrity Systems to sell under the OpenRTOS brand.  Low cost OpenRTOS
  57:main.c        ****     licenses offer ticketed support, indemnification and middleware.
  58:main.c        **** 
  59:main.c        ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  60:main.c        ****     engineered and independently SIL3 certified version for use in safety and
  61:main.c        ****     mission critical applications that require provable dependability.
  62:main.c        **** 
  63:main.c        ****     1 tab == 4 spaces!
  64:main.c        **** */
  65:main.c        **** 
  66:main.c        **** /*
  67:main.c        ****  * Creates all the demo application tasks, then starts the scheduler.  The WEB
  68:main.c        ****  * documentation provides more details of the demo application tasks.
  69:main.c        ****  * 
  70:main.c        ****  * Main. c also creates a task called "Check".  This only executes every three 
  71:main.c        ****  * seconds but has the highest priority so is guaranteed to get processor time.  
  72:main.c        ****  * Its main function is to check that all the other tasks are still operational.  
  73:main.c        ****  * Each task that does not flash an LED maintains a unique count that is 
  74:main.c        ****  * incremented each time the task successfully completes its function.  Should 
  75:main.c        ****  * any error occur within such a task the count is permanently halted.  The 
  76:main.c        ****  * check task inspects the count of each task to ensure it has changed since
  77:main.c        ****  * the last time the check task executed.  If all the count variables have 
  78:main.c        ****  * changed all the tasks are still executing error free, and the check task
  79:main.c        ****  * toggles an LED.  Should any task contain an error at any time the LED toggle
  80:main.c        ****  * will stop.
  81:main.c        ****  *
  82:main.c        ****  * The LED flash and communications test tasks do not maintain a count.
  83:main.c        ****  */
  84:main.c        **** 
  85:main.c        **** /*
  86:main.c        **** Changes from V1.2.0
  87:main.c        **** 	
  88:main.c        **** 	+ Changed the baud rate for the serial test from 19200 to 57600.
  89:main.c        **** 
  90:main.c        **** Changes from V1.2.3
  91:main.c        **** 
  92:main.c        **** 	+ The integer and comtest tasks are now used when the cooperative scheduler 
  93:main.c        **** 	  is being used.  Previously they were only used with the preemptive
  94:main.c        **** 	  scheduler.
  95:main.c        **** 
  96:main.c        **** Changes from V1.2.5
  97:main.c        **** 
  98:main.c        **** 	+ Set the baud rate to 38400.  This has a smaller error percentage with an
  99:main.c        **** 	  8MHz clock (according to the manual).
 100:main.c        **** 
 101:main.c        **** Changes from V2.0.0
 102:main.c        **** 
 103:main.c        **** 	+ Delay periods are now specified using variables and constants of
 104:main.c        **** 	  portTickType rather than unsigned long.
 105:main.c        **** 
 106:main.c        **** Changes from V2.6.1
 107:main.c        **** 
 108:main.c        **** 	+ The IAR and WinAVR AVR ports are now maintained separately.
 109:main.c        **** 
 110:main.c        **** Changes from V4.0.5
 111:main.c        **** 
 112:main.c        **** 	+ Modified to demonstrate the use of co-routines.
 113:main.c        **** 
 114:main.c        **** */
 115:main.c        **** 
 116:main.c        **** #include <stdlib.h>
 117:main.c        **** #include <string.h>
 118:main.c        **** 
 119:main.c        **** #ifdef GCC_MEGA_AVR
 120:main.c        **** 	/* EEPROM routines used only with the WinAVR compiler. */
 121:main.c        **** 	#include <avr/eeprom.h> 
 122:main.c        **** #endif
 123:main.c        **** 
 124:main.c        **** /* Scheduler include files. */
 125:main.c        **** #include "FreeRTOS.h"
 126:main.c        **** #include "task.h"
 127:main.c        **** #include "croutine.h"
 128:main.c        **** 
 129:main.c        **** /* Demo file headers. */
 130:main.c        **** #include "PollQ.h"
 131:main.c        **** #include "integer.h"
 132:main.c        **** #include "serial.h"
 133:main.c        **** //#include "comtest.h"
 134:main.c        **** #include "crflash.h"
 135:main.c        **** #include "print.h"
 136:main.c        **** #include "partest.h"
 137:main.c        **** #include "regtest.h"
 138:main.c        **** 
 139:main.c        **** /* Priority definitions for most of the tasks in the demo application.  Some
 140:main.c        **** tasks just use the idle priority. */
 141:main.c        **** #define mainLED_TASK_PRIORITY			( tskIDLE_PRIORITY + 1 )
 142:main.c        **** #define mainCOM_TEST_PRIORITY			( tskIDLE_PRIORITY + 2 )
 143:main.c        **** #define mainQUEUE_POLL_PRIORITY			( tskIDLE_PRIORITY + 2 )
 144:main.c        **** #define mainCHECK_TASK_PRIORITY			( tskIDLE_PRIORITY + 3 )
 145:main.c        **** 
 146:main.c        **** /* Baud rate used by the serial port tasks. */
 147:main.c        **** #define mainCOM_TEST_BAUD_RATE			( ( unsigned long ) 38400 )
 148:main.c        **** 
 149:main.c        **** /* LED used by the serial port tasks.  This is toggled on each character Tx,
 150:main.c        **** and mainCOM_TEST_LED + 1 is toggles on each character Rx. */
 151:main.c        **** #define mainCOM_TEST_LED				( 4 )
 152:main.c        **** 
 153:main.c        **** /* LED that is toggled by the check task.  The check task periodically checks
 154:main.c        **** that all the other tasks are operating without error.  If no errors are found
 155:main.c        **** the LED is toggled.  If an error is found at any time the LED is never toggles
 156:main.c        **** again. */
 157:main.c        **** #define mainCHECK_TASK_LED				( 7 )
 158:main.c        **** 
 159:main.c        **** /* The period between executions of the check task. */
 160:main.c        **** #define mainCHECK_PERIOD				( ( portTickType ) 3000 / portTICK_RATE_MS  )
 161:main.c        **** 
 162:main.c        **** /* An address in the EEPROM used to count resets.  This is used to check that
 163:main.c        **** the demo application is not unexpectedly resetting. */
 164:main.c        **** #define mainRESET_COUNT_ADDRESS			( ( void * ) 0x50 )
 165:main.c        **** 
 166:main.c        **** /* The number of coroutines to create. */
 167:main.c        **** #define mainNUM_FLASH_COROUTINES		( 3 )
 168:main.c        **** 
 169:main.c        **** /*
 170:main.c        ****  * The task function for the "Check" task.
 171:main.c        ****  */
 172:main.c        **** static void vErrorChecks( void *pvParameters );
 173:main.c        **** 
 174:main.c        **** /*
 175:main.c        ****  * Checks the unique counts of other tasks to ensure they are still operational.
 176:main.c        ****  * Flashes an LED if everything is okay. 
 177:main.c        ****  */
 178:main.c        **** static void prvCheckOtherTasksAreStillRunning( void );
 179:main.c        **** 
 180:main.c        **** /*
 181:main.c        ****  * Called on boot to increment a count stored in the EEPROM.  This is used to 
 182:main.c        ****  * ensure the CPU does not reset unexpectedly.
 183:main.c        ****  */
 184:main.c        **** static void prvIncrementResetCount( void );
 185:main.c        **** 
 186:main.c        **** /*
 187:main.c        ****  * The idle hook is used to scheduler co-routines.
 188:main.c        ****  */
 189:main.c        **** void vApplicationIdleHook( void );
 190:main.c        **** 
 191:main.c        **** /*-----------------------------------------------------------*/
 192:main.c        **** 
 193:main.c        **** short main( void )
 194:main.c        **** {
 195:main.c        **** 	prvIncrementResetCount();
 196:main.c        **** 
 197:main.c        **** 	/* Setup the LED's for output. */
 198:main.c        **** 	vParTestInitialise();
 199:main.c        **** 
 200:main.c        **** 	/* Create the standard demo tasks. */
 201:main.c        **** 	vStartIntegerMathTasks( tskIDLE_PRIORITY );
 202:main.c        **** 	//vAltStartComTestTasks( mainCOM_TEST_PRIORITY, mainCOM_TEST_BAUD_RATE, mainCOM_TEST_LED );
 203:main.c        **** 	vStartPolledQueueTasks( mainQUEUE_POLL_PRIORITY );
 204:main.c        **** 	vStartRegTestTasks();
 205:main.c        **** 	
 206:main.c        **** 	/* Create the tasks defined within this file. */
 207:main.c        **** 	xTaskCreate( vErrorChecks, ( signed char * ) "Check", configMINIMAL_STACK_SIZE, NULL, mainCHECK_TA
 208:main.c        **** 
 209:main.c        **** 	/* Create the co-routines that flash the LED's. */
 210:main.c        **** 	vStartFlashCoRoutines( mainNUM_FLASH_COROUTINES );
 211:main.c        **** 	
 212:main.c        **** 	/* In this port, to use preemptive scheduler define configUSE_PREEMPTION 
 213:main.c        **** 	as 1 in portmacro.h.  To use the cooperative scheduler define 
 214:main.c        **** 	configUSE_PREEMPTION as 0. */
 215:main.c        **** 	vTaskStartScheduler();
 216:main.c        **** 
 217:main.c        **** 	return 0;
 218:main.c        **** }
 219:main.c        **** /*-----------------------------------------------------------*/
 220:main.c        **** 
 221:main.c        **** static void vErrorChecks( void *pvParameters )
 222:main.c        **** {
 143               	.LM0:
 144               	.LFBB1:
 145               	/* prologue: function */
 146               	/* frame size = 0 */
 147               	/* stack size = 0 */
 148               	.L__stack_usage = 0
 149               	.LBB4:
 150               	.LBB5:
 223:main.c        **** static volatile unsigned long ulDummyVariable = 3UL;
 224:main.c        **** 
 225:main.c        **** 	/* The parameters are not used. */
 226:main.c        **** 	( void ) pvParameters;
 227:main.c        **** 
 228:main.c        **** 	/* Cycle for ever, delaying then checking all the other tasks are still
 229:main.c        **** 	operating without error. */
 230:main.c        **** 	for( ;; )
 231:main.c        **** 	{
 232:main.c        **** 		vTaskDelay( mainCHECK_PERIOD );
 233:main.c        **** 
 234:main.c        **** 		/* Perform a bit of 32bit maths to ensure the registers used by the 
 235:main.c        **** 		integer tasks get some exercise. The result here is not important - 
 236:main.c        **** 		see the demo application documentation for more info. */
 237:main.c        **** 		ulDummyVariable *= 3;
 238:main.c        **** 		
 239:main.c        **** 		prvCheckOtherTasksAreStillRunning();
 240:main.c        **** 	}
 241:main.c        **** }
 242:main.c        **** /*-----------------------------------------------------------*/
 243:main.c        **** 
 244:main.c        **** static void prvCheckOtherTasksAreStillRunning( void )
 245:main.c        **** {
 246:main.c        **** static portBASE_TYPE xErrorHasOccurred = pdFALSE;
 247:main.c        **** 
 248:main.c        **** 	if( xAreIntegerMathsTaskStillRunning() != pdTRUE )
 249:main.c        **** 	{
 250:main.c        **** 		xErrorHasOccurred = pdTRUE;
 152               	.LM1:
 153 0000 C1E0      		ldi r28,lo8(1)
 154               	.L18:
 155               	.LBE5:
 156               	.LBE4:
 232:main.c        **** 		vTaskDelay( mainCHECK_PERIOD );
 158               	.LM2:
 159 0002 88EB      		ldi r24,lo8(-72)
 160 0004 9BE0      		ldi r25,lo8(11)
 161 0006 0E94 0000 		call vTaskDelay
 237:main.c        **** 		ulDummyVariable *= 3;
 163               	.LM3:
 164 000a 2091 0000 		lds r18,ulDummyVariable.1962
 165 000e 3091 0000 		lds r19,ulDummyVariable.1962+1
 166 0012 4091 0000 		lds r20,ulDummyVariable.1962+2
 167 0016 5091 0000 		lds r21,ulDummyVariable.1962+3
 168 001a A3E0      		ldi r26,lo8(3)
 169 001c B0E0      		ldi r27,0
 170 001e 0E94 0000 		call __muluhisi3
 171 0022 6093 0000 		sts ulDummyVariable.1962,r22
 172 0026 7093 0000 		sts ulDummyVariable.1962+1,r23
 173 002a 8093 0000 		sts ulDummyVariable.1962+2,r24
 174 002e 9093 0000 		sts ulDummyVariable.1962+3,r25
 175               	.LBB7:
 176               	.LBB6:
 248:main.c        **** 	if( xAreIntegerMathsTaskStillRunning() != pdTRUE )
 178               	.LM4:
 179 0032 0E94 0000 		call xAreIntegerMathsTaskStillRunning
 180 0036 8130      		cpi r24,lo8(1)
 181 0038 01F0      		breq .L2
 183               	.LM5:
 184 003a C093 0000 		sts xErrorHasOccurred.1967,r28
 185               	.L2:
 251:main.c        **** 	}
 252:main.c        **** 
 253:main.c        **** /*	if( xAreComTestTasksStillRunning() != pdTRUE )
 254:main.c        **** 	{
 255:main.c        **** 		xErrorHasOccurred = pdTRUE;
 256:main.c        **** 	}
 257:main.c        **** */
 258:main.c        **** 	if( xArePollingQueuesStillRunning() != pdTRUE )
 187               	.LM6:
 188 003e 0E94 0000 		call xArePollingQueuesStillRunning
 189 0042 8130      		cpi r24,lo8(1)
 190 0044 01F0      		breq .L3
 259:main.c        **** 	{
 260:main.c        **** 		xErrorHasOccurred = pdTRUE;
 192               	.LM7:
 193 0046 C093 0000 		sts xErrorHasOccurred.1967,r28
 194               	.L3:
 261:main.c        **** 	}
 262:main.c        **** 
 263:main.c        **** 	if( xAreRegTestTasksStillRunning() != pdTRUE )
 196               	.LM8:
 197 004a 0E94 0000 		call xAreRegTestTasksStillRunning
 198 004e 8130      		cpi r24,lo8(1)
 199 0050 01F0      		breq .L4
 264:main.c        **** 	{
 265:main.c        **** 		xErrorHasOccurred = pdTRUE;
 201               	.LM9:
 202 0052 C093 0000 		sts xErrorHasOccurred.1967,r28
 203               	.L4:
 266:main.c        **** 	}
 267:main.c        **** 	
 268:main.c        **** 	if( xErrorHasOccurred == pdFALSE )
 205               	.LM10:
 206 0056 8091 0000 		lds r24,xErrorHasOccurred.1967
 207 005a 8111      		cpse r24,__zero_reg__
 208 005c 00C0      		rjmp .L18
 269:main.c        **** 	{
 270:main.c        **** 		/* Toggle the LED if everything is okay so we know if an error occurs even if not
 271:main.c        **** 		using console IO. */
 272:main.c        **** 		vParTestToggleLED( mainCHECK_TASK_LED );
 210               	.LM11:
 211 005e 87E0      		ldi r24,lo8(7)
 212 0060 0E94 0000 		call vParTestToggleLED
 213 0064 00C0      		rjmp .L18
 214               	.LBE6:
 215               	.LBE7:
 220               	.Lscope1:
 222               		.stabd	78,0,0
 223               		.section	.rodata.str1.1,"aMS",@progbits,1
 224               	.LC0:
 225 0000 4368 6563 		.string	"Check"
 225      6B00 
 226               		.section	.text.startup,"ax",@progbits
 228               	.global	main
 230               	main:
 231               		.stabd	46,0,0
 194:main.c        **** {
 233               	.LM12:
 234               	.LFBB2:
 235 0000 AF92      		push r10
 236 0002 BF92      		push r11
 237 0004 CF92      		push r12
 238 0006 DF92      		push r13
 239 0008 EF92      		push r14
 240 000a FF92      		push r15
 241 000c 0F93      		push r16
 242 000e CF93      		push r28
 243 0010 DF93      		push r29
 244 0012 1F92      		push __zero_reg__
 245 0014 CDB7      		in r28,__SP_L__
 246 0016 DEB7      		in r29,__SP_H__
 247               	/* prologue: function */
 248               	/* frame size = 1 */
 249               	/* stack size = 10 */
 250               	.L__stack_usage = 10
 251               	.LBB10:
 252               	.LBB11:
 273:main.c        **** 	}
 274:main.c        **** }
 275:main.c        **** /*-----------------------------------------------------------*/
 276:main.c        **** 
 277:main.c        **** static void prvIncrementResetCount( void )
 278:main.c        **** {
 279:main.c        **** unsigned char ucCount;
 280:main.c        **** 
 281:main.c        **** 	eeprom_read_block( &ucCount, mainRESET_COUNT_ADDRESS, sizeof( ucCount ) );
 254               	.LM13:
 255 0018 41E0      		ldi r20,lo8(1)
 256 001a 50E0      		ldi r21,0
 257 001c 60E5      		ldi r22,lo8(80)
 258 001e 70E0      		ldi r23,0
 259 0020 CE01      		movw r24,r28
 260 0022 0196      		adiw r24,1
 261 0024 0E94 0000 		call __eerd_block_m328
 282:main.c        **** 	ucCount++;
 263               	.LM14:
 264 0028 6981      		ldd r22,Y+1
 265 002a 6F5F      		subi r22,lo8(-(1))
 266 002c 6983      		std Y+1,r22
 283:main.c        **** 	eeprom_write_byte( mainRESET_COUNT_ADDRESS, ucCount );
 268               	.LM15:
 269 002e 80E5      		ldi r24,lo8(80)
 270 0030 90E0      		ldi r25,0
 271 0032 0E94 0000 		call __eewr_byte_m328
 272               	.LBE11:
 273               	.LBE10:
 198:main.c        **** 	vParTestInitialise();
 275               	.LM16:
 276 0036 0E94 0000 		call vParTestInitialise
 201:main.c        **** 	vStartIntegerMathTasks( tskIDLE_PRIORITY );
 278               	.LM17:
 279 003a 80E0      		ldi r24,0
 280 003c 0E94 0000 		call vStartIntegerMathTasks
 203:main.c        **** 	vStartPolledQueueTasks( mainQUEUE_POLL_PRIORITY );
 282               	.LM18:
 283 0040 82E0      		ldi r24,lo8(2)
 284 0042 0E94 0000 		call vStartPolledQueueTasks
 204:main.c        **** 	vStartRegTestTasks();
 286               	.LM19:
 287 0046 0E94 0000 		call vStartRegTestTasks
 207:main.c        **** 	xTaskCreate( vErrorChecks, ( signed char * ) "Check", configMINIMAL_STACK_SIZE, NULL, mainCHECK_TA
 289               	.LM20:
 290 004a A12C      		mov r10,__zero_reg__
 291 004c B12C      		mov r11,__zero_reg__
 292 004e C12C      		mov r12,__zero_reg__
 293 0050 D12C      		mov r13,__zero_reg__
 294 0052 E12C      		mov r14,__zero_reg__
 295 0054 F12C      		mov r15,__zero_reg__
 296 0056 03E0      		ldi r16,lo8(3)
 297 0058 20E0      		ldi r18,0
 298 005a 30E0      		ldi r19,0
 299 005c 45E5      		ldi r20,lo8(85)
 300 005e 50E0      		ldi r21,0
 301 0060 60E0      		ldi r22,lo8(.LC0)
 302 0062 70E0      		ldi r23,hi8(.LC0)
 303 0064 80E0      		ldi r24,lo8(gs(vErrorChecks))
 304 0066 90E0      		ldi r25,hi8(gs(vErrorChecks))
 305 0068 0E94 0000 		call xTaskGenericCreate
 210:main.c        **** 	vStartFlashCoRoutines( mainNUM_FLASH_COROUTINES );
 307               	.LM21:
 308 006c 83E0      		ldi r24,lo8(3)
 309 006e 0E94 0000 		call vStartFlashCoRoutines
 215:main.c        **** 	vTaskStartScheduler();
 311               	.LM22:
 312 0072 0E94 0000 		call vTaskStartScheduler
 218:main.c        **** }
 314               	.LM23:
 315 0076 80E0      		ldi r24,0
 316 0078 90E0      		ldi r25,0
 317               	/* epilogue start */
 318 007a 0F90      		pop __tmp_reg__
 319 007c DF91      		pop r29
 320 007e CF91      		pop r28
 321 0080 0F91      		pop r16
 322 0082 FF90      		pop r15
 323 0084 EF90      		pop r14
 324 0086 DF90      		pop r13
 325 0088 CF90      		pop r12
 326 008a BF90      		pop r11
 327 008c AF90      		pop r10
 328 008e 0895      		ret
 333               	.Lscope2:
 335               		.stabd	78,0,0
 336               		.text
 338               	.global	vApplicationIdleHook
 340               	vApplicationIdleHook:
 341               		.stabd	46,0,0
 284:main.c        **** }
 285:main.c        **** /*-----------------------------------------------------------*/
 286:main.c        **** 
 287:main.c        **** void vApplicationIdleHook( void )
 288:main.c        **** {
 343               	.LM24:
 344               	.LFBB3:
 345               	/* prologue: function */
 346               	/* frame size = 0 */
 347               	/* stack size = 0 */
 348               	.L__stack_usage = 0
 289:main.c        **** 	vCoRoutineSchedule();
 350               	.LM25:
 351 0066 0C94 0000 		jmp vCoRoutineSchedule
 353               	.Lscope3:
 355               		.stabd	78,0,0
 356               		.data
 359               	ulDummyVariable.1962:
 360 0000 03        		.byte	3
 361 0001 00        		.byte	0
 362 0002 00        		.byte	0
 363 0003 00        		.byte	0
 364               		.local	xErrorHasOccurred.1967
 365               		.comm	xErrorHasOccurred.1967,1,1
 366               		.text
 368               	.Letext0:
 369               		.ident	"GCC: (GNU) 4.7.2"
 370               	.global __do_copy_data
 371               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/cc4TQdSB.s:2      *ABS*:0000003e __SP_H__
     /tmp/cc4TQdSB.s:3      *ABS*:0000003d __SP_L__
     /tmp/cc4TQdSB.s:4      *ABS*:0000003f __SREG__
     /tmp/cc4TQdSB.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/cc4TQdSB.s:6      *ABS*:00000001 __zero_reg__
     /tmp/cc4TQdSB.s:140    .text:00000000 vErrorChecks
     /tmp/cc4TQdSB.s:359    .data:00000000 ulDummyVariable.1962
                             .bss:00000000 xErrorHasOccurred.1967
     /tmp/cc4TQdSB.s:230    .text.startup:00000000 main
     /tmp/cc4TQdSB.s:340    .text:00000066 vApplicationIdleHook

UNDEFINED SYMBOLS
vTaskDelay
__muluhisi3
xAreIntegerMathsTaskStillRunning
xArePollingQueuesStillRunning
xAreRegTestTasksStillRunning
vParTestToggleLED
__eerd_block_m328
__eewr_byte_m328
vParTestInitialise
vStartIntegerMathTasks
vStartPolledQueueTasks
vStartRegTestTasks
xTaskGenericCreate
vStartFlashCoRoutines
vTaskStartScheduler
vCoRoutineSchedule
__do_copy_data
__do_clear_bss
