   1               		.file	"ParTest.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
 112               	.global	vParTestInitialise
 114               	vParTestInitialise:
 115               		.stabd	46,0,0
   1:ParTest/ParTest.c **** /*
   2:ParTest/ParTest.c ****     FreeRTOS V7.6.0 - Copyright (C) 2013 Real Time Engineers Ltd. 
   3:ParTest/ParTest.c ****     All rights reserved
   4:ParTest/ParTest.c **** 
   5:ParTest/ParTest.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:ParTest/ParTest.c **** 
   7:ParTest/ParTest.c ****     ***************************************************************************
   8:ParTest/ParTest.c ****      *                                                                       *
   9:ParTest/ParTest.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  10:ParTest/ParTest.c ****      *    robust, strictly quality controlled, supported, and cross          *
  11:ParTest/ParTest.c ****      *    platform software that has become a de facto standard.             *
  12:ParTest/ParTest.c ****      *                                                                       *
  13:ParTest/ParTest.c ****      *    Help yourself get started quickly and support the FreeRTOS         *
  14:ParTest/ParTest.c ****      *    project by purchasing a FreeRTOS tutorial book, reference          *
  15:ParTest/ParTest.c ****      *    manual, or both from: http://www.FreeRTOS.org/Documentation        *
  16:ParTest/ParTest.c ****      *                                                                       *
  17:ParTest/ParTest.c ****      *    Thank you!                                                         *
  18:ParTest/ParTest.c ****      *                                                                       *
  19:ParTest/ParTest.c ****     ***************************************************************************
  20:ParTest/ParTest.c **** 
  21:ParTest/ParTest.c ****     This file is part of the FreeRTOS distribution.
  22:ParTest/ParTest.c **** 
  23:ParTest/ParTest.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  24:ParTest/ParTest.c ****     the terms of the GNU General Public License (version 2) as published by the
  25:ParTest/ParTest.c ****     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
  26:ParTest/ParTest.c **** 
  27:ParTest/ParTest.c ****     >>! NOTE: The modification to the GPL is included to allow you to distribute
  28:ParTest/ParTest.c ****     >>! a combined work that includes FreeRTOS without being obliged to provide
  29:ParTest/ParTest.c ****     >>! the source code for proprietary components outside of the FreeRTOS
  30:ParTest/ParTest.c ****     >>! kernel.
  31:ParTest/ParTest.c **** 
  32:ParTest/ParTest.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  33:ParTest/ParTest.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  34:ParTest/ParTest.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available from the following
  35:ParTest/ParTest.c ****     link: http://www.freertos.org/a00114.html
  36:ParTest/ParTest.c **** 
  37:ParTest/ParTest.c ****     1 tab == 4 spaces!
  38:ParTest/ParTest.c **** 
  39:ParTest/ParTest.c ****     ***************************************************************************
  40:ParTest/ParTest.c ****      *                                                                       *
  41:ParTest/ParTest.c ****      *    Having a problem?  Start by reading the FAQ "My application does   *
  42:ParTest/ParTest.c ****      *    not run, what could be wrong?"                                     *
  43:ParTest/ParTest.c ****      *                                                                       *
  44:ParTest/ParTest.c ****      *    http://www.FreeRTOS.org/FAQHelp.html                               *
  45:ParTest/ParTest.c ****      *                                                                       *
  46:ParTest/ParTest.c ****     ***************************************************************************
  47:ParTest/ParTest.c **** 
  48:ParTest/ParTest.c ****     http://www.FreeRTOS.org - Documentation, books, training, latest versions,
  49:ParTest/ParTest.c ****     license and Real Time Engineers Ltd. contact details.
  50:ParTest/ParTest.c **** 
  51:ParTest/ParTest.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  52:ParTest/ParTest.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  53:ParTest/ParTest.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  54:ParTest/ParTest.c **** 
  55:ParTest/ParTest.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High
  56:ParTest/ParTest.c ****     Integrity Systems to sell under the OpenRTOS brand.  Low cost OpenRTOS
  57:ParTest/ParTest.c ****     licenses offer ticketed support, indemnification and middleware.
  58:ParTest/ParTest.c **** 
  59:ParTest/ParTest.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  60:ParTest/ParTest.c ****     engineered and independently SIL3 certified version for use in safety and
  61:ParTest/ParTest.c ****     mission critical applications that require provable dependability.
  62:ParTest/ParTest.c **** 
  63:ParTest/ParTest.c ****     1 tab == 4 spaces!
  64:ParTest/ParTest.c **** */
  65:ParTest/ParTest.c **** 
  66:ParTest/ParTest.c **** /* 
  67:ParTest/ParTest.c **** Changes from V2.0.0
  68:ParTest/ParTest.c **** 
  69:ParTest/ParTest.c **** 	+ Use scheduler suspends in place of critical sections.
  70:ParTest/ParTest.c **** 
  71:ParTest/ParTest.c **** Changes from V2.6.0
  72:ParTest/ParTest.c **** 
  73:ParTest/ParTest.c **** 	+ Replaced the inb() and outb() functions with direct memory
  74:ParTest/ParTest.c **** 	  access.  This allows the port to be built with the 20050414 build of
  75:ParTest/ParTest.c **** 	  WinAVR.
  76:ParTest/ParTest.c **** */
  77:ParTest/ParTest.c **** 
  78:ParTest/ParTest.c **** #include "FreeRTOS.h"
  79:ParTest/ParTest.c **** #include "task.h"
  80:ParTest/ParTest.c **** #include "partest.h"
  81:ParTest/ParTest.c **** 
  82:ParTest/ParTest.c **** /*-----------------------------------------------------------
  83:ParTest/ParTest.c ****  * Simple parallel port IO routines.
  84:ParTest/ParTest.c ****  *-----------------------------------------------------------*/
  85:ParTest/ParTest.c **** 
  86:ParTest/ParTest.c **** #define partstALL_BITS_OUTPUT			( ( unsigned char ) 0xff )
  87:ParTest/ParTest.c **** #define partstALL_OUTPUTS_OFF			( ( unsigned char ) 0xff )
  88:ParTest/ParTest.c **** #define partstMAX_OUTPUT_LED			( ( unsigned char ) 7 )
  89:ParTest/ParTest.c **** 
  90:ParTest/ParTest.c **** static volatile unsigned char ucCurrentOutputValue = partstALL_OUTPUTS_OFF; /*lint !e956 File scope
  91:ParTest/ParTest.c **** 
  92:ParTest/ParTest.c **** /*-----------------------------------------------------------*/
  93:ParTest/ParTest.c **** 
  94:ParTest/ParTest.c **** void vParTestInitialise( void )
  95:ParTest/ParTest.c **** {
 117               	.LM0:
 118               	.LFBB1:
 119               	/* prologue: function */
 120               	/* frame size = 0 */
 121               	/* stack size = 0 */
 122               	.L__stack_usage = 0
  96:ParTest/ParTest.c **** 	ucCurrentOutputValue = partstALL_OUTPUTS_OFF;
 124               	.LM1:
 125 0000 8FEF      		ldi r24,lo8(-1)
 126 0002 8093 0000 		sts ucCurrentOutputValue,r24
  97:ParTest/ParTest.c **** 
  98:ParTest/ParTest.c **** 	/* Set port B direction to outputs.  Start with all output off. */
  99:ParTest/ParTest.c **** 	DDRB = partstALL_BITS_OUTPUT;
 128               	.LM2:
 129 0006 84B9      		out 0x4,r24
 100:ParTest/ParTest.c **** 	PORTB = ucCurrentOutputValue;
 131               	.LM3:
 132 0008 8091 0000 		lds r24,ucCurrentOutputValue
 133 000c 85B9      		out 0x5,r24
 134 000e 0895      		ret
 136               	.Lscope1:
 138               		.stabd	78,0,0
 142               	.global	vParTestSetLED
 144               	vParTestSetLED:
 145               		.stabd	46,0,0
 101:ParTest/ParTest.c **** }
 102:ParTest/ParTest.c **** /*-----------------------------------------------------------*/
 103:ParTest/ParTest.c **** 
 104:ParTest/ParTest.c **** void vParTestSetLED( unsigned portBASE_TYPE uxLED, signed portBASE_TYPE xValue )
 105:ParTest/ParTest.c **** {
 147               	.LM4:
 148               	.LFBB2:
 149 0010 CF93      		push r28
 150 0012 DF93      		push r29
 151 0014 00D0      		rcall .
 152 0016 CDB7      		in r28,__SP_L__
 153 0018 DEB7      		in r29,__SP_H__
 154               	/* prologue: function */
 155               	/* frame size = 2 */
 156               	/* stack size = 4 */
 157               	.L__stack_usage = 4
 106:ParTest/ParTest.c **** unsigned char ucBit = ( unsigned char ) 1;
 107:ParTest/ParTest.c **** 
 108:ParTest/ParTest.c **** 	if( uxLED <= partstMAX_OUTPUT_LED )
 159               	.LM5:
 160 001a 8830      		cpi r24,lo8(8)
 161 001c 00F4      		brsh .L2
 109:ParTest/ParTest.c **** 	{
 110:ParTest/ParTest.c **** 		ucBit <<= uxLED;	
 163               	.LM6:
 164 001e 21E0      		ldi r18,lo8(1)
 165 0020 30E0      		ldi r19,0
 166 0022 00C0      		rjmp 2f
 167               		1:
 168 0024 220F      		lsl r18
 169               		2:
 170 0026 8A95      		dec r24
 171 0028 02F4      		brpl 1b
 111:ParTest/ParTest.c **** 
 112:ParTest/ParTest.c **** 		vTaskSuspendAll();
 173               	.LM7:
 174 002a 2983      		std Y+1,r18
 175 002c 6A83      		std Y+2,r22
 176 002e 0E94 0000 		call vTaskSuspendAll
 113:ParTest/ParTest.c **** 		{
 114:ParTest/ParTest.c **** 			if( xValue == pdTRUE )
 178               	.LM8:
 179 0032 6A81      		ldd r22,Y+2
 180 0034 2981      		ldd r18,Y+1
 115:ParTest/ParTest.c **** 			{
 116:ParTest/ParTest.c **** 				ucBit ^= ( unsigned char ) 0xff;
 117:ParTest/ParTest.c **** 				ucCurrentOutputValue &= ucBit;
 182               	.LM9:
 183 0036 8091 0000 		lds r24,ucCurrentOutputValue
 114:ParTest/ParTest.c **** 			if( xValue == pdTRUE )
 185               	.LM10:
 186 003a 6130      		cpi r22,lo8(1)
 187 003c 01F4      		brne .L4
 116:ParTest/ParTest.c **** 				ucBit ^= ( unsigned char ) 0xff;
 189               	.LM11:
 190 003e 2095      		com r18
 192               	.LM12:
 193 0040 2823      		and r18,r24
 194 0042 2093 0000 		sts ucCurrentOutputValue,r18
 195 0046 00C0      		rjmp .L5
 196               	.L4:
 118:ParTest/ParTest.c **** 			}
 119:ParTest/ParTest.c **** 			else
 120:ParTest/ParTest.c **** 			{
 121:ParTest/ParTest.c **** 				ucCurrentOutputValue |= ucBit;
 198               	.LM13:
 199 0048 822B      		or r24,r18
 200 004a 8093 0000 		sts ucCurrentOutputValue,r24
 201               	.L5:
 122:ParTest/ParTest.c **** 			}
 123:ParTest/ParTest.c **** 
 124:ParTest/ParTest.c **** 			PORTB = ucCurrentOutputValue;
 203               	.LM14:
 204 004e 8091 0000 		lds r24,ucCurrentOutputValue
 205 0052 85B9      		out 0x5,r24
 206               	/* epilogue start */
 125:ParTest/ParTest.c **** 		}
 126:ParTest/ParTest.c **** 		xTaskResumeAll();
 127:ParTest/ParTest.c **** 	}
 128:ParTest/ParTest.c **** }
 208               	.LM15:
 209 0054 0F90      		pop __tmp_reg__
 210 0056 0F90      		pop __tmp_reg__
 211 0058 DF91      		pop r29
 212 005a CF91      		pop r28
 126:ParTest/ParTest.c **** 		xTaskResumeAll();
 214               	.LM16:
 215 005c 0C94 0000 		jmp xTaskResumeAll
 216               	.L2:
 217               	/* epilogue start */
 219               	.LM17:
 220 0060 0F90      		pop __tmp_reg__
 221 0062 0F90      		pop __tmp_reg__
 222 0064 DF91      		pop r29
 223 0066 CF91      		pop r28
 224 0068 0895      		ret
 226               	.Lscope2:
 228               		.stabd	78,0,0
 231               	.global	vParTestToggleLED
 233               	vParTestToggleLED:
 234               		.stabd	46,0,0
 129:ParTest/ParTest.c **** /*-----------------------------------------------------------*/
 130:ParTest/ParTest.c **** 
 131:ParTest/ParTest.c **** void vParTestToggleLED( unsigned portBASE_TYPE uxLED )
 132:ParTest/ParTest.c **** {
 236               	.LM18:
 237               	.LFBB3:
 238 006a CF93      		push r28
 239               	/* prologue: function */
 240               	/* frame size = 0 */
 241               	/* stack size = 1 */
 242               	.L__stack_usage = 1
 133:ParTest/ParTest.c **** unsigned char ucBit;
 134:ParTest/ParTest.c **** 
 135:ParTest/ParTest.c **** 	if( uxLED <= partstMAX_OUTPUT_LED )
 244               	.LM19:
 245 006c 8830      		cpi r24,lo8(8)
 246 006e 00F4      		brsh .L6
 136:ParTest/ParTest.c **** 	{
 137:ParTest/ParTest.c **** 		ucBit = ( ( unsigned char ) 1 ) << uxLED;
 248               	.LM20:
 249 0070 21E0      		ldi r18,lo8(1)
 250 0072 30E0      		ldi r19,0
 251 0074 00C0      		rjmp 2f
 252               		1:
 253 0076 220F      		lsl r18
 254               		2:
 255 0078 8A95      		dec r24
 256 007a 02F4      		brpl 1b
 257 007c C22F      		mov r28,r18
 138:ParTest/ParTest.c **** 
 139:ParTest/ParTest.c **** 		vTaskSuspendAll();
 259               	.LM21:
 260 007e 0E94 0000 		call vTaskSuspendAll
 140:ParTest/ParTest.c **** 		{
 141:ParTest/ParTest.c **** 			if( ucCurrentOutputValue & ucBit )
 262               	.LM22:
 263 0082 8091 0000 		lds r24,ucCurrentOutputValue
 264 0086 8C23      		and r24,r28
 265 0088 01F0      		breq .L8
 142:ParTest/ParTest.c **** 			{
 143:ParTest/ParTest.c **** 				ucCurrentOutputValue &= ~ucBit;
 267               	.LM23:
 268 008a 8091 0000 		lds r24,ucCurrentOutputValue
 269 008e C095      		com r28
 270 0090 C823      		and r28,r24
 271 0092 C093 0000 		sts ucCurrentOutputValue,r28
 272 0096 00C0      		rjmp .L9
 273               	.L8:
 144:ParTest/ParTest.c **** 			}
 145:ParTest/ParTest.c **** 			else
 146:ParTest/ParTest.c **** 			{
 147:ParTest/ParTest.c **** 				ucCurrentOutputValue |= ucBit;
 275               	.LM24:
 276 0098 8091 0000 		lds r24,ucCurrentOutputValue
 277 009c 8C2B      		or r24,r28
 278 009e 8093 0000 		sts ucCurrentOutputValue,r24
 279               	.L9:
 148:ParTest/ParTest.c **** 			}
 149:ParTest/ParTest.c **** 
 150:ParTest/ParTest.c **** 			PORTB = ucCurrentOutputValue;
 281               	.LM25:
 282 00a2 8091 0000 		lds r24,ucCurrentOutputValue
 283 00a6 85B9      		out 0x5,r24
 284               	/* epilogue start */
 151:ParTest/ParTest.c **** 		}
 152:ParTest/ParTest.c **** 		xTaskResumeAll();			
 153:ParTest/ParTest.c **** 	}
 154:ParTest/ParTest.c **** }
 286               	.LM26:
 287 00a8 CF91      		pop r28
 152:ParTest/ParTest.c **** 		xTaskResumeAll();			
 289               	.LM27:
 290 00aa 0C94 0000 		jmp xTaskResumeAll
 291               	.L6:
 292               	/* epilogue start */
 294               	.LM28:
 295 00ae CF91      		pop r28
 296 00b0 0895      		ret
 301               	.Lscope3:
 303               		.stabd	78,0,0
 304               		.data
 307               	ucCurrentOutputValue:
 308 0000 FF        		.byte	-1
 310               		.text
 312               	.Letext0:
 313               		.ident	"GCC: (GNU) 4.7.2"
 314               	.global __do_copy_data
DEFINED SYMBOLS
                            *ABS*:00000000 ParTest.c
     /tmp/ccDirBgL.s:2      *ABS*:0000003e __SP_H__
     /tmp/ccDirBgL.s:3      *ABS*:0000003d __SP_L__
     /tmp/ccDirBgL.s:4      *ABS*:0000003f __SREG__
     /tmp/ccDirBgL.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccDirBgL.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccDirBgL.s:114    .text:00000000 vParTestInitialise
     /tmp/ccDirBgL.s:307    .data:00000000 ucCurrentOutputValue
     /tmp/ccDirBgL.s:144    .text:00000010 vParTestSetLED
     /tmp/ccDirBgL.s:233    .text:0000006a vParTestToggleLED

UNDEFINED SYMBOLS
vTaskSuspendAll
xTaskResumeAll
__do_copy_data
