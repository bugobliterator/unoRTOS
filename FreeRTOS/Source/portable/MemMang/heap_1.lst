   1               		.file	"heap_1.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
 120               	.global	pvPortMalloc
 122               	pvPortMalloc:
 123               		.stabd	46,0,0
   1:../../Source/portable/MemMang/heap_1.c **** /*
   2:../../Source/portable/MemMang/heap_1.c ****     FreeRTOS V7.6.0 - Copyright (C) 2013 Real Time Engineers Ltd. 
   3:../../Source/portable/MemMang/heap_1.c ****     All rights reserved
   4:../../Source/portable/MemMang/heap_1.c **** 
   5:../../Source/portable/MemMang/heap_1.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../../Source/portable/MemMang/heap_1.c **** 
   7:../../Source/portable/MemMang/heap_1.c ****     ***************************************************************************
   8:../../Source/portable/MemMang/heap_1.c ****      *                                                                       *
   9:../../Source/portable/MemMang/heap_1.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  10:../../Source/portable/MemMang/heap_1.c ****      *    robust, strictly quality controlled, supported, and cross          *
  11:../../Source/portable/MemMang/heap_1.c ****      *    platform software that has become a de facto standard.             *
  12:../../Source/portable/MemMang/heap_1.c ****      *                                                                       *
  13:../../Source/portable/MemMang/heap_1.c ****      *    Help yourself get started quickly and support the FreeRTOS         *
  14:../../Source/portable/MemMang/heap_1.c ****      *    project by purchasing a FreeRTOS tutorial book, reference          *
  15:../../Source/portable/MemMang/heap_1.c ****      *    manual, or both from: http://www.FreeRTOS.org/Documentation        *
  16:../../Source/portable/MemMang/heap_1.c ****      *                                                                       *
  17:../../Source/portable/MemMang/heap_1.c ****      *    Thank you!                                                         *
  18:../../Source/portable/MemMang/heap_1.c ****      *                                                                       *
  19:../../Source/portable/MemMang/heap_1.c ****     ***************************************************************************
  20:../../Source/portable/MemMang/heap_1.c **** 
  21:../../Source/portable/MemMang/heap_1.c ****     This file is part of the FreeRTOS distribution.
  22:../../Source/portable/MemMang/heap_1.c **** 
  23:../../Source/portable/MemMang/heap_1.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  24:../../Source/portable/MemMang/heap_1.c ****     the terms of the GNU General Public License (version 2) as published by the
  25:../../Source/portable/MemMang/heap_1.c ****     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
  26:../../Source/portable/MemMang/heap_1.c **** 
  27:../../Source/portable/MemMang/heap_1.c ****     >>! NOTE: The modification to the GPL is included to allow you to distribute
  28:../../Source/portable/MemMang/heap_1.c ****     >>! a combined work that includes FreeRTOS without being obliged to provide
  29:../../Source/portable/MemMang/heap_1.c ****     >>! the source code for proprietary components outside of the FreeRTOS
  30:../../Source/portable/MemMang/heap_1.c ****     >>! kernel.
  31:../../Source/portable/MemMang/heap_1.c **** 
  32:../../Source/portable/MemMang/heap_1.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  33:../../Source/portable/MemMang/heap_1.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  34:../../Source/portable/MemMang/heap_1.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available from the following
  35:../../Source/portable/MemMang/heap_1.c ****     link: http://www.freertos.org/a00114.html
  36:../../Source/portable/MemMang/heap_1.c **** 
  37:../../Source/portable/MemMang/heap_1.c ****     1 tab == 4 spaces!
  38:../../Source/portable/MemMang/heap_1.c **** 
  39:../../Source/portable/MemMang/heap_1.c ****     ***************************************************************************
  40:../../Source/portable/MemMang/heap_1.c ****      *                                                                       *
  41:../../Source/portable/MemMang/heap_1.c ****      *    Having a problem?  Start by reading the FAQ "My application does   *
  42:../../Source/portable/MemMang/heap_1.c ****      *    not run, what could be wrong?"                                     *
  43:../../Source/portable/MemMang/heap_1.c ****      *                                                                       *
  44:../../Source/portable/MemMang/heap_1.c ****      *    http://www.FreeRTOS.org/FAQHelp.html                               *
  45:../../Source/portable/MemMang/heap_1.c ****      *                                                                       *
  46:../../Source/portable/MemMang/heap_1.c ****     ***************************************************************************
  47:../../Source/portable/MemMang/heap_1.c **** 
  48:../../Source/portable/MemMang/heap_1.c ****     http://www.FreeRTOS.org - Documentation, books, training, latest versions,
  49:../../Source/portable/MemMang/heap_1.c ****     license and Real Time Engineers Ltd. contact details.
  50:../../Source/portable/MemMang/heap_1.c **** 
  51:../../Source/portable/MemMang/heap_1.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  52:../../Source/portable/MemMang/heap_1.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  53:../../Source/portable/MemMang/heap_1.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  54:../../Source/portable/MemMang/heap_1.c **** 
  55:../../Source/portable/MemMang/heap_1.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High
  56:../../Source/portable/MemMang/heap_1.c ****     Integrity Systems to sell under the OpenRTOS brand.  Low cost OpenRTOS
  57:../../Source/portable/MemMang/heap_1.c ****     licenses offer ticketed support, indemnification and middleware.
  58:../../Source/portable/MemMang/heap_1.c **** 
  59:../../Source/portable/MemMang/heap_1.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  60:../../Source/portable/MemMang/heap_1.c ****     engineered and independently SIL3 certified version for use in safety and
  61:../../Source/portable/MemMang/heap_1.c ****     mission critical applications that require provable dependability.
  62:../../Source/portable/MemMang/heap_1.c **** 
  63:../../Source/portable/MemMang/heap_1.c ****     1 tab == 4 spaces!
  64:../../Source/portable/MemMang/heap_1.c **** */
  65:../../Source/portable/MemMang/heap_1.c **** 
  66:../../Source/portable/MemMang/heap_1.c **** 
  67:../../Source/portable/MemMang/heap_1.c **** /*
  68:../../Source/portable/MemMang/heap_1.c ****  * The simplest possible implementation of pvPortMalloc().  Note that this
  69:../../Source/portable/MemMang/heap_1.c ****  * implementation does NOT allow allocated memory to be freed again.
  70:../../Source/portable/MemMang/heap_1.c ****  *
  71:../../Source/portable/MemMang/heap_1.c ****  * See heap_2.c, heap_3.c and heap_4.c for alternative implementations, and the
  72:../../Source/portable/MemMang/heap_1.c ****  * memory management pages of http://www.FreeRTOS.org for more information.
  73:../../Source/portable/MemMang/heap_1.c ****  */
  74:../../Source/portable/MemMang/heap_1.c **** #include <stdlib.h>
  75:../../Source/portable/MemMang/heap_1.c **** 
  76:../../Source/portable/MemMang/heap_1.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  77:../../Source/portable/MemMang/heap_1.c **** all the API functions to use the MPU wrappers.  That should only be done when
  78:../../Source/portable/MemMang/heap_1.c **** task.h is included from an application file. */
  79:../../Source/portable/MemMang/heap_1.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  80:../../Source/portable/MemMang/heap_1.c **** 
  81:../../Source/portable/MemMang/heap_1.c **** #include "FreeRTOS.h"
  82:../../Source/portable/MemMang/heap_1.c **** #include "task.h"
  83:../../Source/portable/MemMang/heap_1.c **** 
  84:../../Source/portable/MemMang/heap_1.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  85:../../Source/portable/MemMang/heap_1.c **** 
  86:../../Source/portable/MemMang/heap_1.c **** /* A few bytes might be lost to byte aligning the heap start address. */
  87:../../Source/portable/MemMang/heap_1.c **** #define configADJUSTED_HEAP_SIZE	( configTOTAL_HEAP_SIZE - portBYTE_ALIGNMENT )
  88:../../Source/portable/MemMang/heap_1.c **** 
  89:../../Source/portable/MemMang/heap_1.c **** /* Allocate the memory for the heap. */
  90:../../Source/portable/MemMang/heap_1.c **** static unsigned char ucHeap[ configTOTAL_HEAP_SIZE ];
  91:../../Source/portable/MemMang/heap_1.c **** static size_t xNextFreeByte = ( size_t ) 0;
  92:../../Source/portable/MemMang/heap_1.c **** 
  93:../../Source/portable/MemMang/heap_1.c **** /*-----------------------------------------------------------*/
  94:../../Source/portable/MemMang/heap_1.c **** 
  95:../../Source/portable/MemMang/heap_1.c **** void *pvPortMalloc( size_t xWantedSize )
  96:../../Source/portable/MemMang/heap_1.c **** {
 125               	.LM0:
 126               	.LFBB1:
 127 0000 CF93      		push r28
 128 0002 DF93      		push r29
 129               	/* prologue: function */
 130               	/* frame size = 0 */
 131               	/* stack size = 2 */
 132               	.L__stack_usage = 2
 133 0004 EC01      		movw r28,r24
  97:../../Source/portable/MemMang/heap_1.c **** void *pvReturn = NULL;
  98:../../Source/portable/MemMang/heap_1.c **** static unsigned char *pucAlignedHeap = NULL;
  99:../../Source/portable/MemMang/heap_1.c **** 
 100:../../Source/portable/MemMang/heap_1.c **** 	/* Ensure that blocks are always aligned to the required number of bytes. */
 101:../../Source/portable/MemMang/heap_1.c **** 	#if portBYTE_ALIGNMENT != 1
 102:../../Source/portable/MemMang/heap_1.c **** 		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 103:../../Source/portable/MemMang/heap_1.c **** 		{
 104:../../Source/portable/MemMang/heap_1.c **** 			/* Byte alignment required. */
 105:../../Source/portable/MemMang/heap_1.c **** 			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 106:../../Source/portable/MemMang/heap_1.c **** 		}
 107:../../Source/portable/MemMang/heap_1.c **** 	#endif
 108:../../Source/portable/MemMang/heap_1.c **** 
 109:../../Source/portable/MemMang/heap_1.c **** 	vTaskSuspendAll();
 135               	.LM1:
 136 0006 0E94 0000 		call vTaskSuspendAll
 110:../../Source/portable/MemMang/heap_1.c **** 	{
 111:../../Source/portable/MemMang/heap_1.c **** 		if( pucAlignedHeap == NULL )
 138               	.LM2:
 139 000a 8091 0000 		lds r24,pucAlignedHeap.1662
 140 000e 9091 0000 		lds r25,pucAlignedHeap.1662+1
 141 0012 892B      		or r24,r25
 142 0014 01F4      		brne .L2
 112:../../Source/portable/MemMang/heap_1.c **** 		{
 113:../../Source/portable/MemMang/heap_1.c **** 			/* Ensure the heap starts on a correctly aligned boundary. */
 114:../../Source/portable/MemMang/heap_1.c **** 			pucAlignedHeap = ( unsigned char * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ]
 144               	.LM3:
 145 0016 80E0      		ldi r24,lo8(ucHeap+1)
 146 0018 90E0      		ldi r25,hi8(ucHeap+1)
 147 001a 9093 0000 		sts pucAlignedHeap.1662+1,r25
 148 001e 8093 0000 		sts pucAlignedHeap.1662,r24
 149               	.L2:
 115:../../Source/portable/MemMang/heap_1.c **** 		}
 116:../../Source/portable/MemMang/heap_1.c **** 
 117:../../Source/portable/MemMang/heap_1.c **** 		/* Check there is enough room left for the allocation. */
 118:../../Source/portable/MemMang/heap_1.c **** 		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 151               	.LM4:
 152 0022 2091 0000 		lds r18,xNextFreeByte
 153 0026 3091 0000 		lds r19,xNextFreeByte+1
 154 002a CE01      		movw r24,r28
 155 002c 820F      		add r24,r18
 156 002e 931F      		adc r25,r19
 157 0030 8B3D      		cpi r24,-37
 158 0032 45E0      		ldi r20,5
 159 0034 9407      		cpc r25,r20
 160 0036 00F4      		brsh .L5
 162               	.LM5:
 163 0038 2817      		cp r18,r24
 164 003a 3907      		cpc r19,r25
 165 003c 00F4      		brsh .L5
 119:../../Source/portable/MemMang/heap_1.c **** 			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 120:../../Source/portable/MemMang/heap_1.c **** 		{
 121:../../Source/portable/MemMang/heap_1.c **** 			/* Return the next free byte then increment the index past this
 122:../../Source/portable/MemMang/heap_1.c **** 			block. */
 123:../../Source/portable/MemMang/heap_1.c **** 			pvReturn = pucAlignedHeap + xNextFreeByte;
 167               	.LM6:
 168 003e C091 0000 		lds r28,pucAlignedHeap.1662
 169 0042 D091 0000 		lds r29,pucAlignedHeap.1662+1
 170 0046 C20F      		add r28,r18
 171 0048 D31F      		adc r29,r19
 124:../../Source/portable/MemMang/heap_1.c **** 			xNextFreeByte += xWantedSize;
 173               	.LM7:
 174 004a 9093 0000 		sts xNextFreeByte+1,r25
 175 004e 8093 0000 		sts xNextFreeByte,r24
 176 0052 00C0      		rjmp .L3
 177               	.L5:
  97:../../Source/portable/MemMang/heap_1.c **** void *pvReturn = NULL;
 179               	.LM8:
 180 0054 C0E0      		ldi r28,0
 181 0056 D0E0      		ldi r29,0
 182               	.L3:
 125:../../Source/portable/MemMang/heap_1.c **** 		}
 126:../../Source/portable/MemMang/heap_1.c **** 
 127:../../Source/portable/MemMang/heap_1.c **** 		traceMALLOC( pvReturn, xWantedSize );
 128:../../Source/portable/MemMang/heap_1.c **** 	}	
 129:../../Source/portable/MemMang/heap_1.c **** 	xTaskResumeAll();
 184               	.LM9:
 185 0058 0E94 0000 		call xTaskResumeAll
 130:../../Source/portable/MemMang/heap_1.c **** 
 131:../../Source/portable/MemMang/heap_1.c **** 	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
 132:../../Source/portable/MemMang/heap_1.c **** 	{
 133:../../Source/portable/MemMang/heap_1.c **** 		if( pvReturn == NULL )
 134:../../Source/portable/MemMang/heap_1.c **** 		{
 135:../../Source/portable/MemMang/heap_1.c **** 			extern void vApplicationMallocFailedHook( void );
 136:../../Source/portable/MemMang/heap_1.c **** 			vApplicationMallocFailedHook();
 137:../../Source/portable/MemMang/heap_1.c **** 		}
 138:../../Source/portable/MemMang/heap_1.c **** 	}
 139:../../Source/portable/MemMang/heap_1.c **** 	#endif
 140:../../Source/portable/MemMang/heap_1.c **** 
 141:../../Source/portable/MemMang/heap_1.c **** 	return pvReturn;
 142:../../Source/portable/MemMang/heap_1.c **** }
 187               	.LM10:
 188 005c CE01      		movw r24,r28
 189               	/* epilogue start */
 190 005e DF91      		pop r29
 191 0060 CF91      		pop r28
 192 0062 0895      		ret
 198               	.Lscope1:
 200               		.stabd	78,0,0
 203               	.global	vPortFree
 205               	vPortFree:
 206               		.stabd	46,0,0
 143:../../Source/portable/MemMang/heap_1.c **** /*-----------------------------------------------------------*/
 144:../../Source/portable/MemMang/heap_1.c **** 
 145:../../Source/portable/MemMang/heap_1.c **** void vPortFree( void *pv )
 146:../../Source/portable/MemMang/heap_1.c **** {
 208               	.LM11:
 209               	.LFBB2:
 210               	/* prologue: function */
 211               	/* frame size = 0 */
 212               	/* stack size = 0 */
 213               	.L__stack_usage = 0
 214 0064 0895      		ret
 216               	.Lscope2:
 218               		.stabd	78,0,0
 220               	.global	vPortInitialiseBlocks
 222               	vPortInitialiseBlocks:
 223               		.stabd	46,0,0
 147:../../Source/portable/MemMang/heap_1.c **** 	/* Memory cannot be freed using this scheme.  See heap_2.c, heap_3.c and
 148:../../Source/portable/MemMang/heap_1.c **** 	heap_4.c for alternative implementations, and the memory management pages of
 149:../../Source/portable/MemMang/heap_1.c **** 	http://www.FreeRTOS.org for more information. */
 150:../../Source/portable/MemMang/heap_1.c **** 	( void ) pv;
 151:../../Source/portable/MemMang/heap_1.c **** 
 152:../../Source/portable/MemMang/heap_1.c **** 	/* Force an assert as it is invalid to call this function. */
 153:../../Source/portable/MemMang/heap_1.c **** 	configASSERT( pv == NULL );
 154:../../Source/portable/MemMang/heap_1.c **** }
 155:../../Source/portable/MemMang/heap_1.c **** /*-----------------------------------------------------------*/
 156:../../Source/portable/MemMang/heap_1.c **** 
 157:../../Source/portable/MemMang/heap_1.c **** void vPortInitialiseBlocks( void )
 158:../../Source/portable/MemMang/heap_1.c **** {
 225               	.LM12:
 226               	.LFBB3:
 227               	/* prologue: function */
 228               	/* frame size = 0 */
 229               	/* stack size = 0 */
 230               	.L__stack_usage = 0
 159:../../Source/portable/MemMang/heap_1.c **** 	/* Only required when static memory is not cleared. */
 160:../../Source/portable/MemMang/heap_1.c **** 	xNextFreeByte = ( size_t ) 0;
 232               	.LM13:
 233 0066 1092 0000 		sts xNextFreeByte+1,__zero_reg__
 234 006a 1092 0000 		sts xNextFreeByte,__zero_reg__
 235 006e 0895      		ret
 237               	.Lscope3:
 239               		.stabd	78,0,0
 241               	.global	xPortGetFreeHeapSize
 243               	xPortGetFreeHeapSize:
 244               		.stabd	46,0,0
 161:../../Source/portable/MemMang/heap_1.c **** }
 162:../../Source/portable/MemMang/heap_1.c **** /*-----------------------------------------------------------*/
 163:../../Source/portable/MemMang/heap_1.c **** 
 164:../../Source/portable/MemMang/heap_1.c **** size_t xPortGetFreeHeapSize( void )
 165:../../Source/portable/MemMang/heap_1.c **** {
 246               	.LM14:
 247               	.LFBB4:
 248               	/* prologue: function */
 249               	/* frame size = 0 */
 250               	/* stack size = 0 */
 251               	.L__stack_usage = 0
 166:../../Source/portable/MemMang/heap_1.c **** 	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
 253               	.LM15:
 254 0070 2BED      		ldi r18,lo8(-37)
 255 0072 35E0      		ldi r19,lo8(5)
 256 0074 8091 0000 		lds r24,xNextFreeByte
 257 0078 9091 0000 		lds r25,xNextFreeByte+1
 258 007c 281B      		sub r18,r24
 259 007e 390B      		sbc r19,r25
 167:../../Source/portable/MemMang/heap_1.c **** }
 261               	.LM16:
 262 0080 C901      		movw r24,r18
 263 0082 0895      		ret
 265               	.Lscope4:
 267               		.stabd	78,0,0
 268               		.local	pucAlignedHeap.1662
 269               		.comm	pucAlignedHeap.1662,2,1
 270               		.local	ucHeap
 271               		.comm	ucHeap,1500,1
 272               		.local	xNextFreeByte
 273               		.comm	xNextFreeByte,2,1
 277               	.Letext0:
 278               		.ident	"GCC: (GNU) 4.7.2"
 279               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 heap_1.c
     /tmp/ccDQ3LRe.s:2      *ABS*:0000003e __SP_H__
     /tmp/ccDQ3LRe.s:3      *ABS*:0000003d __SP_L__
     /tmp/ccDQ3LRe.s:4      *ABS*:0000003f __SREG__
     /tmp/ccDQ3LRe.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccDQ3LRe.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccDQ3LRe.s:122    .text:00000000 pvPortMalloc
                             .bss:00000000 pucAlignedHeap.1662
     /tmp/ccDQ3LRe.s:269    .bss:00000002 ucHeap
     /tmp/ccDQ3LRe.s:271    .bss:000005de xNextFreeByte
     /tmp/ccDQ3LRe.s:205    .text:00000064 vPortFree
     /tmp/ccDQ3LRe.s:222    .text:00000066 vPortInitialiseBlocks
     /tmp/ccDQ3LRe.s:243    .text:00000070 xPortGetFreeHeapSize

UNDEFINED SYMBOLS
vTaskSuspendAll
xTaskResumeAll
__do_clear_bss
