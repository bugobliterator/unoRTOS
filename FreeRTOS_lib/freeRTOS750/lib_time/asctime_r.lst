   1               		.file	"asctime_r.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
  83               	.global	asctime_r
  85               	asctime_r:
  86               		.stabd	46,0,0
   1:../freeRTOS750/lib_time/asctime_r.c **** /*
   2:../freeRTOS750/lib_time/asctime_r.c ****  * (C)2012 Michael Duane Rice All rights reserved.
   3:../freeRTOS750/lib_time/asctime_r.c ****  *
   4:../freeRTOS750/lib_time/asctime_r.c ****  * Redistribution and use in source and binary forms, with or without
   5:../freeRTOS750/lib_time/asctime_r.c ****  * modification, are permitted provided that the following conditions are
   6:../freeRTOS750/lib_time/asctime_r.c ****  * met:
   7:../freeRTOS750/lib_time/asctime_r.c ****  *
   8:../freeRTOS750/lib_time/asctime_r.c ****  * Redistributions of source code must retain the above copyright notice, this
   9:../freeRTOS750/lib_time/asctime_r.c ****  * list of conditions and the following disclaimer. Redistributions in binary
  10:../freeRTOS750/lib_time/asctime_r.c ****  * form must reproduce the above copyright notice, this list of conditions
  11:../freeRTOS750/lib_time/asctime_r.c ****  * and the following disclaimer in the documentation and/or other materials
  12:../freeRTOS750/lib_time/asctime_r.c ****  * provided with the distribution. Neither the name of the copyright holders
  13:../freeRTOS750/lib_time/asctime_r.c ****  * nor the names of contributors may be used to endorse or promote products
  14:../freeRTOS750/lib_time/asctime_r.c ****  * derived from this software without specific prior written permission.
  15:../freeRTOS750/lib_time/asctime_r.c ****  *
  16:../freeRTOS750/lib_time/asctime_r.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  17:../freeRTOS750/lib_time/asctime_r.c ****  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  18:../freeRTOS750/lib_time/asctime_r.c ****  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  19:../freeRTOS750/lib_time/asctime_r.c ****  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  20:../freeRTOS750/lib_time/asctime_r.c ****  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  21:../freeRTOS750/lib_time/asctime_r.c ****  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  22:../freeRTOS750/lib_time/asctime_r.c ****  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  23:../freeRTOS750/lib_time/asctime_r.c ****  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  24:../freeRTOS750/lib_time/asctime_r.c ****  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  25:../freeRTOS750/lib_time/asctime_r.c ****  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  26:../freeRTOS750/lib_time/asctime_r.c ****  * POSSIBILITY OF SUCH DAMAGE.
  27:../freeRTOS750/lib_time/asctime_r.c ****  */
  28:../freeRTOS750/lib_time/asctime_r.c **** 
  29:../freeRTOS750/lib_time/asctime_r.c **** /* $Id$ */
  30:../freeRTOS750/lib_time/asctime_r.c **** 
  31:../freeRTOS750/lib_time/asctime_r.c **** /*
  32:../freeRTOS750/lib_time/asctime_r.c **** 	Re-entrant version of asctime().
  33:../freeRTOS750/lib_time/asctime_r.c **** 
  34:../freeRTOS750/lib_time/asctime_r.c **** */
  35:../freeRTOS750/lib_time/asctime_r.c **** #include <time.h>
  36:../freeRTOS750/lib_time/asctime_r.c **** #include <stdlib.h>
  37:../freeRTOS750/lib_time/asctime_r.c **** 
  38:../freeRTOS750/lib_time/asctime_r.c **** #ifdef __MEMX
  39:../freeRTOS750/lib_time/asctime_r.c **** const __memx char ascmonths[] = "JanFebMarAprMayJunJulAugSepOctNovDec";
  40:../freeRTOS750/lib_time/asctime_r.c **** const __memx char ascdays[] = "SunMonTueWedThuFriSat";
  41:../freeRTOS750/lib_time/asctime_r.c **** #else
  42:../freeRTOS750/lib_time/asctime_r.c **** const char      ascmonths[] = "JanFebMarAprMayJunJulAugSepOctNovDec";
  43:../freeRTOS750/lib_time/asctime_r.c **** const char      ascdays[] = "SunMonTueWedThuFriSat";
  44:../freeRTOS750/lib_time/asctime_r.c **** #endif
  45:../freeRTOS750/lib_time/asctime_r.c **** 
  46:../freeRTOS750/lib_time/asctime_r.c **** extern void __print_lz(int , char *, char );
  47:../freeRTOS750/lib_time/asctime_r.c **** 
  48:../freeRTOS750/lib_time/asctime_r.c **** void
  49:../freeRTOS750/lib_time/asctime_r.c **** asctime_r(const struct tm * timeptr, char *buffer)
  50:../freeRTOS750/lib_time/asctime_r.c **** {
  88               	.LM0:
  89               	.LFBB1:
  90 0000 CF92      		push r12
  91 0002 DF92      		push r13
  92 0004 EF92      		push r14
  93 0006 FF92      		push r15
  94 0008 CF93      		push r28
  95 000a DF93      		push r29
  96               	/* prologue: function */
  97               	/* frame size = 0 */
  98               	/* stack size = 6 */
  99               	.L__stack_usage = 6
 100 000c 7C01      		movw r14,r24
 101 000e EB01      		movw r28,r22
  51:../freeRTOS750/lib_time/asctime_r.c **** 	unsigned char   i, m, d;
  52:../freeRTOS750/lib_time/asctime_r.c **** 	div_t result;
  53:../freeRTOS750/lib_time/asctime_r.c **** 
  54:../freeRTOS750/lib_time/asctime_r.c **** 	d = timeptr->tm_wday * 3;
 103               	.LM1:
 104 0010 FC01      		movw r30,r24
 105 0012 8481      		ldd r24,Z+4
 106 0014 782F      		mov r23,r24
 107 0016 770F      		lsl r23
 108 0018 780F      		add r23,r24
  55:../freeRTOS750/lib_time/asctime_r.c **** 	m = timeptr->tm_mon * 3;
 110               	.LM2:
 111 001a 8581      		ldd r24,Z+5
 112 001c 682F      		mov r22,r24
 113 001e 660F      		lsl r22
 114 0020 680F      		add r22,r24
 115 0022 CE01      		movw r24,r28
  49:../freeRTOS750/lib_time/asctime_r.c **** asctime_r(const struct tm * timeptr, char *buffer)
 117               	.LM3:
 118 0024 DE01      		movw r26,r28
 119 0026 1496      		adiw r26,4
  56:../freeRTOS750/lib_time/asctime_r.c **** 	for (i = 0; i < 3; i++) {
 121               	.LM4:
 122 0028 50E0      		ldi r21,0
 123               	.L2:
  57:../freeRTOS750/lib_time/asctime_r.c **** 	    buffer[i] = ascdays[d++];
 125               	.LM5:
 126 002a 252F      		mov r18,r21
 127 002c 270F      		add r18,r23
 128 002e 30E0      		ldi r19,0
 129 0030 40E0      		ldi r20,0
 130 0032 2050      		subi r18,lo8(-(ascdays))
 131 0034 3040      		sbci r19,hi8(-(ascdays))
 132 0036 4040      		sbci r20,hlo8(-(ascdays))
 133 0038 F901      		movw r30,r18
 134 003a 47FD      		sbrc r20,7
 135 003c 3081      		ld r19,Z
 136 003e 47FF      		sbrs r20,7
 137 0040 3491      		lpm r19,Z
 138 0042 FC01      		movw r30,r24
 139 0044 3193      		st Z+,r19
 140 0046 CF01      		movw r24,r30
  58:../freeRTOS750/lib_time/asctime_r.c **** 	    buffer[i+4] = ascmonths[m++];
 142               	.LM6:
 143 0048 252F      		mov r18,r21
 144 004a 260F      		add r18,r22
 145 004c 30E0      		ldi r19,0
 146 004e 40E0      		ldi r20,0
 147 0050 2050      		subi r18,lo8(-(ascmonths))
 148 0052 3040      		sbci r19,hi8(-(ascmonths))
 149 0054 4040      		sbci r20,hlo8(-(ascmonths))
 150 0056 F901      		movw r30,r18
 151 0058 47FD      		sbrc r20,7
 152 005a 3081      		ld r19,Z
 153 005c 47FF      		sbrs r20,7
 154 005e 3491      		lpm r19,Z
 155 0060 3D93      		st X+,r19
  56:../freeRTOS750/lib_time/asctime_r.c **** 	for (i = 0; i < 3; i++) {
 157               	.LM7:
 158 0062 5F5F      		subi r21,lo8(-(1))
 159 0064 5330      		cpi r21,lo8(3)
 160 0066 01F4      		brne .L2
  59:../freeRTOS750/lib_time/asctime_r.c **** 	}
  60:../freeRTOS750/lib_time/asctime_r.c **** 	buffer[3]=buffer[7]=' ';
 162               	.LM8:
 163 0068 80E2      		ldi r24,lo8(32)
 164 006a 8F83      		std Y+7,r24
 165 006c 8B83      		std Y+3,r24
  61:../freeRTOS750/lib_time/asctime_r.c **** 	buffer += 8;
 167               	.LM9:
 168 006e BE01      		movw r22,r28
 169 0070 685F      		subi r22,-8
 170 0072 7F4F      		sbci r23,-1
  62:../freeRTOS750/lib_time/asctime_r.c **** 
  63:../freeRTOS750/lib_time/asctime_r.c **** 	__print_lz(timeptr->tm_mday,buffer,' ');
 172               	.LM10:
 173 0074 F701      		movw r30,r14
 174 0076 8381      		ldd r24,Z+3
 175 0078 40E2      		ldi r20,lo8(32)
 176 007a 9927      		clr r25
 177 007c 87FD      		sbrc r24,7
 178 007e 9095      		com r25
 179 0080 0E94 0000 		call __print_lz
  64:../freeRTOS750/lib_time/asctime_r.c **** 	buffer += 3;
 181               	.LM11:
 182 0084 BE01      		movw r22,r28
 183 0086 655F      		subi r22,-11
 184 0088 7F4F      		sbci r23,-1
  65:../freeRTOS750/lib_time/asctime_r.c **** 
  66:../freeRTOS750/lib_time/asctime_r.c **** 	__print_lz(timeptr->tm_hour,buffer,':');
 186               	.LM12:
 187 008a F701      		movw r30,r14
 188 008c 8281      		ldd r24,Z+2
 189 008e 4AE3      		ldi r20,lo8(58)
 190 0090 9927      		clr r25
 191 0092 87FD      		sbrc r24,7
 192 0094 9095      		com r25
 193 0096 0E94 0000 		call __print_lz
  67:../freeRTOS750/lib_time/asctime_r.c **** 	buffer += 3;
 195               	.LM13:
 196 009a BE01      		movw r22,r28
 197 009c 625F      		subi r22,-14
 198 009e 7F4F      		sbci r23,-1
  68:../freeRTOS750/lib_time/asctime_r.c **** 
  69:../freeRTOS750/lib_time/asctime_r.c **** 	__print_lz(timeptr->tm_min,buffer,':');
 200               	.LM14:
 201 00a0 F701      		movw r30,r14
 202 00a2 8181      		ldd r24,Z+1
 203 00a4 4AE3      		ldi r20,lo8(58)
 204 00a6 9927      		clr r25
 205 00a8 87FD      		sbrc r24,7
 206 00aa 9095      		com r25
 207 00ac 0E94 0000 		call __print_lz
  70:../freeRTOS750/lib_time/asctime_r.c **** 	buffer += 3;
 209               	.LM15:
 210 00b0 BE01      		movw r22,r28
 211 00b2 6F5E      		subi r22,-17
 212 00b4 7F4F      		sbci r23,-1
  71:../freeRTOS750/lib_time/asctime_r.c **** 
  72:../freeRTOS750/lib_time/asctime_r.c **** 	__print_lz(timeptr->tm_sec,buffer,' ');
 214               	.LM16:
 215 00b6 F701      		movw r30,r14
 216 00b8 8081      		ld r24,Z
 217 00ba 40E2      		ldi r20,lo8(32)
 218 00bc 9927      		clr r25
 219 00be 87FD      		sbrc r24,7
 220 00c0 9095      		com r25
 221 00c2 0E94 0000 		call __print_lz
  73:../freeRTOS750/lib_time/asctime_r.c **** 	buffer += 3;
  74:../freeRTOS750/lib_time/asctime_r.c **** 
  75:../freeRTOS750/lib_time/asctime_r.c **** 	result = div(timeptr->tm_year + 1900 , 100);
 223               	.LM17:
 224 00c6 F701      		movw r30,r14
 225 00c8 8681      		ldd r24,Z+6
 226 00ca 9781      		ldd r25,Z+7
 227 00cc 64E6      		ldi r22,lo8(100)
 228 00ce 70E0      		ldi r23,0
 229 00d0 8459      		subi r24,-108
 230 00d2 984F      		sbci r25,-8
 231 00d4 0E94 0000 		call __divmodhi4
 232 00d8 6B01      		movw r12,r22
 233 00da 7C01      		movw r14,r24
  73:../freeRTOS750/lib_time/asctime_r.c **** 	buffer += 3;
 235               	.LM18:
 236 00dc BE01      		movw r22,r28
 237 00de 6C5E      		subi r22,-20
 238 00e0 7F4F      		sbci r23,-1
  76:../freeRTOS750/lib_time/asctime_r.c **** 
  77:../freeRTOS750/lib_time/asctime_r.c **** 	__print_lz(result.quot,buffer,' ');
 240               	.LM19:
 241 00e2 40E2      		ldi r20,lo8(32)
 242 00e4 C601      		movw r24,r12
 243 00e6 0E94 0000 		call __print_lz
  78:../freeRTOS750/lib_time/asctime_r.c **** 	buffer += 2;
 245               	.LM20:
 246 00ea BE01      		movw r22,r28
 247 00ec 6A5E      		subi r22,-22
 248 00ee 7F4F      		sbci r23,-1
  79:../freeRTOS750/lib_time/asctime_r.c **** 
  80:../freeRTOS750/lib_time/asctime_r.c **** 	__print_lz(result.rem,buffer,0);
 250               	.LM21:
 251 00f0 40E0      		ldi r20,0
 252 00f2 C701      		movw r24,r14
 253               	/* epilogue start */
  81:../freeRTOS750/lib_time/asctime_r.c **** 
  82:../freeRTOS750/lib_time/asctime_r.c **** }
 255               	.LM22:
 256 00f4 DF91      		pop r29
 257 00f6 CF91      		pop r28
 258 00f8 FF90      		pop r15
 259 00fa EF90      		pop r14
 260 00fc DF90      		pop r13
 261 00fe CF90      		pop r12
  80:../freeRTOS750/lib_time/asctime_r.c **** 	__print_lz(result.rem,buffer,0);
 263               	.LM23:
 264 0100 0C94 0000 		jmp __print_lz
 270               	.Lscope1:
 272               		.stabd	78,0,0
 273               	.global	ascdays
 274               		.section	.progmem.data,"a",@progbits
 277               	ascdays:
 278 0000 5375 6E4D 		.string	"SunMonTueWedThuFriSat"
 278      6F6E 5475 
 278      6557 6564 
 278      5468 7546 
 278      7269 5361 
 279               	.global	ascmonths
 282               	ascmonths:
 283 0016 4A61 6E46 		.string	"JanFebMarAprMayJunJulAugSepOctNovDec"
 283      6562 4D61 
 283      7241 7072 
 283      4D61 794A 
 283      756E 4A75 
 286               		.text
 288               	.Letext0:
 289               		.ident	"GCC: (GNU) 4.7.2"
DEFINED SYMBOLS
                            *ABS*:00000000 asctime_r.c
     /tmp/ccQVSXF2.s:2      *ABS*:0000003e __SP_H__
     /tmp/ccQVSXF2.s:3      *ABS*:0000003d __SP_L__
     /tmp/ccQVSXF2.s:4      *ABS*:0000003f __SREG__
     /tmp/ccQVSXF2.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccQVSXF2.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccQVSXF2.s:85     .text:00000000 asctime_r
     /tmp/ccQVSXF2.s:277    .progmem.data:00000000 ascdays
     /tmp/ccQVSXF2.s:282    .progmem.data:00000016 ascmonths

UNDEFINED SYMBOLS
__print_lz
__divmodhi4
