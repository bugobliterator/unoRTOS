   1               		.file	"socket_util.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
 159               	.global	swaps
 161               	swaps:
 162               		.stabd	46,0,0
   1:../freeRTOS750/lib_iinchip/socket_util.c **** /*
   2:../freeRTOS750/lib_iinchip/socket_util.c **** *
   3:../freeRTOS750/lib_iinchip/socket_util.c **** @file		sockutil.c
   4:../freeRTOS750/lib_iinchip/socket_util.c **** @brief	Implementation of useful function of W5100
   5:../freeRTOS750/lib_iinchip/socket_util.c **** *
   6:../freeRTOS750/lib_iinchip/socket_util.c **** */
   7:../freeRTOS750/lib_iinchip/socket_util.c **** 
   8:../freeRTOS750/lib_iinchip/socket_util.c **** 
   9:../freeRTOS750/lib_iinchip/socket_util.c **** 
  10:../freeRTOS750/lib_iinchip/socket_util.c **** #include <stdio.h>
  11:../freeRTOS750/lib_iinchip/socket_util.c **** #include <string.h>
  12:../freeRTOS750/lib_iinchip/socket_util.c **** 
  13:../freeRTOS750/lib_iinchip/socket_util.c **** #include <avr/io.h>
  14:../freeRTOS750/lib_iinchip/socket_util.c **** #include <util/delay.h> // for wait function
  15:../freeRTOS750/lib_iinchip/socket_util.c **** 
  16:../freeRTOS750/lib_iinchip/socket_util.c **** /* Scheduler include files. */
  17:../freeRTOS750/lib_iinchip/socket_util.c **** #include <FreeRTOS.h>
  18:../freeRTOS750/lib_iinchip/socket_util.c **** #include <task.h>
  19:../freeRTOS750/lib_iinchip/socket_util.c **** #include <queue.h>
  20:../freeRTOS750/lib_iinchip/socket_util.c **** #include <semphr.h>
  21:../freeRTOS750/lib_iinchip/socket_util.c **** 
  22:../freeRTOS750/lib_iinchip/socket_util.c **** #include <lib_serial.h>
  23:../freeRTOS750/lib_iinchip/socket_util.c **** 
  24:../freeRTOS750/lib_iinchip/socket_util.c **** #if defined(portW5200)
  25:../freeRTOS750/lib_iinchip/socket_util.c **** #include <w5200.h>
  26:../freeRTOS750/lib_iinchip/socket_util.c **** #else
  27:../freeRTOS750/lib_iinchip/socket_util.c **** #include <w5100.h>
  28:../freeRTOS750/lib_iinchip/socket_util.c **** #endif
  29:../freeRTOS750/lib_iinchip/socket_util.c **** #include <socket.h>
  30:../freeRTOS750/lib_iinchip/socket_util.c **** 
  31:../freeRTOS750/lib_iinchip/socket_util.c **** /////////////////////////////////////////////////////////////////////////
  32:../freeRTOS750/lib_iinchip/socket_util.c **** 
  33:../freeRTOS750/lib_iinchip/socket_util.c **** uint16_t swaps(uint16_t i);
  34:../freeRTOS750/lib_iinchip/socket_util.c **** uint32_t swapl(uint32_t l);
  35:../freeRTOS750/lib_iinchip/socket_util.c **** 
  36:../freeRTOS750/lib_iinchip/socket_util.c **** /////////////////////////////////////////////////////////////////////////
  37:../freeRTOS750/lib_iinchip/socket_util.c **** 
  38:../freeRTOS750/lib_iinchip/socket_util.c **** uint16_t swaps(uint16_t i)
  39:../freeRTOS750/lib_iinchip/socket_util.c **** {
 164               	.LM0:
 165               	.LFBB1:
 166               	/* prologue: function */
 167               	/* frame size = 0 */
 168               	/* stack size = 0 */
 169               	.L__stack_usage = 0
  40:../freeRTOS750/lib_iinchip/socket_util.c **** 	uint16_t ret=0;
  41:../freeRTOS750/lib_iinchip/socket_util.c **** 	ret = (i & 0xFF) << 8;
 171               	.LM1:
 172 0000 382F      		mov r19,r24
 173 0002 20E0      		ldi r18,0
  42:../freeRTOS750/lib_iinchip/socket_util.c **** 	ret |= ((i >> 8)& 0xFF);
 175               	.LM2:
 176 0004 492F      		mov r20,r25
 177 0006 50E0      		ldi r21,0
 178 0008 242B      		or r18,r20
 179 000a 352B      		or r19,r21
  43:../freeRTOS750/lib_iinchip/socket_util.c **** 	return ret;
  44:../freeRTOS750/lib_iinchip/socket_util.c **** }
 181               	.LM3:
 182 000c C901      		movw r24,r18
 183 000e 0895      		ret
 185               	.Lscope1:
 187               		.stabd	78,0,0
 190               	.global	swapl
 192               	swapl:
 193               		.stabd	46,0,0
  45:../freeRTOS750/lib_iinchip/socket_util.c **** 
  46:../freeRTOS750/lib_iinchip/socket_util.c **** uint32_t swapl(uint32_t l)
  47:../freeRTOS750/lib_iinchip/socket_util.c **** {
 195               	.LM4:
 196               	.LFBB2:
 197               	/* prologue: function */
 198               	/* frame size = 0 */
 199               	/* stack size = 0 */
 200               	.L__stack_usage = 0
 201 0010 0E94 0000 		call __bswapsi2
  48:../freeRTOS750/lib_iinchip/socket_util.c **** 	uint32_t ret=0;
  49:../freeRTOS750/lib_iinchip/socket_util.c **** 	ret = (l & 0xFF) << 24;
  50:../freeRTOS750/lib_iinchip/socket_util.c **** 	ret |= ((l >> 8) & 0xFF) << 16;
  51:../freeRTOS750/lib_iinchip/socket_util.c **** 	ret |= ((l >> 16) & 0xFF) << 8;
  52:../freeRTOS750/lib_iinchip/socket_util.c **** 	ret |= ((l >> 24) & 0xFF);
  53:../freeRTOS750/lib_iinchip/socket_util.c **** 	return ret;
  54:../freeRTOS750/lib_iinchip/socket_util.c **** }
 203               	.LM5:
 204 0014 0895      		ret
 206               	.Lscope2:
 208               		.stabd	78,0,0
 211               	.global	D2C
 213               	D2C:
 214               		.stabd	46,0,0
  55:../freeRTOS750/lib_iinchip/socket_util.c **** 
  56:../freeRTOS750/lib_iinchip/socket_util.c **** 
  57:../freeRTOS750/lib_iinchip/socket_util.c **** #ifndef NO_USE_SOCKUTIL_FUNC
  58:../freeRTOS750/lib_iinchip/socket_util.c **** /** This function converts HEX(0-F) to a character */
  59:../freeRTOS750/lib_iinchip/socket_util.c **** uint8_t D2C(
  60:../freeRTOS750/lib_iinchip/socket_util.c **** 	uint8_t c	/**< is a Hex(0x00~0x0F) to convert to a character */
  61:../freeRTOS750/lib_iinchip/socket_util.c **** 	)
  62:../freeRTOS750/lib_iinchip/socket_util.c **** {
 216               	.LM6:
 217               	.LFBB3:
 218               	/* prologue: function */
 219               	/* frame size = 0 */
 220               	/* stack size = 0 */
 221               	.L__stack_usage = 0
  63:../freeRTOS750/lib_iinchip/socket_util.c **** 	uint16_t t = (uint16_t) c;
 223               	.LM7:
 224 0016 282F      		mov r18,r24
 225 0018 30E0      		ldi r19,0
  64:../freeRTOS750/lib_iinchip/socket_util.c **** 	if (t >= 0 && t <= 9)
 227               	.LM8:
 228 001a 2A30      		cpi r18,10
 229 001c 3105      		cpc r19,__zero_reg__
 230 001e 00F4      		brsh .L4
  65:../freeRTOS750/lib_iinchip/socket_util.c **** 		return '0' + c;
 232               	.LM9:
 233 0020 805D      		subi r24,lo8(-(48))
 234 0022 0895      		ret
 235               	.L4:
  66:../freeRTOS750/lib_iinchip/socket_util.c **** 	if (t >= 10 && t <= 15)
 237               	.LM10:
 238 0024 2A50      		subi r18,10
 239 0026 3109      		sbc r19,__zero_reg__
 240 0028 2630      		cpi r18,6
 241 002a 3105      		cpc r19,__zero_reg__
 242 002c 00F4      		brsh .L5
  67:../freeRTOS750/lib_iinchip/socket_util.c **** 		return 'A' + c - 10;
 244               	.LM11:
 245 002e 895C      		subi r24,lo8(-(55))
 246               	.L5:
  68:../freeRTOS750/lib_iinchip/socket_util.c **** 
  69:../freeRTOS750/lib_iinchip/socket_util.c **** 	return c;
  70:../freeRTOS750/lib_iinchip/socket_util.c **** }
 248               	.LM12:
 249 0030 0895      		ret
 254               	.Lscope3:
 256               		.stabd	78,0,0
 259               	.global	C2D
 261               	C2D:
 262               		.stabd	46,0,0
  71:../freeRTOS750/lib_iinchip/socket_util.c **** 
  72:../freeRTOS750/lib_iinchip/socket_util.c **** /** This function converts a character to HEX(0-F) */
  73:../freeRTOS750/lib_iinchip/socket_util.c **** uint8_t C2D(
  74:../freeRTOS750/lib_iinchip/socket_util.c **** 	uint8_t c	/**< is a character('0'-'F') to convert to HEX */
  75:../freeRTOS750/lib_iinchip/socket_util.c **** 	)
  76:../freeRTOS750/lib_iinchip/socket_util.c **** {
 264               	.LM13:
 265               	.LFBB4:
 266               	/* prologue: function */
 267               	/* frame size = 0 */
 268               	/* stack size = 0 */
 269               	.L__stack_usage = 0
  77:../freeRTOS750/lib_iinchip/socket_util.c **** 	if (c >= '0' && c <= '9')
 271               	.LM14:
 272 0032 982F      		mov r25,r24
 273 0034 9053      		subi r25,lo8(-(-48))
 274 0036 9A30      		cpi r25,lo8(10)
 275 0038 00F0      		brlo .L7
  78:../freeRTOS750/lib_iinchip/socket_util.c **** 		return c - '0';
  79:../freeRTOS750/lib_iinchip/socket_util.c **** 	if (c >= 'a' && c <= 'f')
 277               	.LM15:
 278 003a 9153      		subi r25,lo8(-(-49))
 279 003c 9630      		cpi r25,lo8(6)
 280 003e 00F4      		brsh .L8
  80:../freeRTOS750/lib_iinchip/socket_util.c **** 		return 10 + c -'a';
 282               	.LM16:
 283 0040 965F      		subi r25,lo8(-(10))
 284 0042 00C0      		rjmp .L7
 285               	.L8:
 286               	.LBB22:
 287               	.LBB23:
  81:../freeRTOS750/lib_iinchip/socket_util.c **** 	if (c >= 'A' && c <= 'F')
 289               	.LM17:
 290 0044 982F      		mov r25,r24
 291 0046 9154      		subi r25,lo8(-(-65))
 292 0048 9630      		cpi r25,lo8(6)
 293 004a 00F4      		brsh .L9
  82:../freeRTOS750/lib_iinchip/socket_util.c **** 		return 10 + c -'A';
 295               	.LM18:
 296 004c 8753      		subi r24,lo8(-(-55))
 297               	.L9:
 298               	.LBE23:
 299               	.LBE22:
  76:../freeRTOS750/lib_iinchip/socket_util.c **** {
 301               	.LM19:
 302 004e 982F      		mov r25,r24
 303               	.L7:
  83:../freeRTOS750/lib_iinchip/socket_util.c **** 
  84:../freeRTOS750/lib_iinchip/socket_util.c **** 	return (uint8_t)c;
  85:../freeRTOS750/lib_iinchip/socket_util.c **** }
 305               	.LM20:
 306 0050 892F      		mov r24,r25
 307 0052 0895      		ret
 309               	.Lscope4:
 311               		.stabd	78,0,0
 314               	.global	ATOI
 316               	ATOI:
 317               		.stabd	46,0,0
  86:../freeRTOS750/lib_iinchip/socket_util.c **** 
  87:../freeRTOS750/lib_iinchip/socket_util.c **** 
  88:../freeRTOS750/lib_iinchip/socket_util.c **** /** CONVERT STRING INTO INTEGER return a integer number */
  89:../freeRTOS750/lib_iinchip/socket_util.c **** uint16_t ATOI(
  90:../freeRTOS750/lib_iinchip/socket_util.c **** 	uint8_t* str,	/**< is a pointer to convert */
  91:../freeRTOS750/lib_iinchip/socket_util.c **** 	uint16_t base	/**< is a base value (must be in the range 2 - 16) */
  92:../freeRTOS750/lib_iinchip/socket_util.c **** 	)
  93:../freeRTOS750/lib_iinchip/socket_util.c **** {
 319               	.LM21:
 320               	.LFBB5:
 321 0054 EF92      		push r14
 322 0056 FF92      		push r15
 323 0058 0F93      		push r16
 324 005a 1F93      		push r17
 325 005c CF93      		push r28
 326 005e DF93      		push r29
 327               	/* prologue: function */
 328               	/* frame size = 0 */
 329               	/* stack size = 6 */
 330               	.L__stack_usage = 6
 331 0060 8B01      		movw r16,r22
 332 0062 EC01      		movw r28,r24
  94:../freeRTOS750/lib_iinchip/socket_util.c ****         uint16_t num = 0;
 334               	.LM22:
 335 0064 20E0      		ldi r18,0
 336 0066 30E0      		ldi r19,0
  95:../freeRTOS750/lib_iinchip/socket_util.c ****         while (*str !=0)
 338               	.LM23:
 339 0068 00C0      		rjmp .L11
 340               	.L12:
  96:../freeRTOS750/lib_iinchip/socket_util.c ****                 num = num * base + C2D(*str++);
 342               	.LM24:
 343 006a 209F      		mul r18,r16
 344 006c 7001      		movw r14,r0
 345 006e 219F      		mul r18,r17
 346 0070 F00C      		add r15,r0
 347 0072 309F      		mul r19,r16
 348 0074 F00C      		add r15,r0
 349 0076 1124      		clr r1
 350 0078 0E94 0000 		call C2D
 351 007c 9701      		movw r18,r14
 352 007e 280F      		add r18,r24
 353 0080 311D      		adc r19,__zero_reg__
 354               	.L11:
  95:../freeRTOS750/lib_iinchip/socket_util.c ****         while (*str !=0)
 356               	.LM25:
 357 0082 8991      		ld r24,Y+
 358 0084 8111      		cpse r24,__zero_reg__
 359 0086 00C0      		rjmp .L12
  97:../freeRTOS750/lib_iinchip/socket_util.c **** 	return num;
  98:../freeRTOS750/lib_iinchip/socket_util.c **** }
 361               	.LM26:
 362 0088 C901      		movw r24,r18
 363               	/* epilogue start */
 364 008a DF91      		pop r29
 365 008c CF91      		pop r28
 366 008e 1F91      		pop r17
 367 0090 0F91      		pop r16
 368 0092 FF90      		pop r15
 369 0094 EF90      		pop r14
 370 0096 0895      		ret
 375               	.Lscope5:
 377               		.stabd	78,0,0
 382               	.global	ValidATOI
 384               	ValidATOI:
 385               		.stabd	46,0,0
  99:../freeRTOS750/lib_iinchip/socket_util.c **** 
 100:../freeRTOS750/lib_iinchip/socket_util.c **** 
 101:../freeRTOS750/lib_iinchip/socket_util.c **** /**CONVERT STRING INTO HEX OR DECIMAL return	success - 1, fail - 0 */
 102:../freeRTOS750/lib_iinchip/socket_util.c **** uint16_t ValidATOI(
 103:../freeRTOS750/lib_iinchip/socket_util.c **** 	uint8_t* str, 	/**< is a pointer to string to be converted */
 104:../freeRTOS750/lib_iinchip/socket_util.c **** 	uint16_t base, 	/**< is a base value (must be in the range 2 - 16) */
 105:../freeRTOS750/lib_iinchip/socket_util.c **** 	uint16_t* ret	/**<  is a integer pointer to return */
 106:../freeRTOS750/lib_iinchip/socket_util.c **** 	)
 107:../freeRTOS750/lib_iinchip/socket_util.c **** {
 387               	.LM27:
 388               	.LFBB6:
 389 0098 CF92      		push r12
 390 009a DF92      		push r13
 391 009c EF92      		push r14
 392 009e FF92      		push r15
 393 00a0 0F93      		push r16
 394 00a2 1F93      		push r17
 395 00a4 CF93      		push r28
 396 00a6 DF93      		push r29
 397 00a8 00D0      		rcall .
 398 00aa CDB7      		in r28,__SP_L__
 399 00ac DEB7      		in r29,__SP_H__
 400               	/* prologue: function */
 401               	/* frame size = 2 */
 402               	/* stack size = 10 */
 403               	.L__stack_usage = 10
 404 00ae 6C01      		movw r12,r24
 405 00b0 7A01      		movw r14,r20
 108:../freeRTOS750/lib_iinchip/socket_util.c **** 	int c;
 109:../freeRTOS750/lib_iinchip/socket_util.c **** 	uint8_t* tstr = str;
 110:../freeRTOS750/lib_iinchip/socket_util.c **** 	if(str == 0 || *str == '\0') return 0;
 407               	.LM28:
 408 00b2 0097      		sbiw r24,0
 409 00b4 01F0      		breq .L19
 411               	.LM29:
 412 00b6 FC01      		movw r30,r24
 413 00b8 8081      		ld r24,Z
 414 00ba 8823      		tst r24
 415 00bc 01F0      		breq .L19
 416 00be 8601      		movw r16,r12
 417 00c0 00C0      		rjmp .L15
 418               	.L17:
 419               	.LBB26:
 420               	.LBB27:
 111:../freeRTOS750/lib_iinchip/socket_util.c **** 	while(*tstr != '\0')
 112:../freeRTOS750/lib_iinchip/socket_util.c **** 	{
 113:../freeRTOS750/lib_iinchip/socket_util.c **** 		c = C2D(*tstr);
 422               	.LM30:
 423 00c2 6983      		std Y+1,r22
 424 00c4 7A83      		std Y+2,r23
 425 00c6 0E94 0000 		call C2D
 114:../freeRTOS750/lib_iinchip/socket_util.c **** 		if( c >= 0 && c < base) tstr++;
 427               	.LM31:
 428 00ca 90E0      		ldi r25,0
 429 00cc 6981      		ldd r22,Y+1
 430 00ce 7A81      		ldd r23,Y+2
 431 00d0 8617      		cp r24,r22
 432 00d2 9707      		cpc r25,r23
 433 00d4 00F4      		brsh .L19
 434               	.L15:
 111:../freeRTOS750/lib_iinchip/socket_util.c **** 	while(*tstr != '\0')
 436               	.LM32:
 437 00d6 F801      		movw r30,r16
 438 00d8 8191      		ld r24,Z+
 439 00da 8F01      		movw r16,r30
 440 00dc 8111      		cpse r24,__zero_reg__
 441 00de 00C0      		rjmp .L17
 115:../freeRTOS750/lib_iinchip/socket_util.c **** 		else    return 0;
 116:../freeRTOS750/lib_iinchip/socket_util.c **** 	}
 117:../freeRTOS750/lib_iinchip/socket_util.c **** 
 118:../freeRTOS750/lib_iinchip/socket_util.c **** 	*ret = ATOI(str,base);
 443               	.LM33:
 444 00e0 C601      		movw r24,r12
 445 00e2 0E94 0000 		call ATOI
 446 00e6 F701      		movw r30,r14
 447 00e8 9183      		std Z+1,r25
 448 00ea 8083      		st Z,r24
 119:../freeRTOS750/lib_iinchip/socket_util.c **** 	return 1;
 450               	.LM34:
 451 00ec 21E0      		ldi r18,lo8(1)
 452 00ee 30E0      		ldi r19,0
 453 00f0 00C0      		rjmp .L14
 454               	.L19:
 455               	.LBE27:
 456               	.LBE26:
 110:../freeRTOS750/lib_iinchip/socket_util.c **** 	if(str == 0 || *str == '\0') return 0;
 458               	.LM35:
 459 00f2 20E0      		ldi r18,0
 460 00f4 30E0      		ldi r19,0
 461               	.L14:
 120:../freeRTOS750/lib_iinchip/socket_util.c **** }
 463               	.LM36:
 464 00f6 C901      		movw r24,r18
 465               	/* epilogue start */
 466 00f8 0F90      		pop __tmp_reg__
 467 00fa 0F90      		pop __tmp_reg__
 468 00fc DF91      		pop r29
 469 00fe CF91      		pop r28
 470 0100 1F91      		pop r17
 471 0102 0F91      		pop r16
 472 0104 FF90      		pop r15
 473 0106 EF90      		pop r14
 474 0108 DF90      		pop r13
 475 010a CF90      		pop r12
 476 010c 0895      		ret
 478               	.Lscope6:
 480               		.stabd	78,0,0
 484               	.global	replacetochar
 486               	replacetochar:
 487               		.stabd	46,0,0
 121:../freeRTOS750/lib_iinchip/socket_util.c **** 
 122:../freeRTOS750/lib_iinchip/socket_util.c **** 
 123:../freeRTOS750/lib_iinchip/socket_util.c **** 
 124:../freeRTOS750/lib_iinchip/socket_util.c **** /** replace the specified character in a string with new character */
 125:../freeRTOS750/lib_iinchip/socket_util.c **** void replacetochar(
 126:../freeRTOS750/lib_iinchip/socket_util.c **** 	uint8_t * str, 		/**< pointer to be replaced */
 127:../freeRTOS750/lib_iinchip/socket_util.c **** 	uint8_t oldchar, 	/**< old character */
 128:../freeRTOS750/lib_iinchip/socket_util.c **** 	uint8_t newchar	/**< new character */
 129:../freeRTOS750/lib_iinchip/socket_util.c **** 	)
 130:../freeRTOS750/lib_iinchip/socket_util.c **** {
 489               	.LM37:
 490               	.LFBB7:
 491               	/* prologue: function */
 492               	/* frame size = 0 */
 493               	/* stack size = 0 */
 494               	.L__stack_usage = 0
 495 010e FC01      		movw r30,r24
 496               	.LBB28:
 131:../freeRTOS750/lib_iinchip/socket_util.c **** 	for (uint16_t x = 0; str[x]; ++x)
 498               	.LM38:
 499 0110 00C0      		rjmp .L22
 500               	.L24:
 132:../freeRTOS750/lib_iinchip/socket_util.c **** 		if (str[x] == oldchar) str[x] = newchar;
 502               	.LM39:
 503 0112 8613      		cpse r24,r22
 504 0114 00C0      		rjmp .L23
 506               	.LM40:
 507 0116 4083      		st Z,r20
 508               	.L23:
 509 0118 3196      		adiw r30,1
 510               	.L22:
 131:../freeRTOS750/lib_iinchip/socket_util.c **** 	for (uint16_t x = 0; str[x]; ++x)
 512               	.LM41:
 513 011a 8081      		ld r24,Z
 514 011c 8111      		cpse r24,__zero_reg__
 515 011e 00C0      		rjmp .L24
 516               	/* epilogue start */
 517               	.LBE28:
 133:../freeRTOS750/lib_iinchip/socket_util.c **** }
 519               	.LM42:
 520 0120 0895      		ret
 522               	.Lscope7:
 524               		.stabd	78,0,0
 527               	.global	inet_ntoa
 529               	inet_ntoa:
 530               		.stabd	46,0,0
 134:../freeRTOS750/lib_iinchip/socket_util.c **** #endif
 135:../freeRTOS750/lib_iinchip/socket_util.c **** 
 136:../freeRTOS750/lib_iinchip/socket_util.c **** /////////////////////////////////////////////////////////////////////
 137:../freeRTOS750/lib_iinchip/socket_util.c **** 
 138:../freeRTOS750/lib_iinchip/socket_util.c **** /**
 139:../freeRTOS750/lib_iinchip/socket_util.c **** @brief	Convert 32bit Address(Host Ordering) into Dotted Decimal Format
 140:../freeRTOS750/lib_iinchip/socket_util.c **** @return 	a uint8_t pointer to a static buffer containing the text address in standard ".'' notation
 141:../freeRTOS750/lib_iinchip/socket_util.c **** */
 142:../freeRTOS750/lib_iinchip/socket_util.c **** uint8_t * inet_ntoa(
 143:../freeRTOS750/lib_iinchip/socket_util.c **** 	uint32_t addr	/**< Pointer variable to store converted value(INPUT) */
 144:../freeRTOS750/lib_iinchip/socket_util.c **** 	)
 145:../freeRTOS750/lib_iinchip/socket_util.c **** {
 532               	.LM43:
 533               	.LFBB8:
 534 0122 0F93      		push r16
 535 0124 1F93      		push r17
 536               	/* prologue: function */
 537               	/* frame size = 0 */
 538               	/* stack size = 2 */
 539               	.L__stack_usage = 2
 146:../freeRTOS750/lib_iinchip/socket_util.c **** 	static uint8_t addr_str[16];
 147:../freeRTOS750/lib_iinchip/socket_util.c **** 	memset(addr_str,0,16);
 541               	.LM44:
 542 0126 E0E0      		ldi r30,lo8(addr_str.2830)
 543 0128 F0E0      		ldi r31,hi8(addr_str.2830)
 544 012a 20E1      		ldi r18,lo8(16)
 545 012c DF01      		movw r26,r30
 546               		0:
 547 012e 1D92      		st X+,__zero_reg__
 548 0130 2A95      		dec r18
 549 0132 01F4      		brne 0b
 148:../freeRTOS750/lib_iinchip/socket_util.c **** 	sprintf_P((char *)addr_str,PSTR("%d.%d.%d.%d"),(int)(addr>>24 & 0xFF),(int)(addr>>16 & 0xFF),(int)
 551               	.LM45:
 552 0134 8B01      		movw r16,r22
 553 0136 9C01      		movw r18,r24
 554 0138 1127      		clr r17
 555 013a 2227      		clr r18
 556 013c 3327      		clr r19
 557 013e 1F93      		push r17
 558 0140 0F93      		push r16
 559 0142 10E0      		ldi r17,0
 560 0144 1F93      		push r17
 561 0146 7F93      		push r23
 562 0148 10E0      		ldi r17,0
 563 014a 1F93      		push r17
 564 014c 8F93      		push r24
 565 014e 892F      		mov r24,r25
 566 0150 9927      		clr r25
 567 0152 AA27      		clr r26
 568 0154 BB27      		clr r27
 569 0156 9F93      		push r25
 570 0158 8F93      		push r24
 571 015a 80E0      		ldi r24,lo8(__c.2831)
 572 015c 90E0      		ldi r25,hi8(__c.2831)
 573 015e 9F93      		push r25
 574 0160 8F93      		push r24
 575 0162 FF93      		push r31
 576 0164 EF93      		push r30
 577 0166 0E94 0000 		call sprintf_P
 149:../freeRTOS750/lib_iinchip/socket_util.c **** 	return (uint8_t *)addr_str;
 579               	.LM46:
 580 016a 8DB7      		in r24,__SP_L__
 581 016c 9EB7      		in r25,__SP_H__
 582 016e 0C96      		adiw r24,12
 583 0170 0FB6      		in __tmp_reg__,__SREG__
 584 0172 F894      		cli
 585 0174 9EBF      		out __SP_H__,r25
 586 0176 0FBE      		out __SREG__,__tmp_reg__
 587 0178 8DBF      		out __SP_L__,r24
 150:../freeRTOS750/lib_iinchip/socket_util.c **** }
 589               	.LM47:
 590 017a 80E0      		ldi r24,lo8(addr_str.2830)
 591 017c 90E0      		ldi r25,hi8(addr_str.2830)
 592               	/* epilogue start */
 593 017e 1F91      		pop r17
 594 0180 0F91      		pop r16
 595 0182 0895      		ret
 600               	.Lscope8:
 602               		.stabd	78,0,0
 605               	.global	inet_ntoa_pad
 607               	inet_ntoa_pad:
 608               		.stabd	46,0,0
 151:../freeRTOS750/lib_iinchip/socket_util.c **** 
 152:../freeRTOS750/lib_iinchip/socket_util.c **** #ifndef NO_USE_SOCKUTIL_FUNC
 153:../freeRTOS750/lib_iinchip/socket_util.c **** uint8_t* inet_ntoa_pad(uint32_t addr)
 154:../freeRTOS750/lib_iinchip/socket_util.c **** {
 610               	.LM48:
 611               	.LFBB9:
 612 0184 0F93      		push r16
 613 0186 1F93      		push r17
 614               	/* prologue: function */
 615               	/* frame size = 0 */
 616               	/* stack size = 2 */
 617               	.L__stack_usage = 2
 155:../freeRTOS750/lib_iinchip/socket_util.c **** 	static uint8_t addr_str[16];
 156:../freeRTOS750/lib_iinchip/socket_util.c **** 	memset(addr_str,0,16);
 619               	.LM49:
 620 0188 E0E0      		ldi r30,lo8(addr_str.2836)
 621 018a F0E0      		ldi r31,hi8(addr_str.2836)
 622 018c 20E1      		ldi r18,lo8(16)
 623 018e DF01      		movw r26,r30
 624               		0:
 625 0190 1D92      		st X+,__zero_reg__
 626 0192 2A95      		dec r18
 627 0194 01F4      		brne 0b
 157:../freeRTOS750/lib_iinchip/socket_util.c **** 	sprintf_P((char *)addr_str,PSTR("%03d.%03d.%03d.%03d"),(int)(addr>>24 & 0xFF),(int)(addr>>16 & 0xF
 629               	.LM50:
 630 0196 8B01      		movw r16,r22
 631 0198 9C01      		movw r18,r24
 632 019a 1127      		clr r17
 633 019c 2227      		clr r18
 634 019e 3327      		clr r19
 635 01a0 1F93      		push r17
 636 01a2 0F93      		push r16
 637 01a4 10E0      		ldi r17,0
 638 01a6 1F93      		push r17
 639 01a8 7F93      		push r23
 640 01aa 10E0      		ldi r17,0
 641 01ac 1F93      		push r17
 642 01ae 8F93      		push r24
 643 01b0 892F      		mov r24,r25
 644 01b2 9927      		clr r25
 645 01b4 AA27      		clr r26
 646 01b6 BB27      		clr r27
 647 01b8 9F93      		push r25
 648 01ba 8F93      		push r24
 649 01bc 80E0      		ldi r24,lo8(__c.2837)
 650 01be 90E0      		ldi r25,hi8(__c.2837)
 651 01c0 9F93      		push r25
 652 01c2 8F93      		push r24
 653 01c4 FF93      		push r31
 654 01c6 EF93      		push r30
 655 01c8 0E94 0000 		call sprintf_P
 158:../freeRTOS750/lib_iinchip/socket_util.c **** 	return addr_str;
 657               	.LM51:
 658 01cc 8DB7      		in r24,__SP_L__
 659 01ce 9EB7      		in r25,__SP_H__
 660 01d0 0C96      		adiw r24,12
 661 01d2 0FB6      		in __tmp_reg__,__SREG__
 662 01d4 F894      		cli
 663 01d6 9EBF      		out __SP_H__,r25
 664 01d8 0FBE      		out __SREG__,__tmp_reg__
 665 01da 8DBF      		out __SP_L__,r24
 159:../freeRTOS750/lib_iinchip/socket_util.c **** }
 667               	.LM52:
 668 01dc 80E0      		ldi r24,lo8(addr_str.2836)
 669 01de 90E0      		ldi r25,hi8(addr_str.2836)
 670               	/* epilogue start */
 671 01e0 1F91      		pop r17
 672 01e2 0F91      		pop r16
 673 01e4 0895      		ret
 678               	.Lscope9:
 680               		.stabd	78,0,0
 681               		.section	.rodata.str1.1,"aMS",@progbits,1
 682               	.LC0:
 683 0000 2E00      		.string	"."
 684               		.text
 687               	.global	inet_addr
 689               	inet_addr:
 690               		.stabd	46,0,0
 160:../freeRTOS750/lib_iinchip/socket_util.c **** 
 161:../freeRTOS750/lib_iinchip/socket_util.c **** /**
 162:../freeRTOS750/lib_iinchip/socket_util.c **** @brief	Converts a string containing an (Ipv4) Internet Protocol decimal dotted address into a 32bit
 163:../freeRTOS750/lib_iinchip/socket_util.c **** @return 	32bit address (Host Ordering)
 164:../freeRTOS750/lib_iinchip/socket_util.c **** */
 165:../freeRTOS750/lib_iinchip/socket_util.c **** uint32_t inet_addr(
 166:../freeRTOS750/lib_iinchip/socket_util.c **** 	uint8_t* addr	/**< dotted notation address string.  */
 167:../freeRTOS750/lib_iinchip/socket_util.c **** 	)
 168:../freeRTOS750/lib_iinchip/socket_util.c **** {
 692               	.LM53:
 693               	.LFBB10:
 694 01e6 CF92      		push r12
 695 01e8 DF92      		push r13
 696 01ea EF92      		push r14
 697 01ec FF92      		push r15
 698 01ee 1F93      		push r17
 699 01f0 CF93      		push r28
 700 01f2 DF93      		push r29
 701 01f4 CDB7      		in r28,__SP_L__
 702 01f6 DEB7      		in r29,__SP_H__
 703 01f8 6E97      		sbiw r28,30
 704 01fa 0FB6      		in __tmp_reg__,__SREG__
 705 01fc F894      		cli
 706 01fe DEBF      		out __SP_H__,r29
 707 0200 0FBE      		out __SREG__,__tmp_reg__
 708 0202 CDBF      		out __SP_L__,r28
 709               	/* prologue: function */
 710               	/* frame size = 30 */
 711               	/* stack size = 37 */
 712               	.L__stack_usage = 37
 169:../freeRTOS750/lib_iinchip/socket_util.c **** 	uint32_t inetaddr = 0;
 170:../freeRTOS750/lib_iinchip/socket_util.c **** 	uint8_t taddr[30];
 171:../freeRTOS750/lib_iinchip/socket_util.c **** 	uint8_t *nexttok;
 172:../freeRTOS750/lib_iinchip/socket_util.c **** 	int num;
 173:../freeRTOS750/lib_iinchip/socket_util.c **** 	strcpy((char *)taddr,(char *)addr);
 714               	.LM54:
 715 0204 BC01      		movw r22,r24
 716 0206 CE01      		movw r24,r28
 717 0208 0196      		adiw r24,1
 718 020a 0E94 0000 		call strcpy
 719 020e 14E0      		ldi r17,lo8(4)
 174:../freeRTOS750/lib_iinchip/socket_util.c **** 
 175:../freeRTOS750/lib_iinchip/socket_util.c **** 	nexttok = taddr;
 721               	.LM55:
 722 0210 CE01      		movw r24,r28
 723 0212 0196      		adiw r24,1
 169:../freeRTOS750/lib_iinchip/socket_util.c **** 	uint32_t inetaddr = 0;
 725               	.LM56:
 726 0214 C12C      		mov r12,__zero_reg__
 727 0216 D12C      		mov r13,__zero_reg__
 728 0218 7601      		movw r14,r12
 729               	.L30:
 730               	.LBB29:
 176:../freeRTOS750/lib_iinchip/socket_util.c **** 	for(uint8_t i = 0; i < 4 ; ++i)
 177:../freeRTOS750/lib_iinchip/socket_util.c **** 	{
 178:../freeRTOS750/lib_iinchip/socket_util.c **** 		nexttok = (uint8_t *)strtok((char *)nexttok,(const char *)".");
 732               	.LM57:
 733 021a 60E0      		ldi r22,lo8(.LC0)
 734 021c 70E0      		ldi r23,hi8(.LC0)
 735 021e 0E94 0000 		call strtok
 179:../freeRTOS750/lib_iinchip/socket_util.c **** 		if(nexttok[0] == '0' && nexttok[1] == 'x') num = ATOI(nexttok+2,0x10);
 737               	.LM58:
 738 0222 FC01      		movw r30,r24
 739 0224 2081      		ld r18,Z
 740 0226 2033      		cpi r18,lo8(48)
 741 0228 01F4      		brne .L28
 743               	.LM59:
 744 022a 2181      		ldd r18,Z+1
 745 022c 2837      		cpi r18,lo8(120)
 746 022e 01F4      		brne .L28
 747 0230 60E1      		ldi r22,lo8(16)
 748 0232 70E0      		ldi r23,0
 749 0234 0296      		adiw r24,2
 750 0236 00C0      		rjmp .L32
 751               	.L28:
 180:../freeRTOS750/lib_iinchip/socket_util.c **** 		else num = ATOI(nexttok,10);
 753               	.LM60:
 754 0238 6AE0      		ldi r22,lo8(10)
 755 023a 70E0      		ldi r23,0
 756               	.L32:
 757 023c 0E94 0000 		call ATOI
 181:../freeRTOS750/lib_iinchip/socket_util.c **** 		inetaddr = inetaddr << 8;
 759               	.LM61:
 760 0240 7E2D      		mov r23,r14
 761 0242 6D2D      		mov r22,r13
 762 0244 5C2D      		mov r21,r12
 763 0246 4427      		clr r20
 182:../freeRTOS750/lib_iinchip/socket_util.c **** 		inetaddr |= (num & 0xFF);
 765               	.LM62:
 766 0248 6C01      		movw r12,r24
 767 024a DD24      		clr r13
 768 024c EE24      		clr r14
 769 024e D7FC      		sbrc r13,7
 770 0250 E094      		com r14
 771 0252 FE2C      		mov r15,r14
 772 0254 C42A      		or r12,r20
 773 0256 D52A      		or r13,r21
 774 0258 E62A      		or r14,r22
 775 025a F72A      		or r15,r23
 776 025c 1150      		subi r17,lo8(-(-1))
 183:../freeRTOS750/lib_iinchip/socket_util.c **** 		nexttok = NULL;
 778               	.LM63:
 779 025e 80E0      		ldi r24,0
 780 0260 90E0      		ldi r25,0
 176:../freeRTOS750/lib_iinchip/socket_util.c **** 	for(uint8_t i = 0; i < 4 ; ++i)
 782               	.LM64:
 783 0262 01F4      		brne .L30
 784               	.LBE29:
 184:../freeRTOS750/lib_iinchip/socket_util.c **** 	}
 185:../freeRTOS750/lib_iinchip/socket_util.c **** 	return inetaddr;
 186:../freeRTOS750/lib_iinchip/socket_util.c **** }
 786               	.LM65:
 787 0264 B601      		movw r22,r12
 788 0266 C701      		movw r24,r14
 789               	/* epilogue start */
 790 0268 6E96      		adiw r28,30
 791 026a 0FB6      		in __tmp_reg__,__SREG__
 792 026c F894      		cli
 793 026e DEBF      		out __SP_H__,r29
 794 0270 0FBE      		out __SREG__,__tmp_reg__
 795 0272 CDBF      		out __SP_L__,r28
 796 0274 DF91      		pop r29
 797 0276 CF91      		pop r28
 798 0278 1F91      		pop r17
 799 027a FF90      		pop r15
 800 027c EF90      		pop r14
 801 027e DF90      		pop r13
 802 0280 CF90      		pop r12
 803 0282 0895      		ret
 809               	.Lscope10:
 811               		.stabd	78,0,0
 814               	.global	VerifyIPAddress
 816               	VerifyIPAddress:
 817               		.stabd	46,0,0
 187:../freeRTOS750/lib_iinchip/socket_util.c **** 
 188:../freeRTOS750/lib_iinchip/socket_util.c **** 
 189:../freeRTOS750/lib_iinchip/socket_util.c **** /**
 190:../freeRTOS750/lib_iinchip/socket_util.c **** @brief	Verify dotted notation IP address string
 191:../freeRTOS750/lib_iinchip/socket_util.c **** @return 	success - 1, fail - 0
 192:../freeRTOS750/lib_iinchip/socket_util.c **** */
 193:../freeRTOS750/lib_iinchip/socket_util.c **** uint8_t VerifyIPAddress(
 194:../freeRTOS750/lib_iinchip/socket_util.c **** 	uint8_t* src	/**< pointer to IP address string */
 195:../freeRTOS750/lib_iinchip/socket_util.c **** 	)
 196:../freeRTOS750/lib_iinchip/socket_util.c **** {
 819               	.LM66:
 820               	.LFBB11:
 821 0284 1F93      		push r17
 822 0286 CF93      		push r28
 823 0288 DF93      		push r29
 824 028a CDB7      		in r28,__SP_L__
 825 028c DEB7      		in r29,__SP_H__
 826 028e E497      		sbiw r28,52
 827 0290 0FB6      		in __tmp_reg__,__SREG__
 828 0292 F894      		cli
 829 0294 DEBF      		out __SP_H__,r29
 830 0296 0FBE      		out __SREG__,__tmp_reg__
 831 0298 CDBF      		out __SP_L__,r28
 832               	/* prologue: function */
 833               	/* frame size = 52 */
 834               	/* stack size = 55 */
 835               	.L__stack_usage = 55
 197:../freeRTOS750/lib_iinchip/socket_util.c **** 	uint16_t tnum;
 198:../freeRTOS750/lib_iinchip/socket_util.c **** 	uint8_t tsrc[50];
 199:../freeRTOS750/lib_iinchip/socket_util.c **** 	uint8_t* tok = tsrc;
 200:../freeRTOS750/lib_iinchip/socket_util.c **** 
 201:../freeRTOS750/lib_iinchip/socket_util.c **** 	strcpy((char *)tsrc,(char *)src);
 837               	.LM67:
 838 029a BC01      		movw r22,r24
 839 029c CE01      		movw r24,r28
 840 029e 0196      		adiw r24,1
 841 02a0 0E94 0000 		call strcpy
 842 02a4 14E0      		ldi r17,lo8(4)
 199:../freeRTOS750/lib_iinchip/socket_util.c **** 	uint8_t* tok = tsrc;
 844               	.LM68:
 845 02a6 CE01      		movw r24,r28
 846 02a8 0196      		adiw r24,1
 847               	.L40:
 848               	.LBB30:
 202:../freeRTOS750/lib_iinchip/socket_util.c **** 
 203:../freeRTOS750/lib_iinchip/socket_util.c **** 	for(uint8_t i = 0; i < 4; ++i)
 204:../freeRTOS750/lib_iinchip/socket_util.c **** 	{
 205:../freeRTOS750/lib_iinchip/socket_util.c **** 		tok = (uint8_t *)strtok((char *)tok,(const char *)".");
 850               	.LM69:
 851 02aa 60E0      		ldi r22,lo8(.LC0)
 852 02ac 70E0      		ldi r23,hi8(.LC0)
 853 02ae 0E94 0000 		call strtok
 206:../freeRTOS750/lib_iinchip/socket_util.c **** 		if ( !tok ) return 0;
 855               	.LM70:
 856 02b2 0097      		sbiw r24,0
 857 02b4 01F4      		brne .L34
 858               	.L37:
 859               	.LBE30:
 860 02b6 80E0      		ldi r24,0
 861 02b8 00C0      		rjmp .L35
 862               	.L34:
 863               	.LBB31:
 207:../freeRTOS750/lib_iinchip/socket_util.c **** 		if(tok[0] == '0' && tok[1] == 'x')
 865               	.LM71:
 866 02ba FC01      		movw r30,r24
 867 02bc 2081      		ld r18,Z
 208:../freeRTOS750/lib_iinchip/socket_util.c **** 		{
 209:../freeRTOS750/lib_iinchip/socket_util.c **** 			if(!ValidATOI(tok+2,0x10,&tnum)) return 0;
 869               	.LM72:
 870 02be AE01      		movw r20,r28
 871 02c0 4D5C      		subi r20,-51
 872 02c2 5F4F      		sbci r21,-1
 207:../freeRTOS750/lib_iinchip/socket_util.c **** 		if(tok[0] == '0' && tok[1] == 'x')
 874               	.LM73:
 875 02c4 2033      		cpi r18,lo8(48)
 876 02c6 01F4      		brne .L36
 207:../freeRTOS750/lib_iinchip/socket_util.c **** 		if(tok[0] == '0' && tok[1] == 'x')
 878               	.LM74:
 879 02c8 2181      		ldd r18,Z+1
 880 02ca 2837      		cpi r18,lo8(120)
 881 02cc 01F4      		brne .L36
 883               	.LM75:
 884 02ce 60E1      		ldi r22,lo8(16)
 885 02d0 70E0      		ldi r23,0
 886 02d2 0296      		adiw r24,2
 887 02d4 00C0      		rjmp .L49
 888               	.L39:
 210:../freeRTOS750/lib_iinchip/socket_util.c **** 		}
 211:../freeRTOS750/lib_iinchip/socket_util.c **** 		else if(!ValidATOI(tok,10,&tnum)) return 0;
 212:../freeRTOS750/lib_iinchip/socket_util.c **** 
 213:../freeRTOS750/lib_iinchip/socket_util.c **** 		if(tnum < 0 || tnum > 255) return 0;
 890               	.LM76:
 891 02d6 8BA9      		ldd r24,Y+51
 892 02d8 9CA9      		ldd r25,Y+52
 893 02da 8F3F      		cpi r24,-1
 894 02dc 9105      		cpc r25,__zero_reg__
 895 02de 01F0      		breq .L48
 896 02e0 00F0      		brlo .L48
 897 02e2 00C0      		rjmp .L37
 898               	.L36:
 211:../freeRTOS750/lib_iinchip/socket_util.c **** 		else if(!ValidATOI(tok,10,&tnum)) return 0;
 900               	.LM77:
 901 02e4 6AE0      		ldi r22,lo8(10)
 902 02e6 70E0      		ldi r23,0
 903               	.L49:
 904 02e8 0E94 0000 		call ValidATOI
 905 02ec 892B      		or r24,r25
 906 02ee 01F4      		brne .L39
 907 02f0 00C0      		rjmp .L37
 908               	.L48:
 909 02f2 1150      		subi r17,lo8(-(-1))
 214:../freeRTOS750/lib_iinchip/socket_util.c **** 		tok = NULL;
 911               	.LM78:
 912 02f4 80E0      		ldi r24,0
 913 02f6 90E0      		ldi r25,0
 203:../freeRTOS750/lib_iinchip/socket_util.c **** 	for(uint8_t i = 0; i < 4; ++i)
 915               	.LM79:
 916 02f8 01F4      		brne .L40
 215:../freeRTOS750/lib_iinchip/socket_util.c **** 	}
 216:../freeRTOS750/lib_iinchip/socket_util.c **** 	return 1;
 918               	.LM80:
 919 02fa 81E0      		ldi r24,lo8(1)
 920               	.L35:
 921               	/* epilogue start */
 922               	.LBE31:
 217:../freeRTOS750/lib_iinchip/socket_util.c **** }
 924               	.LM81:
 925 02fc E496      		adiw r28,52
 926 02fe 0FB6      		in __tmp_reg__,__SREG__
 927 0300 F894      		cli
 928 0302 DEBF      		out __SP_H__,r29
 929 0304 0FBE      		out __SREG__,__tmp_reg__
 930 0306 CDBF      		out __SP_L__,r28
 931 0308 DF91      		pop r29
 932 030a CF91      		pop r28
 933 030c 1F91      		pop r17
 934 030e 0895      		ret
 940               	.Lscope11:
 942               		.stabd	78,0,0
 945               	.global	GetDestAddr
 947               	GetDestAddr:
 948               		.stabd	46,0,0
 218:../freeRTOS750/lib_iinchip/socket_util.c **** 
 219:../freeRTOS750/lib_iinchip/socket_util.c **** 
 220:../freeRTOS750/lib_iinchip/socket_util.c **** /**
 221:../freeRTOS750/lib_iinchip/socket_util.c **** @brief	Output destination IP address of appropriate channel
 222:../freeRTOS750/lib_iinchip/socket_util.c **** @return 	32bit destination address (Host Ordering)
 223:../freeRTOS750/lib_iinchip/socket_util.c **** */
 224:../freeRTOS750/lib_iinchip/socket_util.c **** uint32_t GetDestAddr(
 225:../freeRTOS750/lib_iinchip/socket_util.c **** 	SOCKET s	/**< Channel number which try to get destination IP Address */
 226:../freeRTOS750/lib_iinchip/socket_util.c **** 	)
 227:../freeRTOS750/lib_iinchip/socket_util.c **** {
 950               	.LM82:
 951               	.LFBB12:
 952 0310 AF92      		push r10
 953 0312 BF92      		push r11
 954 0314 CF92      		push r12
 955 0316 DF92      		push r13
 956 0318 EF92      		push r14
 957 031a FF92      		push r15
 958 031c 0F93      		push r16
 959 031e 1F93      		push r17
 960 0320 CF93      		push r28
 961 0322 DF93      		push r29
 962               	/* prologue: function */
 963               	/* frame size = 0 */
 964               	/* stack size = 10 */
 965               	.L__stack_usage = 10
 966               	.LBB32:
 228:../freeRTOS750/lib_iinchip/socket_util.c **** 	uint32_t addr=0;
 229:../freeRTOS750/lib_iinchip/socket_util.c **** 
 230:../freeRTOS750/lib_iinchip/socket_util.c **** 	for(uint8_t i=0; i < 4; ++i)
 231:../freeRTOS750/lib_iinchip/socket_util.c **** 	{
 232:../freeRTOS750/lib_iinchip/socket_util.c **** 		addr <<=8;
 233:../freeRTOS750/lib_iinchip/socket_util.c **** 		addr += IINCHIP_read(Sn_DIPR0(s)+i);
 968               	.LM83:
 969 0324 C82F      		mov r28,r24
 970 0326 D0E0      		ldi r29,0
 971 0328 2496      		adiw r28,4
 972 032a DC2F      		mov r29,r28
 973 032c CC27      		clr r28
 974 032e 5E01      		movw r10,r28
 975 0330 8CE0      		ldi r24,12
 976 0332 A80E      		add r10,r24
 977 0334 B11C      		adc r11,__zero_reg__
 224:../freeRTOS750/lib_iinchip/socket_util.c **** uint32_t GetDestAddr(
 979               	.LM84:
 980 0336 6096      		adiw r28,16
 981               	.LBE32:
 228:../freeRTOS750/lib_iinchip/socket_util.c **** 	uint32_t addr=0;
 983               	.LM85:
 984 0338 00E0      		ldi r16,0
 985 033a 10E0      		ldi r17,0
 986 033c 9801      		movw r18,r16
 987               	.L51:
 988               	.LBB33:
 232:../freeRTOS750/lib_iinchip/socket_util.c **** 		addr <<=8;
 990               	.LM86:
 991 033e CC24      		clr r12
 992 0340 D02E      		mov r13,r16
 993 0342 E12E      		mov r14,r17
 994 0344 F22E      		mov r15,r18
 996               	.LM87:
 997 0346 C501      		movw r24,r10
 998 0348 0E94 0000 		call IINCHIP_read
 999 034c 9701      		movw r18,r14
 1000 034e 8601      		movw r16,r12
 1001 0350 080F      		add r16,r24
 1002 0352 111D      		adc r17,__zero_reg__
 1003 0354 211D      		adc r18,__zero_reg__
 1004 0356 311D      		adc r19,__zero_reg__
 1005 0358 8FEF      		ldi r24,-1
 1006 035a A81A      		sub r10,r24
 1007 035c B80A      		sbc r11,r24
 230:../freeRTOS750/lib_iinchip/socket_util.c **** 	for(uint8_t i=0; i < 4; ++i)
 1009               	.LM88:
 1010 035e AC16      		cp r10,r28
 1011 0360 BD06      		cpc r11,r29
 1012 0362 01F4      		brne .L51
 1013               	.LBE33:
 234:../freeRTOS750/lib_iinchip/socket_util.c **** 	}
 235:../freeRTOS750/lib_iinchip/socket_util.c **** 	return addr;
 236:../freeRTOS750/lib_iinchip/socket_util.c **** }
 1015               	.LM89:
 1016 0364 B801      		movw r22,r16
 1017 0366 C901      		movw r24,r18
 1018               	/* epilogue start */
 1019 0368 DF91      		pop r29
 1020 036a CF91      		pop r28
 1021 036c 1F91      		pop r17
 1022 036e 0F91      		pop r16
 1023 0370 FF90      		pop r15
 1024 0372 EF90      		pop r14
 1025 0374 DF90      		pop r13
 1026 0376 CF90      		pop r12
 1027 0378 BF90      		pop r11
 1028 037a AF90      		pop r10
 1029 037c 0895      		ret
 1031               	.Lscope12:
 1033               		.stabd	78,0,0
 1036               	.global	GetDestPort
 1038               	GetDestPort:
 1039               		.stabd	46,0,0
 237:../freeRTOS750/lib_iinchip/socket_util.c **** 
 238:../freeRTOS750/lib_iinchip/socket_util.c **** /**
 239:../freeRTOS750/lib_iinchip/socket_util.c **** @brief	Output destination port number of appropriate channel
 240:../freeRTOS750/lib_iinchip/socket_util.c **** @return 	16bit destination port number
 241:../freeRTOS750/lib_iinchip/socket_util.c **** */
 242:../freeRTOS750/lib_iinchip/socket_util.c **** uint16_t GetDestPort(
 243:../freeRTOS750/lib_iinchip/socket_util.c **** 	SOCKET s	/**< Channel number which try to get destination port */
 244:../freeRTOS750/lib_iinchip/socket_util.c **** 	)
 245:../freeRTOS750/lib_iinchip/socket_util.c **** {
 1041               	.LM90:
 1042               	.LFBB13:
 1043 037e 0F93      		push r16
 1044 0380 1F93      		push r17
 1045 0382 CF93      		push r28
 1046 0384 DF93      		push r29
 1047               	/* prologue: function */
 1048               	/* frame size = 0 */
 1049               	/* stack size = 4 */
 1050               	.L__stack_usage = 4
 246:../freeRTOS750/lib_iinchip/socket_util.c **** 	uint16_t port;
 247:../freeRTOS750/lib_iinchip/socket_util.c **** 
 248:../freeRTOS750/lib_iinchip/socket_util.c **** 	port = IINCHIP_read( Sn_DPORT0(s) );
 1052               	.LM91:
 1053 0386 90E0      		ldi r25,0
 1054 0388 0496      		adiw r24,4
 1055 038a 182F      		mov r17,r24
 1056 038c 0027      		clr r16
 1057 038e C801      		movw r24,r16
 1058 0390 4096      		adiw r24,16
 1059 0392 0E94 0000 		call IINCHIP_read
 249:../freeRTOS750/lib_iinchip/socket_util.c **** 	port = ((port & 0x00ff) << 8) + IINCHIP_read( Sn_DPORT1(s) );
 1061               	.LM92:
 1062 0396 D82F      		mov r29,r24
 1063 0398 80E0      		ldi r24,0
 1064 039a C82F      		mov r28,r24
 1065 039c C801      		movw r24,r16
 1066 039e 4196      		adiw r24,17
 1067 03a0 0E94 0000 		call IINCHIP_read
 1068 03a4 C80F      		add r28,r24
 1069 03a6 D11D      		adc r29,__zero_reg__
 250:../freeRTOS750/lib_iinchip/socket_util.c **** 	return port;
 251:../freeRTOS750/lib_iinchip/socket_util.c **** }
 1071               	.LM93:
 1072 03a8 CE01      		movw r24,r28
 1073               	/* epilogue start */
 1074 03aa DF91      		pop r29
 1075 03ac CF91      		pop r28
 1076 03ae 1F91      		pop r17
 1077 03b0 0F91      		pop r16
 1078 03b2 0895      		ret
 1080               	.Lscope13:
 1082               		.stabd	78,0,0
 1084               	.global	htons
 1086               	htons:
 1087               		.stabd	46,0,0
 252:../freeRTOS750/lib_iinchip/socket_util.c **** #endif
 253:../freeRTOS750/lib_iinchip/socket_util.c **** 
 254:../freeRTOS750/lib_iinchip/socket_util.c **** 
 255:../freeRTOS750/lib_iinchip/socket_util.c **** 
 256:../freeRTOS750/lib_iinchip/socket_util.c **** /**
 257:../freeRTOS750/lib_iinchip/socket_util.c **** @brief	htons function converts a uint16_t from host to TCP/IP network byte order (which is big-endi
 258:../freeRTOS750/lib_iinchip/socket_util.c **** @return 	the value in TCP/IP network byte order
 259:../freeRTOS750/lib_iinchip/socket_util.c **** */
 260:../freeRTOS750/lib_iinchip/socket_util.c **** uint16_t htons(
 261:../freeRTOS750/lib_iinchip/socket_util.c **** 	uint16_t hostshort	/**< hostshort  - A 16-bit number in host byte order.  */
 262:../freeRTOS750/lib_iinchip/socket_util.c **** 	)
 263:../freeRTOS750/lib_iinchip/socket_util.c **** {
 1089               	.LM94:
 1090               	.LFBB14:
 1091               	/* prologue: function */
 1092               	/* frame size = 0 */
 1093               	/* stack size = 0 */
 1094               	.L__stack_usage = 0
 1095               	.LBB34:
 1096               	.LBB35:
  41:../freeRTOS750/lib_iinchip/socket_util.c **** 	ret = (i & 0xFF) << 8;
 1098               	.LM95:
 1099 03b4 382F      		mov r19,r24
 1100 03b6 20E0      		ldi r18,0
  42:../freeRTOS750/lib_iinchip/socket_util.c **** 	ret |= ((i >> 8)& 0xFF);
 1102               	.LM96:
 1103 03b8 492F      		mov r20,r25
 1104 03ba 50E0      		ldi r21,0
 1105 03bc 242B      		or r18,r20
 1106 03be 352B      		or r19,r21
 1107               	.LBE35:
 1108               	.LBE34:
 264:../freeRTOS750/lib_iinchip/socket_util.c **** #if ( SYSTEM_ENDIAN == _ENDIAN_LITTLE_ )
 265:../freeRTOS750/lib_iinchip/socket_util.c **** 	return swaps(hostshort);
 266:../freeRTOS750/lib_iinchip/socket_util.c **** #else
 267:../freeRTOS750/lib_iinchip/socket_util.c **** 	return hostshort;
 268:../freeRTOS750/lib_iinchip/socket_util.c **** #endif
 269:../freeRTOS750/lib_iinchip/socket_util.c **** }
 1110               	.LM97:
 1111 03c0 C901      		movw r24,r18
 1112 03c2 0895      		ret
 1114               	.Lscope14:
 1116               		.stabd	78,0,0
 1119               	.global	htonl
 1121               	htonl:
 1122               		.stabd	46,0,0
 270:../freeRTOS750/lib_iinchip/socket_util.c **** 
 271:../freeRTOS750/lib_iinchip/socket_util.c **** /**
 272:../freeRTOS750/lib_iinchip/socket_util.c **** @brief	htonl function converts a uint32_t from host to TCP/IP network byte order (which is big-endi
 273:../freeRTOS750/lib_iinchip/socket_util.c **** @return 	the value in TCP/IP network byte order
 274:../freeRTOS750/lib_iinchip/socket_util.c **** */
 275:../freeRTOS750/lib_iinchip/socket_util.c **** uint32_t htonl(
 276:../freeRTOS750/lib_iinchip/socket_util.c **** 	uint32_t hostlong		/**< hostlong  - A 32-bit number in host byte order.  */
 277:../freeRTOS750/lib_iinchip/socket_util.c **** 	)
 278:../freeRTOS750/lib_iinchip/socket_util.c **** {
 1124               	.LM98:
 1125               	.LFBB15:
 1126               	/* prologue: function */
 1127               	/* frame size = 0 */
 1128               	/* stack size = 0 */
 1129               	.L__stack_usage = 0
 279:../freeRTOS750/lib_iinchip/socket_util.c **** #if ( SYSTEM_ENDIAN == _ENDIAN_LITTLE_ )
 280:../freeRTOS750/lib_iinchip/socket_util.c **** 	return swapl(hostlong);
 1131               	.LM99:
 1132 03c4 0C94 0000 		jmp swapl
 1134               	.Lscope15:
 1136               		.stabd	78,0,0
 1138               	.global	ntohs
 1140               	ntohs:
 1141               		.stabd	46,0,0
 281:../freeRTOS750/lib_iinchip/socket_util.c **** #else
 282:../freeRTOS750/lib_iinchip/socket_util.c **** 	return hostlong;
 283:../freeRTOS750/lib_iinchip/socket_util.c **** #endif
 284:../freeRTOS750/lib_iinchip/socket_util.c **** }
 285:../freeRTOS750/lib_iinchip/socket_util.c **** 
 286:../freeRTOS750/lib_iinchip/socket_util.c **** /**
 287:../freeRTOS750/lib_iinchip/socket_util.c **** @brief	ntohs function converts a uint16_t from TCP/IP network byte order to host byte order (which 
 288:../freeRTOS750/lib_iinchip/socket_util.c **** @return 	a 16-bit number in host byte order
 289:../freeRTOS750/lib_iinchip/socket_util.c **** */
 290:../freeRTOS750/lib_iinchip/socket_util.c **** uint32_t ntohs(
 291:../freeRTOS750/lib_iinchip/socket_util.c **** 	uint16_t netshort	/**< netshort - network ordering 16bit value */
 292:../freeRTOS750/lib_iinchip/socket_util.c **** 	)
 293:../freeRTOS750/lib_iinchip/socket_util.c **** {
 1143               	.LM100:
 1144               	.LFBB16:
 1145               	/* prologue: function */
 1146               	/* frame size = 0 */
 1147               	/* stack size = 0 */
 1148               	.L__stack_usage = 0
 1149               	.LBB36:
 1150               	.LBB37:
 1151               	.LBB38:
  41:../freeRTOS750/lib_iinchip/socket_util.c **** 	ret = (i & 0xFF) << 8;
 1153               	.LM101:
 1154 03c8 382F      		mov r19,r24
 1155 03ca 20E0      		ldi r18,0
  42:../freeRTOS750/lib_iinchip/socket_util.c **** 	ret |= ((i >> 8)& 0xFF);
 1157               	.LM102:
 1158 03cc 492F      		mov r20,r25
 1159 03ce 50E0      		ldi r21,0
 1160 03d0 CA01      		movw r24,r20
 1161 03d2 822B      		or r24,r18
 1162 03d4 932B      		or r25,r19
 1163               	.LBE38:
 1164               	.LBE37:
 1165               	.LBE36:
 294:../freeRTOS750/lib_iinchip/socket_util.c **** #if ( SYSTEM_ENDIAN == _ENDIAN_LITTLE_ )
 295:../freeRTOS750/lib_iinchip/socket_util.c **** 	return htons(netshort);
 296:../freeRTOS750/lib_iinchip/socket_util.c **** #else
 297:../freeRTOS750/lib_iinchip/socket_util.c **** 	return netshort;
 298:../freeRTOS750/lib_iinchip/socket_util.c **** #endif
 299:../freeRTOS750/lib_iinchip/socket_util.c **** }
 1167               	.LM103:
 1168 03d6 BC01      		movw r22,r24
 1169 03d8 80E0      		ldi r24,0
 1170 03da 90E0      		ldi r25,0
 1171 03dc 0895      		ret
 1173               	.Lscope16:
 1175               		.stabd	78,0,0
 1178               	.global	ntohl
 1180               	ntohl:
 1181               		.stabd	46,0,0
 300:../freeRTOS750/lib_iinchip/socket_util.c **** 
 301:../freeRTOS750/lib_iinchip/socket_util.c **** /**
 302:../freeRTOS750/lib_iinchip/socket_util.c **** @brief	converts a uint32_t from TCP/IP network byte order to host byte order (which is little-endia
 303:../freeRTOS750/lib_iinchip/socket_util.c **** @return 	a uint32_t number in host byte order
 304:../freeRTOS750/lib_iinchip/socket_util.c **** */
 305:../freeRTOS750/lib_iinchip/socket_util.c **** uint32_t ntohl(uint32_t netlong)
 306:../freeRTOS750/lib_iinchip/socket_util.c **** {
 1183               	.LM104:
 1184               	.LFBB17:
 1185               	/* prologue: function */
 1186               	/* frame size = 0 */
 1187               	/* stack size = 0 */
 1188               	.L__stack_usage = 0
 1189               	.LBB39:
 1190               	.LBB40:
 280:../freeRTOS750/lib_iinchip/socket_util.c **** 	return swapl(hostlong);
 1192               	.LM105:
 1193 03de 0C94 0000 		jmp swapl
 1194               	.LBE40:
 1195               	.LBE39:
 1197               	.Lscope17:
 1199               		.stabd	78,0,0
 1202               	.global	CheckDestInLocal
 1204               	CheckDestInLocal:
 1205               		.stabd	46,0,0
 307:../freeRTOS750/lib_iinchip/socket_util.c **** #if ( SYSTEM_ENDIAN == _ENDIAN_LITTLE_ )
 308:../freeRTOS750/lib_iinchip/socket_util.c **** 	return htonl(netlong);
 309:../freeRTOS750/lib_iinchip/socket_util.c **** #else
 310:../freeRTOS750/lib_iinchip/socket_util.c **** 	return netlong;
 311:../freeRTOS750/lib_iinchip/socket_util.c **** #endif
 312:../freeRTOS750/lib_iinchip/socket_util.c **** }
 313:../freeRTOS750/lib_iinchip/socket_util.c **** 
 314:../freeRTOS750/lib_iinchip/socket_util.c **** 
 315:../freeRTOS750/lib_iinchip/socket_util.c **** #ifndef NO_USE_SOCKUTIL_FUNC
 316:../freeRTOS750/lib_iinchip/socket_util.c **** // destip : BigEndian
 317:../freeRTOS750/lib_iinchip/socket_util.c **** uint8_t CheckDestInLocal(uint32_t destip)
 318:../freeRTOS750/lib_iinchip/socket_util.c **** {
 1207               	.LM106:
 1208               	.LFBB18:
 1209 03e2 CF92      		push r12
 1210 03e4 DF92      		push r13
 1211 03e6 EF92      		push r14
 1212 03e8 FF92      		push r15
 1213 03ea 0F93      		push r16
 1214 03ec 1F93      		push r17
 1215 03ee CF93      		push r28
 1216 03f0 DF93      		push r29
 1217 03f2 00D0      		rcall .
 1218 03f4 00D0      		rcall .
 1219 03f6 CDB7      		in r28,__SP_L__
 1220 03f8 DEB7      		in r29,__SP_H__
 1221               	/* prologue: function */
 1222               	/* frame size = 4 */
 1223               	/* stack size = 12 */
 1224               	.L__stack_usage = 12
 1225 03fa 6983      		std Y+1,r22
 1226 03fc 7A83      		std Y+2,r23
 1227 03fe 8B83      		std Y+3,r24
 1228 0400 9C83      		std Y+4,r25
 1229 0402 EE24      		clr r14
 1230 0404 E394      		inc r14
 1231 0406 F12C      		mov r15,__zero_reg__
 1232 0408 EC0E      		add r14,r28
 1233 040a FD1E      		adc r15,r29
 1235               	.LM107:
 1236 040c 05E0      		ldi r16,lo8(5)
 1237 040e 10E0      		ldi r17,0
 1238               	.L60:
 1239               	.LBB41:
 319:../freeRTOS750/lib_iinchip/socket_util.c **** 
 320:../freeRTOS750/lib_iinchip/socket_util.c **** 	uint8_t * pdestip = (uint8_t*)&destip;
 321:../freeRTOS750/lib_iinchip/socket_util.c **** 	for(uint8_t i =0; i < 4; ++i)
 322:../freeRTOS750/lib_iinchip/socket_util.c **** 	{
 323:../freeRTOS750/lib_iinchip/socket_util.c **** 		if((pdestip[i] & IINCHIP_read(SUBR0+i)) != (IINCHIP_read(SIPR0+i) & IINCHIP_read(SUBR0+i)))
 1241               	.LM108:
 1242 0410 F701      		movw r30,r14
 1243 0412 D190      		ld r13,Z+
 1244 0414 7F01      		movw r14,r30
 1245 0416 C801      		movw r24,r16
 1246 0418 0E94 0000 		call IINCHIP_read
 1247 041c D822      		and r13,r24
 1248 041e C801      		movw r24,r16
 1249 0420 0A96      		adiw r24,10
 1250 0422 0E94 0000 		call IINCHIP_read
 1251 0426 C82E      		mov r12,r24
 1252 0428 C801      		movw r24,r16
 1253 042a 0E94 0000 		call IINCHIP_read
 1254 042e 8C21      		and r24,r12
 1255 0430 D812      		cpse r13,r24
 1256 0432 00C0      		rjmp .L61
 1257 0434 0F5F      		subi r16,-1
 1258 0436 1F4F      		sbci r17,-1
 321:../freeRTOS750/lib_iinchip/socket_util.c **** 	for(uint8_t i =0; i < 4; ++i)
 1260               	.LM109:
 1261 0438 0930      		cpi r16,9
 1262 043a 1105      		cpc r17,__zero_reg__
 1263 043c 01F4      		brne .L60
 324:../freeRTOS750/lib_iinchip/socket_util.c **** 			return 1;	// Remote
 325:../freeRTOS750/lib_iinchip/socket_util.c **** 	}
 326:../freeRTOS750/lib_iinchip/socket_util.c **** 	return 0;
 1265               	.LM110:
 1266 043e 80E0      		ldi r24,0
 1267 0440 00C0      		rjmp .L59
 1268               	.L61:
 324:../freeRTOS750/lib_iinchip/socket_util.c **** 			return 1;	// Remote
 1270               	.LM111:
 1271 0442 81E0      		ldi r24,lo8(1)
 1272               	.L59:
 1273               	/* epilogue start */
 1274               	.LBE41:
 327:../freeRTOS750/lib_iinchip/socket_util.c **** }
 1276               	.LM112:
 1277 0444 0F90      		pop __tmp_reg__
 1278 0446 0F90      		pop __tmp_reg__
 1279 0448 0F90      		pop __tmp_reg__
 1280 044a 0F90      		pop __tmp_reg__
 1281 044c DF91      		pop r29
 1282 044e CF91      		pop r28
 1283 0450 1F91      		pop r17
 1284 0452 0F91      		pop r16
 1285 0454 FF90      		pop r15
 1286 0456 EF90      		pop r14
 1287 0458 DF90      		pop r13
 1288 045a CF90      		pop r12
 1289 045c 0895      		ret
 1291               	.Lscope18:
 1293               		.stabd	78,0,0
 1297               	.global	getSocket
 1299               	getSocket:
 1300               		.stabd	46,0,0
 328:../freeRTOS750/lib_iinchip/socket_util.c **** 
 329:../freeRTOS750/lib_iinchip/socket_util.c **** 
 330:../freeRTOS750/lib_iinchip/socket_util.c **** /**
 331:../freeRTOS750/lib_iinchip/socket_util.c **** @brief	Get handle of socket which status is same to 'status'
 332:../freeRTOS750/lib_iinchip/socket_util.c **** @return 	socket number
 333:../freeRTOS750/lib_iinchip/socket_util.c **** */
 334:../freeRTOS750/lib_iinchip/socket_util.c **** SOCKET getSocket(
 335:../freeRTOS750/lib_iinchip/socket_util.c **** 	uint8_t status, 	/**< socket's status to be found */
 336:../freeRTOS750/lib_iinchip/socket_util.c **** 	SOCKET start			/**< base of socket to be found */
 337:../freeRTOS750/lib_iinchip/socket_util.c **** 	)
 338:../freeRTOS750/lib_iinchip/socket_util.c **** {
 1302               	.LM113:
 1303               	.LFBB19:
 1304 045e CF93      		push r28
 1305 0460 DF93      		push r29
 1306               	/* prologue: function */
 1307               	/* frame size = 0 */
 1308               	/* stack size = 2 */
 1309               	.L__stack_usage = 2
 1310 0462 D82F      		mov r29,r24
 339:../freeRTOS750/lib_iinchip/socket_util.c **** 	if(start >= MAX_SOCK_NUM) start = 0;
 1312               	.LM114:
 1313 0464 6430      		cpi r22,lo8(4)
 1314 0466 00F4      		brsh .L67
 1315 0468 C62F      		mov r28,r22
 1316 046a 00C0      		rjmp .L68
 1317               	.L67:
 1318 046c C0E0      		ldi r28,0
 1319               	.L68:
 1320               	.LBB42:
 340:../freeRTOS750/lib_iinchip/socket_util.c **** 
 341:../freeRTOS750/lib_iinchip/socket_util.c **** 	for(SOCKET i = start; i < MAX_SOCK_NUM ; ++i) if( getSn_SR(i)==status ) return i;
 1322               	.LM115:
 1323 046e 8C2F      		mov r24,r28
 1324 0470 0E94 0000 		call getSn_SR
 1325 0474 8D17      		cp r24,r29
 1326 0476 01F0      		breq .L65
 1327 0478 CF5F      		subi r28,lo8(-(1))
 1328 047a C430      		cpi r28,lo8(4)
 1329 047c 01F4      		brne .L68
 1330               	.L65:
 1331               	.LBE42:
 342:../freeRTOS750/lib_iinchip/socket_util.c **** 	return MAX_SOCK_NUM;
 343:../freeRTOS750/lib_iinchip/socket_util.c **** }
 1333               	.LM116:
 1334 047e 8C2F      		mov r24,r28
 1335               	/* epilogue start */
 1336 0480 DF91      		pop r29
 1337 0482 CF91      		pop r28
 1338 0484 0895      		ret
 1343               	.Lscope19:
 1345               		.stabd	78,0,0
 1349               	.global	checksum
 1351               	checksum:
 1352               		.stabd	46,0,0
 344:../freeRTOS750/lib_iinchip/socket_util.c **** 
 345:../freeRTOS750/lib_iinchip/socket_util.c **** 
 346:../freeRTOS750/lib_iinchip/socket_util.c **** /**
 347:../freeRTOS750/lib_iinchip/socket_util.c **** @brief	Calculate checksum of a stream
 348:../freeRTOS750/lib_iinchip/socket_util.c **** @return 	checksum
 349:../freeRTOS750/lib_iinchip/socket_util.c **** */
 350:../freeRTOS750/lib_iinchip/socket_util.c **** uint16_t checksum(
 351:../freeRTOS750/lib_iinchip/socket_util.c **** 	uint8_t * src, 	/**< pointer to stream  */
 352:../freeRTOS750/lib_iinchip/socket_util.c **** 	uint16_t len		/**< size of stream */
 353:../freeRTOS750/lib_iinchip/socket_util.c **** 	)
 354:../freeRTOS750/lib_iinchip/socket_util.c **** {
 1354               	.LM117:
 1355               	.LFBB20:
 1356 0486 CF92      		push r12
 1357 0488 DF92      		push r13
 1358 048a EF92      		push r14
 1359 048c FF92      		push r15
 1360 048e 0F93      		push r16
 1361 0490 1F93      		push r17
 1362 0492 CF93      		push r28
 1363 0494 DF93      		push r29
 1364               	/* prologue: function */
 1365               	/* frame size = 0 */
 1366               	/* stack size = 8 */
 1367               	.L__stack_usage = 8
 1368 0496 EB01      		movw r28,r22
 355:../freeRTOS750/lib_iinchip/socket_util.c **** 	uint16_t  tsum;
 356:../freeRTOS750/lib_iinchip/socket_util.c **** 	uint16_t sum, i, j;
 357:../freeRTOS750/lib_iinchip/socket_util.c **** 	uint32_t lsum;
 358:../freeRTOS750/lib_iinchip/socket_util.c **** 
 359:../freeRTOS750/lib_iinchip/socket_util.c **** 	j = len >> 1;
 1370               	.LM118:
 1371 0498 8B01      		movw r16,r22
 1372 049a 1695      		lsr r17
 1373 049c 0795      		ror r16
 350:../freeRTOS750/lib_iinchip/socket_util.c **** uint16_t checksum(
 1375               	.LM119:
 1376 049e FC01      		movw r30,r24
 1377 04a0 3196      		adiw r30,1
 360:../freeRTOS750/lib_iinchip/socket_util.c **** 
 361:../freeRTOS750/lib_iinchip/socket_util.c **** 	lsum = 0;
 1379               	.LM120:
 1380 04a2 40E0      		ldi r20,0
 1381 04a4 50E0      		ldi r21,0
 1382 04a6 BA01      		movw r22,r20
 362:../freeRTOS750/lib_iinchip/socket_util.c **** 
 363:../freeRTOS750/lib_iinchip/socket_util.c **** 	for(i = 0; i < j; ++i)
 1384               	.LM121:
 1385 04a8 20E0      		ldi r18,0
 1386 04aa 30E0      		ldi r19,0
 1387 04ac 00C0      		rjmp .L71
 1388               	.L72:
 350:../freeRTOS750/lib_iinchip/socket_util.c **** uint16_t checksum(
 1390               	.LM122:
 1391 04ae 7F01      		movw r14,r30
 1392 04b0 A1E0      		ldi r26,1
 1393 04b2 EA1A      		sub r14,r26
 1394 04b4 F108      		sbc r15,__zero_reg__
 364:../freeRTOS750/lib_iinchip/socket_util.c **** 	{
 365:../freeRTOS750/lib_iinchip/socket_util.c **** 		tsum = src[i * 2];
 366:../freeRTOS750/lib_iinchip/socket_util.c **** 		tsum = tsum << 8;
 1396               	.LM123:
 1397 04b6 D701      		movw r26,r14
 1398 04b8 DC90      		ld r13,X
 1399 04ba C12C      		mov r12,__zero_reg__
 367:../freeRTOS750/lib_iinchip/socket_util.c **** 		tsum += src[i * 2 + 1];
 1401               	.LM124:
 1402 04bc F080      		ld r15,Z
 1403 04be D601      		movw r26,r12
 1404 04c0 AF0D      		add r26,r15
 1405 04c2 B11D      		adc r27,__zero_reg__
 368:../freeRTOS750/lib_iinchip/socket_util.c **** 		lsum += tsum;
 1407               	.LM125:
 1408 04c4 4A0F      		add r20,r26
 1409 04c6 5B1F      		adc r21,r27
 1410 04c8 611D      		adc r22,__zero_reg__
 1411 04ca 711D      		adc r23,__zero_reg__
 363:../freeRTOS750/lib_iinchip/socket_util.c **** 	for(i = 0; i < j; ++i)
 1413               	.LM126:
 1414 04cc 2F5F      		subi r18,-1
 1415 04ce 3F4F      		sbci r19,-1
 1416 04d0 3296      		adiw r30,2
 1417               	.L71:
 363:../freeRTOS750/lib_iinchip/socket_util.c **** 	for(i = 0; i < j; ++i)
 1419               	.LM127:
 1420 04d2 2017      		cp r18,r16
 1421 04d4 3107      		cpc r19,r17
 1422 04d6 01F4      		brne .L72
 369:../freeRTOS750/lib_iinchip/socket_util.c **** 	}
 370:../freeRTOS750/lib_iinchip/socket_util.c **** 
 371:../freeRTOS750/lib_iinchip/socket_util.c **** 	if (len % 2)
 1424               	.LM128:
 1425 04d8 C0FF      		sbrs r28,0
 1426 04da 00C0      		rjmp .L73
 372:../freeRTOS750/lib_iinchip/socket_util.c **** 	{
 373:../freeRTOS750/lib_iinchip/socket_util.c **** 		tsum = src[i * 2];
 1428               	.LM129:
 1429 04dc F901      		movw r30,r18
 1430 04de EE0F      		lsl r30
 1431 04e0 FF1F      		rol r31
 1432 04e2 E80F      		add r30,r24
 1433 04e4 F91F      		adc r31,r25
 374:../freeRTOS750/lib_iinchip/socket_util.c **** 		lsum += (tsum << 8);
 1435               	.LM130:
 1436 04e6 9081      		ld r25,Z
 1437 04e8 80E0      		ldi r24,0
 1438 04ea 480F      		add r20,r24
 1439 04ec 591F      		adc r21,r25
 1440 04ee 611D      		adc r22,__zero_reg__
 1441 04f0 711D      		adc r23,__zero_reg__
 1442               	.L73:
 375:../freeRTOS750/lib_iinchip/socket_util.c **** 	}
 376:../freeRTOS750/lib_iinchip/socket_util.c **** 
 377:../freeRTOS750/lib_iinchip/socket_util.c **** 
 378:../freeRTOS750/lib_iinchip/socket_util.c **** 	sum = lsum;
 379:../freeRTOS750/lib_iinchip/socket_util.c **** 	sum = ~(sum + (lsum >> 16));
 1444               	.LM131:
 1445 04f2 CB01      		movw r24,r22
 1446 04f4 AA27      		clr r26
 1447 04f6 BB27      		clr r27
 1448 04f8 480F      		add r20,r24
 1449 04fa 591F      		adc r21,r25
 1450 04fc 4095      		com r20
 1451 04fe 5095      		com r21
 380:../freeRTOS750/lib_iinchip/socket_util.c **** 	return (uint16_t) sum;
 381:../freeRTOS750/lib_iinchip/socket_util.c **** }
 1453               	.LM132:
 1454 0500 CA01      		movw r24,r20
 1455               	/* epilogue start */
 1456 0502 DF91      		pop r29
 1457 0504 CF91      		pop r28
 1458 0506 1F91      		pop r17
 1459 0508 0F91      		pop r16
 1460 050a FF90      		pop r15
 1461 050c EF90      		pop r14
 1462 050e DF90      		pop r13
 1463 0510 CF90      		pop r12
 1464 0512 0895      		ret
 1470               	.Lscope20:
 1472               		.stabd	78,0,0
 1474               	.global	GetIPAddress
 1476               	GetIPAddress:
 1477               		.stabd	46,0,0
 382:../freeRTOS750/lib_iinchip/socket_util.c **** 
 383:../freeRTOS750/lib_iinchip/socket_util.c **** 
 384:../freeRTOS750/lib_iinchip/socket_util.c **** /**
 385:../freeRTOS750/lib_iinchip/socket_util.c **** @brief	Get Source IP Address of W5100/W5200.
 386:../freeRTOS750/lib_iinchip/socket_util.c **** @return 	Source IP Address(32bit Address-Host Ordering)
 387:../freeRTOS750/lib_iinchip/socket_util.c **** */
 388:../freeRTOS750/lib_iinchip/socket_util.c **** uint32_t GetIPAddress(void)
 389:../freeRTOS750/lib_iinchip/socket_util.c **** {
 1479               	.LM133:
 1480               	.LFBB21:
 1481 0514 CF92      		push r12
 1482 0516 DF92      		push r13
 1483 0518 EF92      		push r14
 1484 051a FF92      		push r15
 1485 051c 0F93      		push r16
 1486 051e 1F93      		push r17
 1487 0520 CF93      		push r28
 1488 0522 DF93      		push r29
 1489               	/* prologue: function */
 1490               	/* frame size = 0 */
 1491               	/* stack size = 8 */
 1492               	.L__stack_usage = 8
 1494               	.LM134:
 1495 0524 CFE0      		ldi r28,lo8(15)
 1496 0526 D0E0      		ldi r29,0
 390:../freeRTOS750/lib_iinchip/socket_util.c **** 	uint32_t ip=0;
 1498               	.LM135:
 1499 0528 00E0      		ldi r16,0
 1500 052a 10E0      		ldi r17,0
 1501 052c 9801      		movw r18,r16
 1502               	.L78:
 1503               	.LBB43:
 391:../freeRTOS750/lib_iinchip/socket_util.c **** 
 392:../freeRTOS750/lib_iinchip/socket_util.c **** 	for(uint8_t i=0; i < 4; ++i)
 393:../freeRTOS750/lib_iinchip/socket_util.c **** 	{
 394:../freeRTOS750/lib_iinchip/socket_util.c **** 		ip <<= 8;
 1505               	.LM136:
 1506 052e CC24      		clr r12
 1507 0530 D02E      		mov r13,r16
 1508 0532 E12E      		mov r14,r17
 1509 0534 F22E      		mov r15,r18
 395:../freeRTOS750/lib_iinchip/socket_util.c **** 		ip += (uint8_t)IINCHIP_read(SIPR0+i);
 1511               	.LM137:
 1512 0536 CE01      		movw r24,r28
 1513 0538 0E94 0000 		call IINCHIP_read
 1514 053c 9701      		movw r18,r14
 1515 053e 8601      		movw r16,r12
 1516 0540 080F      		add r16,r24
 1517 0542 111D      		adc r17,__zero_reg__
 1518 0544 211D      		adc r18,__zero_reg__
 1519 0546 311D      		adc r19,__zero_reg__
 1520 0548 2196      		adiw r28,1
 392:../freeRTOS750/lib_iinchip/socket_util.c **** 	for(uint8_t i=0; i < 4; ++i)
 1522               	.LM138:
 1523 054a C331      		cpi r28,19
 1524 054c D105      		cpc r29,__zero_reg__
 1525 054e 01F4      		brne .L78
 1526               	.LBE43:
 396:../freeRTOS750/lib_iinchip/socket_util.c **** 	}
 397:../freeRTOS750/lib_iinchip/socket_util.c **** 	return ip;
 398:../freeRTOS750/lib_iinchip/socket_util.c **** }
 1528               	.LM139:
 1529 0550 B801      		movw r22,r16
 1530 0552 C901      		movw r24,r18
 1531               	/* epilogue start */
 1532 0554 DF91      		pop r29
 1533 0556 CF91      		pop r28
 1534 0558 1F91      		pop r17
 1535 055a 0F91      		pop r16
 1536 055c FF90      		pop r15
 1537 055e EF90      		pop r14
 1538 0560 DF90      		pop r13
 1539 0562 CF90      		pop r12
 1540 0564 0895      		ret
 1542               	.Lscope21:
 1544               		.stabd	78,0,0
 1546               	.global	GetGWAddress
 1548               	GetGWAddress:
 1549               		.stabd	46,0,0
 399:../freeRTOS750/lib_iinchip/socket_util.c **** 
 400:../freeRTOS750/lib_iinchip/socket_util.c **** 
 401:../freeRTOS750/lib_iinchip/socket_util.c **** /**
 402:../freeRTOS750/lib_iinchip/socket_util.c **** @brief	Get Gateway IP Address of W5100/W5200.
 403:../freeRTOS750/lib_iinchip/socket_util.c **** @return 	Gateway IP Address(32bit Address-Host Ordering)
 404:../freeRTOS750/lib_iinchip/socket_util.c **** */
 405:../freeRTOS750/lib_iinchip/socket_util.c **** uint32_t GetGWAddress(void)
 406:../freeRTOS750/lib_iinchip/socket_util.c **** {
 1551               	.LM140:
 1552               	.LFBB22:
 1553 0566 CF92      		push r12
 1554 0568 DF92      		push r13
 1555 056a EF92      		push r14
 1556 056c FF92      		push r15
 1557 056e 0F93      		push r16
 1558 0570 1F93      		push r17
 1559 0572 CF93      		push r28
 1560 0574 DF93      		push r29
 1561               	/* prologue: function */
 1562               	/* frame size = 0 */
 1563               	/* stack size = 8 */
 1564               	.L__stack_usage = 8
 1566               	.LM141:
 1567 0576 C1E0      		ldi r28,lo8(1)
 1568 0578 D0E0      		ldi r29,0
 407:../freeRTOS750/lib_iinchip/socket_util.c **** 	uint32_t ip=0;
 1570               	.LM142:
 1571 057a 00E0      		ldi r16,0
 1572 057c 10E0      		ldi r17,0
 1573 057e 9801      		movw r18,r16
 1574               	.L81:
 1575               	.LBB44:
 408:../freeRTOS750/lib_iinchip/socket_util.c **** 
 409:../freeRTOS750/lib_iinchip/socket_util.c **** 	for(uint8_t i=0; i < 4; ++i)
 410:../freeRTOS750/lib_iinchip/socket_util.c **** 	{
 411:../freeRTOS750/lib_iinchip/socket_util.c **** 		ip <<= 8;
 1577               	.LM143:
 1578 0580 CC24      		clr r12
 1579 0582 D02E      		mov r13,r16
 1580 0584 E12E      		mov r14,r17
 1581 0586 F22E      		mov r15,r18
 412:../freeRTOS750/lib_iinchip/socket_util.c **** 		ip += (uint8_t)IINCHIP_read(GAR0+i);
 1583               	.LM144:
 1584 0588 CE01      		movw r24,r28
 1585 058a 0E94 0000 		call IINCHIP_read
 1586 058e 9701      		movw r18,r14
 1587 0590 8601      		movw r16,r12
 1588 0592 080F      		add r16,r24
 1589 0594 111D      		adc r17,__zero_reg__
 1590 0596 211D      		adc r18,__zero_reg__
 1591 0598 311D      		adc r19,__zero_reg__
 1592 059a 2196      		adiw r28,1
 409:../freeRTOS750/lib_iinchip/socket_util.c **** 	for(uint8_t i=0; i < 4; ++i)
 1594               	.LM145:
 1595 059c C530      		cpi r28,5
 1596 059e D105      		cpc r29,__zero_reg__
 1597 05a0 01F4      		brne .L81
 1598               	.LBE44:
 413:../freeRTOS750/lib_iinchip/socket_util.c **** 	}
 414:../freeRTOS750/lib_iinchip/socket_util.c **** 	return ip;
 415:../freeRTOS750/lib_iinchip/socket_util.c **** }
 1600               	.LM146:
 1601 05a2 B801      		movw r22,r16
 1602 05a4 C901      		movw r24,r18
 1603               	/* epilogue start */
 1604 05a6 DF91      		pop r29
 1605 05a8 CF91      		pop r28
 1606 05aa 1F91      		pop r17
 1607 05ac 0F91      		pop r16
 1608 05ae FF90      		pop r15
 1609 05b0 EF90      		pop r14
 1610 05b2 DF90      		pop r13
 1611 05b4 CF90      		pop r12
 1612 05b6 0895      		ret
 1614               	.Lscope22:
 1616               		.stabd	78,0,0
 1618               	.global	GetSubMask
 1620               	GetSubMask:
 1621               		.stabd	46,0,0
 416:../freeRTOS750/lib_iinchip/socket_util.c **** 
 417:../freeRTOS750/lib_iinchip/socket_util.c **** 
 418:../freeRTOS750/lib_iinchip/socket_util.c **** /**
 419:../freeRTOS750/lib_iinchip/socket_util.c **** @brief	Get Subnet mask of W5100/W5200.
 420:../freeRTOS750/lib_iinchip/socket_util.c **** @return 	Subnet Mask(32bit Address-Host Ordering)
 421:../freeRTOS750/lib_iinchip/socket_util.c **** */
 422:../freeRTOS750/lib_iinchip/socket_util.c **** uint32_t GetSubMask(void)
 423:../freeRTOS750/lib_iinchip/socket_util.c **** {
 1623               	.LM147:
 1624               	.LFBB23:
 1625 05b8 CF92      		push r12
 1626 05ba DF92      		push r13
 1627 05bc EF92      		push r14
 1628 05be FF92      		push r15
 1629 05c0 CF93      		push r28
 1630 05c2 DF93      		push r29
 1631               	/* prologue: function */
 1632               	/* frame size = 0 */
 1633               	/* stack size = 6 */
 1634               	.L__stack_usage = 6
 424:../freeRTOS750/lib_iinchip/socket_util.c **** 	uint32_t ip=0;
 425:../freeRTOS750/lib_iinchip/socket_util.c **** 
 426:../freeRTOS750/lib_iinchip/socket_util.c **** 	setSUBR();			// apply subnet mask address - solve Errata 2 & 3 v1.6
 1636               	.LM148:
 1637 05c4 0E94 0000 		call setSUBR
 1638 05c8 C5E0      		ldi r28,lo8(5)
 1639 05ca D0E0      		ldi r29,0
 424:../freeRTOS750/lib_iinchip/socket_util.c **** 	uint32_t ip=0;
 1641               	.LM149:
 1642 05cc C12C      		mov r12,__zero_reg__
 1643 05ce D12C      		mov r13,__zero_reg__
 1644 05d0 7601      		movw r14,r12
 1645               	.L84:
 1646               	.LBB45:
 427:../freeRTOS750/lib_iinchip/socket_util.c **** 
 428:../freeRTOS750/lib_iinchip/socket_util.c **** 	for(uint8_t i=0; i < 4; ++i)
 429:../freeRTOS750/lib_iinchip/socket_util.c **** 	{
 430:../freeRTOS750/lib_iinchip/socket_util.c **** 		ip <<= 8;
 1648               	.LM150:
 1649 05d2 FE2C      		mov r15,r14
 1650 05d4 ED2C      		mov r14,r13
 1651 05d6 DC2C      		mov r13,r12
 1652 05d8 CC24      		clr r12
 431:../freeRTOS750/lib_iinchip/socket_util.c **** 		ip += (uint8_t)IINCHIP_read(SUBR0+i);
 1654               	.LM151:
 1655 05da CE01      		movw r24,r28
 1656 05dc 0E94 0000 		call IINCHIP_read
 1657 05e0 C80E      		add r12,r24
 1658 05e2 D11C      		adc r13,__zero_reg__
 1659 05e4 E11C      		adc r14,__zero_reg__
 1660 05e6 F11C      		adc r15,__zero_reg__
 1661 05e8 2196      		adiw r28,1
 428:../freeRTOS750/lib_iinchip/socket_util.c **** 	for(uint8_t i=0; i < 4; ++i)
 1663               	.LM152:
 1664 05ea C930      		cpi r28,9
 1665 05ec D105      		cpc r29,__zero_reg__
 1666 05ee 01F4      		brne .L84
 1667               	.LBE45:
 432:../freeRTOS750/lib_iinchip/socket_util.c **** 	}
 433:../freeRTOS750/lib_iinchip/socket_util.c **** 
 434:../freeRTOS750/lib_iinchip/socket_util.c **** 	clearSUBR();			// clear subnet mask address - solve Errata 2 & 3 v1.6
 1669               	.LM153:
 1670 05f0 0E94 0000 		call clearSUBR
 435:../freeRTOS750/lib_iinchip/socket_util.c **** 
 436:../freeRTOS750/lib_iinchip/socket_util.c **** 	return ip;
 437:../freeRTOS750/lib_iinchip/socket_util.c **** }
 1672               	.LM154:
 1673 05f4 B601      		movw r22,r12
 1674 05f6 C701      		movw r24,r14
 1675               	/* epilogue start */
 1676 05f8 DF91      		pop r29
 1677 05fa CF91      		pop r28
 1678 05fc FF90      		pop r15
 1679 05fe EF90      		pop r14
 1680 0600 DF90      		pop r13
 1681 0602 CF90      		pop r12
 1682 0604 0895      		ret
 1684               	.Lscope23:
 1686               		.stabd	78,0,0
 1689               	.global	GetMacAddress
 1691               	GetMacAddress:
 1692               		.stabd	46,0,0
 438:../freeRTOS750/lib_iinchip/socket_util.c **** 
 439:../freeRTOS750/lib_iinchip/socket_util.c **** 
 440:../freeRTOS750/lib_iinchip/socket_util.c **** /**
 441:../freeRTOS750/lib_iinchip/socket_util.c **** @brief	Get Mac Address of W5100/W5200.
 442:../freeRTOS750/lib_iinchip/socket_util.c **** @return 	Subnet Mask(32bit Address-Host Ordering)
 443:../freeRTOS750/lib_iinchip/socket_util.c **** */
 444:../freeRTOS750/lib_iinchip/socket_util.c **** void GetMacAddress(
 445:../freeRTOS750/lib_iinchip/socket_util.c **** 	uint8_t* mac	/**< Pointer to store Mac Address (48bit Address)(INPUT, OUTPUT) */
 446:../freeRTOS750/lib_iinchip/socket_util.c **** 	)
 447:../freeRTOS750/lib_iinchip/socket_util.c **** {
 1694               	.LM155:
 1695               	.LFBB24:
 1696 0606 0F93      		push r16
 1697 0608 1F93      		push r17
 1698 060a CF93      		push r28
 1699 060c DF93      		push r29
 1700               	/* prologue: function */
 1701               	/* frame size = 0 */
 1702               	/* stack size = 4 */
 1703               	.L__stack_usage = 4
 1704 060e 8C01      		movw r16,r24
 1706               	.LM156:
 1707 0610 C9E0      		ldi r28,lo8(9)
 1708 0612 D0E0      		ldi r29,0
 1709               	.L87:
 1710               	.LBB46:
 448:../freeRTOS750/lib_iinchip/socket_util.c **** 	for(uint8_t i=0; i<6; ++i) *mac++ = IINCHIP_read(SHAR0+i);
 1712               	.LM157:
 1713 0614 CE01      		movw r24,r28
 1714 0616 0E94 0000 		call IINCHIP_read
 1715 061a F801      		movw r30,r16
 1716 061c 8193      		st Z+,r24
 1717 061e 8F01      		movw r16,r30
 1718 0620 2196      		adiw r28,1
 1719 0622 CF30      		cpi r28,15
 1720 0624 D105      		cpc r29,__zero_reg__
 1721 0626 01F4      		brne .L87
 1722               	/* epilogue start */
 1723               	.LBE46:
 449:../freeRTOS750/lib_iinchip/socket_util.c **** }
 1725               	.LM158:
 1726 0628 DF91      		pop r29
 1727 062a CF91      		pop r28
 1728 062c 1F91      		pop r17
 1729 062e 0F91      		pop r16
 1730 0630 0895      		ret
 1732               	.Lscope24:
 1734               		.stabd	78,0,0
 1738               	.global	GetDestMacAddr
 1740               	GetDestMacAddr:
 1741               		.stabd	46,0,0
 450:../freeRTOS750/lib_iinchip/socket_util.c **** 
 451:../freeRTOS750/lib_iinchip/socket_util.c **** void GetDestMacAddr(SOCKET s, uint8_t* mac)
 452:../freeRTOS750/lib_iinchip/socket_util.c **** {
 1743               	.LM159:
 1744               	.LFBB25:
 1745 0632 EF92      		push r14
 1746 0634 FF92      		push r15
 1747 0636 0F93      		push r16
 1748 0638 1F93      		push r17
 1749 063a CF93      		push r28
 1750 063c DF93      		push r29
 1751               	/* prologue: function */
 1752               	/* frame size = 0 */
 1753               	/* stack size = 6 */
 1754               	.L__stack_usage = 6
 1755 063e 8B01      		movw r16,r22
 1756               	.LBB47:
 453:../freeRTOS750/lib_iinchip/socket_util.c **** 	for(uint8_t i=0; i<6; ++i) *mac++ = IINCHIP_read(Sn_DHAR0(s)+i);
 1758               	.LM160:
 1759 0640 90E0      		ldi r25,0
 1760 0642 0496      		adiw r24,4
 1761 0644 982F      		mov r25,r24
 1762 0646 8827      		clr r24
 1763 0648 EC01      		movw r28,r24
 1764 064a 2696      		adiw r28,6
 451:../freeRTOS750/lib_iinchip/socket_util.c **** void GetDestMacAddr(SOCKET s, uint8_t* mac)
 1766               	.LM161:
 1767 064c 7C01      		movw r14,r24
 1768 064e 2CE0      		ldi r18,12
 1769 0650 E20E      		add r14,r18
 1770 0652 F11C      		adc r15,__zero_reg__
 1771               	.L90:
 1773               	.LM162:
 1774 0654 CE01      		movw r24,r28
 1775 0656 0E94 0000 		call IINCHIP_read
 1776 065a F801      		movw r30,r16
 1777 065c 8193      		st Z+,r24
 1778 065e 8F01      		movw r16,r30
 1779 0660 2196      		adiw r28,1
 1780 0662 CE15      		cp r28,r14
 1781 0664 DF05      		cpc r29,r15
 1782 0666 01F4      		brne .L90
 1783               	/* epilogue start */
 1784               	.LBE47:
 454:../freeRTOS750/lib_iinchip/socket_util.c **** }
 1786               	.LM163:
 1787 0668 DF91      		pop r29
 1788 066a CF91      		pop r28
 1789 066c 1F91      		pop r17
 1790 066e 0F91      		pop r16
 1791 0670 FF90      		pop r15
 1792 0672 EF90      		pop r14
 1793 0674 0895      		ret
 1795               	.Lscope25:
 1797               		.stabd	78,0,0
 1799               	.global	GetNetConfig
 1801               	GetNetConfig:
 1802               		.stabd	46,0,0
 455:../freeRTOS750/lib_iinchip/socket_util.c **** 
 456:../freeRTOS750/lib_iinchip/socket_util.c **** 
 457:../freeRTOS750/lib_iinchip/socket_util.c **** /**
 458:../freeRTOS750/lib_iinchip/socket_util.c **** @brief	Read established network information(G/W, IP, S/N, Mac) of W5100 and Output that through Ser
 459:../freeRTOS750/lib_iinchip/socket_util.c **** 		Mac Address is output into format of Dotted HexaDecimal. Others are output into format of Dotted 
 460:../freeRTOS750/lib_iinchip/socket_util.c **** */
 461:../freeRTOS750/lib_iinchip/socket_util.c **** void GetNetConfig(void)
 462:../freeRTOS750/lib_iinchip/socket_util.c **** {
 1804               	.LM164:
 1805               	.LFBB26:
 1806 0676 CF93      		push r28
 1807 0678 DF93      		push r29
 1808 067a 00D0      		rcall .
 1809 067c 00D0      		rcall .
 1810 067e 00D0      		rcall .
 1811 0680 CDB7      		in r28,__SP_L__
 1812 0682 DEB7      		in r29,__SP_H__
 1813               	/* prologue: function */
 1814               	/* frame size = 6 */
 1815               	/* stack size = 8 */
 1816               	.L__stack_usage = 8
 463:../freeRTOS750/lib_iinchip/socket_util.c **** 	uint8_t addr[6];
 464:../freeRTOS750/lib_iinchip/socket_util.c **** 	uint32_t iaddr;
 465:../freeRTOS750/lib_iinchip/socket_util.c **** 	xSerialPrint_P(PSTR("\r\n================================================\r\n"));
 1818               	.LM165:
 1819 0684 80E0      		ldi r24,lo8(__c.2956)
 1820 0686 90E0      		ldi r25,hi8(__c.2956)
 1821 0688 0E94 0000 		call xSerialPrint_P
 466:../freeRTOS750/lib_iinchip/socket_util.c **** 	xSerialPrint_P(PSTR("Network Configuration Information\r\n"));
 1823               	.LM166:
 1824 068c 80E0      		ldi r24,lo8(__c.2958)
 1825 068e 90E0      		ldi r25,hi8(__c.2958)
 1826 0690 0E94 0000 		call xSerialPrint_P
 467:../freeRTOS750/lib_iinchip/socket_util.c **** 	xSerialPrint_P(PSTR("================================================\r\n"));
 1828               	.LM167:
 1829 0694 80E0      		ldi r24,lo8(__c.2960)
 1830 0696 90E0      		ldi r25,hi8(__c.2960)
 1831 0698 0E94 0000 		call xSerialPrint_P
 1832               	.LBB48:
 1833               	.LBB49:
 1835               	.Ltext1:
   1:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
   6:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
   9:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  12:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****      distribution.
  16:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  17:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  21:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  33:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  35:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  38:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #endif
  41:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  42:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  46:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** /** \file */
  47:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     \code
  49:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     \endcode
  53:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  54:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     used.
  58:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  59:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  68:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  77:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  81:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** */
  82:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  83:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #endif
  87:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  88:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #endif
  93:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  94:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #endif
  97:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  98:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #endif
 103:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 104:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** /**
 105:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 107:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 109:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 112:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 114:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 120:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 125:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 129:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 132:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 140:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****  */
 141:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** void
 142:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** {
 144:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 153:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 156:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 159:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	#else
 160:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 		//round up by default
 161:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	#endif
 163:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 164:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 1837               	.LM168:
 1838 069c 8FEC      		ldi r24,lo8(1999)
 1839 069e 97E0      		ldi r25,hi8(1999)
 1840 06a0 0197      		1: sbiw r24,1
 1841 06a2 01F4      		brne 1b
 1842 06a4 00C0      		rjmp .
 1843 06a6 0000      		nop
 1844               	.LBE49:
 1845               	.LBE48:
 1847               	.Ltext2:
 468:../freeRTOS750/lib_iinchip/socket_util.c **** 	_delay_ms(8);
 469:../freeRTOS750/lib_iinchip/socket_util.c **** 	GetMacAddress(addr);
 1849               	.LM169:
 1850 06a8 CE01      		movw r24,r28
 1851 06aa 0196      		adiw r24,1
 1852 06ac 0E94 0000 		call GetMacAddress
 470:../freeRTOS750/lib_iinchip/socket_util.c **** 	xSerialPrintf_P(PSTR("MAC ADDRESS      : 0x%02X.0x%02X.0x%02X.0x%02X.0x%02X.0x%02X\r\n"),addr[0],a
 1854               	.LM170:
 1855 06b0 8E81      		ldd r24,Y+6
 1856 06b2 1F92      		push __zero_reg__
 1857 06b4 8F93      		push r24
 1858 06b6 8D81      		ldd r24,Y+5
 1859 06b8 1F92      		push __zero_reg__
 1860 06ba 8F93      		push r24
 1861 06bc 8C81      		ldd r24,Y+4
 1862 06be 1F92      		push __zero_reg__
 1863 06c0 8F93      		push r24
 1864 06c2 8B81      		ldd r24,Y+3
 1865 06c4 1F92      		push __zero_reg__
 1866 06c6 8F93      		push r24
 1867 06c8 8A81      		ldd r24,Y+2
 1868 06ca 1F92      		push __zero_reg__
 1869 06cc 8F93      		push r24
 1870 06ce 8981      		ldd r24,Y+1
 1871 06d0 1F92      		push __zero_reg__
 1872 06d2 8F93      		push r24
 1873 06d4 80E0      		ldi r24,lo8(__c.2962)
 1874 06d6 90E0      		ldi r25,hi8(__c.2962)
 1875 06d8 9F93      		push r25
 1876 06da 8F93      		push r24
 1877 06dc 0E94 0000 		call xSerialPrintf_P
 471:../freeRTOS750/lib_iinchip/socket_util.c **** 	iaddr = GetSubMask();
 1879               	.LM171:
 1880 06e0 0E94 0000 		call GetSubMask
 472:../freeRTOS750/lib_iinchip/socket_util.c **** 	xSerialPrintf_P(PSTR("SUBNET MASK      : %s\r\n"),inet_ntoa(iaddr));
 1882               	.LM172:
 1883 06e4 0E94 0000 		call inet_ntoa
 1884 06e8 9F93      		push r25
 1885 06ea 8F93      		push r24
 1886 06ec 80E0      		ldi r24,lo8(__c.2964)
 1887 06ee 90E0      		ldi r25,hi8(__c.2964)
 1888 06f0 9F93      		push r25
 1889 06f2 8F93      		push r24
 1890 06f4 0E94 0000 		call xSerialPrintf_P
 473:../freeRTOS750/lib_iinchip/socket_util.c **** 	iaddr = GetGWAddress();
 1892               	.LM173:
 1893 06f8 0E94 0000 		call GetGWAddress
 474:../freeRTOS750/lib_iinchip/socket_util.c **** 	xSerialPrintf_P(PSTR("G/W IP ADDRESS   : %s\r\n"),inet_ntoa(iaddr));
 1895               	.LM174:
 1896 06fc 0E94 0000 		call inet_ntoa
 1897 0700 9F93      		push r25
 1898 0702 8F93      		push r24
 1899 0704 80E0      		ldi r24,lo8(__c.2966)
 1900 0706 90E0      		ldi r25,hi8(__c.2966)
 1901 0708 9F93      		push r25
 1902 070a 8F93      		push r24
 1903 070c 0E94 0000 		call xSerialPrintf_P
 475:../freeRTOS750/lib_iinchip/socket_util.c **** 	iaddr = GetIPAddress();
 1905               	.LM175:
 1906 0710 0E94 0000 		call GetIPAddress
 476:../freeRTOS750/lib_iinchip/socket_util.c **** 	xSerialPrintf_P(PSTR("LOCAL IP ADDRESS : %s\r\n"),inet_ntoa(iaddr));
 1908               	.LM176:
 1909 0714 0E94 0000 		call inet_ntoa
 1910 0718 9F93      		push r25
 1911 071a 8F93      		push r24
 1912 071c 80E0      		ldi r24,lo8(__c.2968)
 1913 071e 90E0      		ldi r25,hi8(__c.2968)
 1914 0720 9F93      		push r25
 1915 0722 8F93      		push r24
 1916 0724 0E94 0000 		call xSerialPrintf_P
 477:../freeRTOS750/lib_iinchip/socket_util.c **** 	xSerialPrint_P(PSTR("================================================\r\n\n"));
 1918               	.LM177:
 1919 0728 80E0      		ldi r24,lo8(__c.2970)
 1920 072a 90E0      		ldi r25,hi8(__c.2970)
 1921 072c 0E94 0000 		call xSerialPrint_P
 1922 0730 0FB6      		in __tmp_reg__,__SREG__
 1923 0732 F894      		cli
 1924 0734 DEBF      		out __SP_H__,r29
 1925 0736 0FBE      		out __SREG__,__tmp_reg__
 1926 0738 CDBF      		out __SP_L__,r28
 1927               	/* epilogue start */
 478:../freeRTOS750/lib_iinchip/socket_util.c **** }
 1929               	.LM178:
 1930 073a 2696      		adiw r28,6
 1931 073c 0FB6      		in __tmp_reg__,__SREG__
 1932 073e F894      		cli
 1933 0740 DEBF      		out __SP_H__,r29
 1934 0742 0FBE      		out __SREG__,__tmp_reg__
 1935 0744 CDBF      		out __SP_L__,r28
 1936 0746 DF91      		pop r29
 1937 0748 CF91      		pop r28
 1938 074a 0895      		ret
 1943               	.Lscope26:
 1945               		.stabd	78,0,0
 1946               		.local	addr_str.2830
 1947               		.comm	addr_str.2830,16,1
 1948               		.section	.progmem.data,"a",@progbits
 1951               	__c.2831:
 1952 0000 2564 2E25 		.string	"%d.%d.%d.%d"
 1952      642E 2564 
 1952      2E25 6400 
 1953               		.local	addr_str.2836
 1954               		.comm	addr_str.2836,16,1
 1957               	__c.2837:
 1958 000c 2530 3364 		.string	"%03d.%03d.%03d.%03d"
 1958      2E25 3033 
 1958      642E 2530 
 1958      3364 2E25 
 1958      3033 6400 
 1961               	__c.2956:
 1962 0020 0D0A 3D3D 		.string	"\r\n================================================\r\n"
 1962      3D3D 3D3D 
 1962      3D3D 3D3D 
 1962      3D3D 3D3D 
 1962      3D3D 3D3D 
 1965               	__c.2958:
 1966 0055 4E65 7477 		.string	"Network Configuration Information\r\n"
 1966      6F72 6B20 
 1966      436F 6E66 
 1966      6967 7572 
 1966      6174 696F 
 1969               	__c.2960:
 1970 0079 3D3D 3D3D 		.string	"================================================\r\n"
 1970      3D3D 3D3D 
 1970      3D3D 3D3D 
 1970      3D3D 3D3D 
 1970      3D3D 3D3D 
 1973               	__c.2962:
 1974 00ac 4D41 4320 		.string	"MAC ADDRESS      : 0x%02X.0x%02X.0x%02X.0x%02X.0x%02X.0x%02X\r\n"
 1974      4144 4452 
 1974      4553 5320 
 1974      2020 2020 
 1974      203A 2030 
 1977               	__c.2964:
 1978 00eb 5355 424E 		.string	"SUBNET MASK      : %s\r\n"
 1978      4554 204D 
 1978      4153 4B20 
 1978      2020 2020 
 1978      203A 2025 
 1981               	__c.2966:
 1982 0103 472F 5720 		.string	"G/W IP ADDRESS   : %s\r\n"
 1982      4950 2041 
 1982      4444 5245 
 1982      5353 2020 
 1982      203A 2025 
 1985               	__c.2968:
 1986 011b 4C4F 4341 		.string	"LOCAL IP ADDRESS : %s\r\n"
 1986      4C20 4950 
 1986      2041 4444 
 1986      5245 5353 
 1986      203A 2025 
 1989               	__c.2970:
 1990 0133 3D3D 3D3D 		.string	"================================================\r\n\n"
 1990      3D3D 3D3D 
 1990      3D3D 3D3D 
 1990      3D3D 3D3D 
 1990      3D3D 3D3D 
 1991               		.text
 1993               	.Letext0:
 1994               		.ident	"GCC: (GNU) 4.7.2"
 1995               	.global __do_copy_data
 1996               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 socket_util.c
     /tmp/cc4y2gla.s:2      *ABS*:0000003e __SP_H__
     /tmp/cc4y2gla.s:3      *ABS*:0000003d __SP_L__
     /tmp/cc4y2gla.s:4      *ABS*:0000003f __SREG__
     /tmp/cc4y2gla.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/cc4y2gla.s:6      *ABS*:00000001 __zero_reg__
     /tmp/cc4y2gla.s:161    .text:00000000 swaps
     /tmp/cc4y2gla.s:192    .text:00000010 swapl
     /tmp/cc4y2gla.s:213    .text:00000016 D2C
     /tmp/cc4y2gla.s:261    .text:00000032 C2D
     /tmp/cc4y2gla.s:316    .text:00000054 ATOI
     /tmp/cc4y2gla.s:384    .text:00000098 ValidATOI
     /tmp/cc4y2gla.s:486    .text:0000010e replacetochar
     /tmp/cc4y2gla.s:529    .text:00000122 inet_ntoa
                             .bss:00000000 addr_str.2830
     /tmp/cc4y2gla.s:1951   .progmem.data:00000000 __c.2831
     /tmp/cc4y2gla.s:607    .text:00000184 inet_ntoa_pad
     /tmp/cc4y2gla.s:1947   .bss:00000010 addr_str.2836
     /tmp/cc4y2gla.s:1957   .progmem.data:0000000c __c.2837
     /tmp/cc4y2gla.s:689    .text:000001e6 inet_addr
     /tmp/cc4y2gla.s:816    .text:00000284 VerifyIPAddress
     /tmp/cc4y2gla.s:947    .text:00000310 GetDestAddr
     /tmp/cc4y2gla.s:1038   .text:0000037e GetDestPort
     /tmp/cc4y2gla.s:1086   .text:000003b4 htons
     /tmp/cc4y2gla.s:1121   .text:000003c4 htonl
     /tmp/cc4y2gla.s:1140   .text:000003c8 ntohs
     /tmp/cc4y2gla.s:1180   .text:000003de ntohl
     /tmp/cc4y2gla.s:1204   .text:000003e2 CheckDestInLocal
     /tmp/cc4y2gla.s:1299   .text:0000045e getSocket
     /tmp/cc4y2gla.s:1351   .text:00000486 checksum
     /tmp/cc4y2gla.s:1476   .text:00000514 GetIPAddress
     /tmp/cc4y2gla.s:1548   .text:00000566 GetGWAddress
     /tmp/cc4y2gla.s:1620   .text:000005b8 GetSubMask
     /tmp/cc4y2gla.s:1691   .text:00000606 GetMacAddress
     /tmp/cc4y2gla.s:1740   .text:00000632 GetDestMacAddr
     /tmp/cc4y2gla.s:1801   .text:00000676 GetNetConfig
     /tmp/cc4y2gla.s:1961   .progmem.data:00000020 __c.2956
     /tmp/cc4y2gla.s:1965   .progmem.data:00000055 __c.2958
     /tmp/cc4y2gla.s:1969   .progmem.data:00000079 __c.2960
     /tmp/cc4y2gla.s:1973   .progmem.data:000000ac __c.2962
     /tmp/cc4y2gla.s:1977   .progmem.data:000000eb __c.2964
     /tmp/cc4y2gla.s:1981   .progmem.data:00000103 __c.2966
     /tmp/cc4y2gla.s:1985   .progmem.data:0000011b __c.2968
     /tmp/cc4y2gla.s:1989   .progmem.data:00000133 __c.2970

UNDEFINED SYMBOLS
__bswapsi2
sprintf_P
strcpy
strtok
IINCHIP_read
getSn_SR
setSUBR
clearSUBR
xSerialPrint_P
xSerialPrintf_P
__do_copy_data
__do_clear_bss
