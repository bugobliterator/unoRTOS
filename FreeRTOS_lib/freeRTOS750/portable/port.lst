   1               		.file	"port.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
 129               	.global	pxPortInitialiseStack
 131               	pxPortInitialiseStack:
 132               		.stabd	46,0,0
   1:../freeRTOS750/portable/port.c **** /*
   2:../freeRTOS750/portable/port.c ****     FreeRTOS V7.5.0 - Copyright (C) 2013 Real Time Engineers Ltd.
   3:../freeRTOS750/portable/port.c **** 
   4:../freeRTOS750/portable/port.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   5:../freeRTOS750/portable/port.c **** 
   6:../freeRTOS750/portable/port.c ****     ***************************************************************************
   7:../freeRTOS750/portable/port.c ****      *                                                                       *
   8:../freeRTOS750/portable/port.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
   9:../freeRTOS750/portable/port.c ****      *    robust, strictly quality controlled, supported, and cross          *
  10:../freeRTOS750/portable/port.c ****      *    platform software that has become a de facto standard.             *
  11:../freeRTOS750/portable/port.c ****      *                                                                       *
  12:../freeRTOS750/portable/port.c ****      *    Help yourself get started quickly and support the FreeRTOS         *
  13:../freeRTOS750/portable/port.c ****      *    project by purchasing a FreeRTOS tutorial book, reference          *
  14:../freeRTOS750/portable/port.c ****      *    manual, or both from: http://www.FreeRTOS.org/Documentation        *
  15:../freeRTOS750/portable/port.c ****      *                                                                       *
  16:../freeRTOS750/portable/port.c ****      *    Thank you!                                                         *
  17:../freeRTOS750/portable/port.c ****      *                                                                       *
  18:../freeRTOS750/portable/port.c ****     ***************************************************************************
  19:../freeRTOS750/portable/port.c **** 
  20:../freeRTOS750/portable/port.c ****     This file is part of the FreeRTOS distribution.
  21:../freeRTOS750/portable/port.c **** 
  22:../freeRTOS750/portable/port.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  23:../freeRTOS750/portable/port.c ****     the terms of the GNU General Public License (version 2) as published by the
  24:../freeRTOS750/portable/port.c ****     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
  25:../freeRTOS750/portable/port.c **** 
  26:../freeRTOS750/portable/port.c ****     >>! NOTE: The modification to the GPL is included to allow you to distribute
  27:../freeRTOS750/portable/port.c ****     >>! a combined work that includes FreeRTOS without being obliged to provide
  28:../freeRTOS750/portable/port.c ****     >>! the source code for proprietary components outside of the FreeRTOS
  29:../freeRTOS750/portable/port.c ****     >>! kernel.
  30:../freeRTOS750/portable/port.c **** 
  31:../freeRTOS750/portable/port.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  32:../freeRTOS750/portable/port.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  33:../freeRTOS750/portable/port.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available from the following
  34:../freeRTOS750/portable/port.c ****     link: http://www.freertos.org/a00114.html
  35:../freeRTOS750/portable/port.c **** 
  36:../freeRTOS750/portable/port.c ****     1 tab == 4 spaces!
  37:../freeRTOS750/portable/port.c **** 
  38:../freeRTOS750/portable/port.c ****     ***************************************************************************
  39:../freeRTOS750/portable/port.c ****      *                                                                       *
  40:../freeRTOS750/portable/port.c ****      *    Having a problem?  Start by reading the FAQ "My application does   *
  41:../freeRTOS750/portable/port.c ****      *    not run, what could be wrong?"                                     *
  42:../freeRTOS750/portable/port.c ****      *                                                                       *
  43:../freeRTOS750/portable/port.c ****      *    http://www.FreeRTOS.org/FAQHelp.html                               *
  44:../freeRTOS750/portable/port.c ****      *                                                                       *
  45:../freeRTOS750/portable/port.c ****     ***************************************************************************
  46:../freeRTOS750/portable/port.c **** 
  47:../freeRTOS750/portable/port.c ****     http://www.FreeRTOS.org - Documentation, books, training, latest versions,
  48:../freeRTOS750/portable/port.c ****     license and Real Time Engineers Ltd. contact details.
  49:../freeRTOS750/portable/port.c **** 
  50:../freeRTOS750/portable/port.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  51:../freeRTOS750/portable/port.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  52:../freeRTOS750/portable/port.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  53:../freeRTOS750/portable/port.c **** 
  54:../freeRTOS750/portable/port.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High
  55:../freeRTOS750/portable/port.c ****     Integrity Systems to sell under the OpenRTOS brand.  Low cost OpenRTOS
  56:../freeRTOS750/portable/port.c ****     licenses offer ticketed support, indemnification and middleware.
  57:../freeRTOS750/portable/port.c **** 
  58:../freeRTOS750/portable/port.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  59:../freeRTOS750/portable/port.c ****     engineered and independently SIL3 certified version for use in safety and
  60:../freeRTOS750/portable/port.c ****     mission critical applications that require provable dependability.
  61:../freeRTOS750/portable/port.c **** 
  62:../freeRTOS750/portable/port.c ****     1 tab == 4 spaces!
  63:../freeRTOS750/portable/port.c **** */
  64:../freeRTOS750/portable/port.c **** 
  65:../freeRTOS750/portable/port.c **** 
  66:../freeRTOS750/portable/port.c **** #include <stdlib.h>
  67:../freeRTOS750/portable/port.c **** #include <avr/interrupt.h>
  68:../freeRTOS750/portable/port.c **** 
  69:../freeRTOS750/portable/port.c **** #include <FreeRTOS.h>
  70:../freeRTOS750/portable/port.c **** #include <task.h>
  71:../freeRTOS750/portable/port.c **** 
  72:../freeRTOS750/portable/port.c **** #include <time.h> 		// Needed for system_tick();
  73:../freeRTOS750/portable/port.c **** 
  74:../freeRTOS750/portable/port.c **** #if defined (portQUAD_RAM) || defined (portMEGA_RAM)
  75:../freeRTOS750/portable/port.c **** #include <ext_ram.h>	// Needed for extRAMcheck();
  76:../freeRTOS750/portable/port.c **** #endif
  77:../freeRTOS750/portable/port.c **** 
  78:../freeRTOS750/portable/port.c **** /*-----------------------------------------------------------
  79:../freeRTOS750/portable/port.c ****  * Implementation of functions defined in portable.h for the AVR port.
  80:../freeRTOS750/portable/port.c ****  *----------------------------------------------------------*/
  81:../freeRTOS750/portable/port.c **** 
  82:../freeRTOS750/portable/port.c **** /* Start tasks with interrupts enabled. */
  83:../freeRTOS750/portable/port.c **** #define portFLAGS_INT_ENABLED					( ( portSTACK_TYPE ) 0x80 )
  84:../freeRTOS750/portable/port.c **** #define portUSE_TIMER0
  85:../freeRTOS750/portable/port.c **** #if defined( portUSE_TIMER0 )
  86:../freeRTOS750/portable/port.c **** /* Hardware constants for Timer0. */
  87:../freeRTOS750/portable/port.c **** 	#warning "Timer0 used for scheduler."
  88:../freeRTOS750/portable/port.c **** 	#define	TIMER_COMPA_ISR							TIMER0_COMPA_vect
  89:../freeRTOS750/portable/port.c ****     #define portCLEAR_COUNTER_ON_MATCH			    ( ( unsigned portCHAR ) (1<<WGM01) )
  90:../freeRTOS750/portable/port.c **** 	#define portPRESCALE_1024     			        ( ( unsigned portCHAR ) ((1<<CS02)|(1<<CS00)) )
  91:../freeRTOS750/portable/port.c ****     #define portCLOCK_PRESCALER				        ( ( unsigned portLONG ) 1024 )
  92:../freeRTOS750/portable/port.c **** 	#define portCOMPARE_MATCH_A_INTERRUPT_ENABLE	( ( unsigned portCHAR ) (1<<OCIE0A) )
  93:../freeRTOS750/portable/port.c ****     #define portOCRL                                OCR0A
  94:../freeRTOS750/portable/port.c ****     #define portTCCRa                               TCCR0A
  95:../freeRTOS750/portable/port.c ****     #define portTCCRb                               TCCR0B
  96:../freeRTOS750/portable/port.c ****     #define portTIMSK                               TIMSK0
  97:../freeRTOS750/portable/port.c **** 
  98:../freeRTOS750/portable/port.c **** #elif defined( portUSE_TIMER1 )
  99:../freeRTOS750/portable/port.c **** /* Hardware constants for Timer1. */
 100:../freeRTOS750/portable/port.c **** 	#warning "Timer1 used for scheduler."
 101:../freeRTOS750/portable/port.c **** 	#define	TIMER_COMPA_ISR							TIMER1_COMPA_vect
 102:../freeRTOS750/portable/port.c **** 	#define portCLEAR_COUNTER_ON_MATCH			    ( ( unsigned portCHAR ) (1<<WGM12) )
 103:../freeRTOS750/portable/port.c **** 	#define portPRESCALE_64				            ( ( unsigned portCHAR ) ((1<<CS11)|(1<<CS10)) )
 104:../freeRTOS750/portable/port.c **** 	#define portCLOCK_PRESCALER				        ( ( unsigned portLONG ) 64 )
 105:../freeRTOS750/portable/port.c **** 	#define portCOMPARE_MATCH_A_INTERRUPT_ENABLE	( ( unsigned portCHAR ) (1<<OCIE1A) )
 106:../freeRTOS750/portable/port.c **** 	#define portOCRL                              	OCR1AL
 107:../freeRTOS750/portable/port.c **** 	#define portOCRH                                OCR1AH
 108:../freeRTOS750/portable/port.c **** 	#define portTCCRa                               TCCR1A
 109:../freeRTOS750/portable/port.c **** 	#define portTCCRb                              	TCCR1B
 110:../freeRTOS750/portable/port.c **** 	#define portTIMSK                               TIMSK1
 111:../freeRTOS750/portable/port.c **** 
 112:../freeRTOS750/portable/port.c **** #elif defined( portUSE_TIMER2 )
 113:../freeRTOS750/portable/port.c **** /* Hardware constants for Timer2. */
 114:../freeRTOS750/portable/port.c **** 	#warning "Timer2 used for scheduler."
 115:../freeRTOS750/portable/port.c **** 	#define	TIMER_COMPA_ISR							TIMER2_COMPA_vect
 116:../freeRTOS750/portable/port.c ****     #define portOCRL                          		OCR2A
 117:../freeRTOS750/portable/port.c ****     #define portTCCRa                               TCCR2A
 118:../freeRTOS750/portable/port.c ****     #define portTCCRb                               TCCR2B
 119:../freeRTOS750/portable/port.c ****     #define portTIMSK                               TIMSK2
 120:../freeRTOS750/portable/port.c **** 	#define portTCNT								TCNT2
 121:../freeRTOS750/portable/port.c **** 	#define portTIFR								TIFR2
 122:../freeRTOS750/portable/port.c **** 
 123:../freeRTOS750/portable/port.c **** #elif defined( portUSE_TIMER3 )
 124:../freeRTOS750/portable/port.c **** /* Hardware constants for Timer3. */
 125:../freeRTOS750/portable/port.c **** 	#warning "Timer3 used for scheduler."
 126:../freeRTOS750/portable/port.c **** 	#define	TIMER_COMPA_ISR							TIMER3_COMPA_vect
 127:../freeRTOS750/portable/port.c **** 	#define portCLEAR_COUNTER_ON_MATCH			    ( ( unsigned portCHAR ) (1<<WGM32) )
 128:../freeRTOS750/portable/port.c **** 	#define portPRESCALE_64				            ( ( unsigned portCHAR ) ((1<<CS31)|(1<<CS30)) )
 129:../freeRTOS750/portable/port.c **** 	#define portCLOCK_PRESCALER				        ( ( unsigned portLONG ) 64 )
 130:../freeRTOS750/portable/port.c **** 	#define portCOMPARE_MATCH_A_INTERRUPT_ENABLE	( ( unsigned portCHAR ) (1<<OCIE3A) )
 131:../freeRTOS750/portable/port.c **** 	#define portOCRL                              	OCR3AL
 132:../freeRTOS750/portable/port.c **** 	#define portOCRH                                OCR3AH
 133:../freeRTOS750/portable/port.c **** 	#define portTCCRa                               TCCR3A
 134:../freeRTOS750/portable/port.c **** 	#define portTCCRb                              	TCCR3B
 135:../freeRTOS750/portable/port.c **** 	#define portTIMSK                               TIMSK3
 136:../freeRTOS750/portable/port.c **** 
 137:../freeRTOS750/portable/port.c **** #endif
 138:../freeRTOS750/portable/port.c **** 
 139:../freeRTOS750/portable/port.c **** /*-----------------------------------------------------------*/
 140:../freeRTOS750/portable/port.c **** 
 141:../freeRTOS750/portable/port.c **** /* We require the address of the pxCurrentTCB variable, but don't want to know
 142:../freeRTOS750/portable/port.c **** any details of its type. */
 143:../freeRTOS750/portable/port.c **** typedef void tskTCB;
 144:../freeRTOS750/portable/port.c **** extern volatile tskTCB * volatile pxCurrentTCB;
 145:../freeRTOS750/portable/port.c **** 
 146:../freeRTOS750/portable/port.c **** /* actual number of ticks per second from the RTC Timer2 32,768Hz, after configuration. */
 147:../freeRTOS750/portable/port.c **** static portTickType portTickRateHz;
 148:../freeRTOS750/portable/port.c **** 
 149:../freeRTOS750/portable/port.c **** /* remaining ticks in each second, decremented to enable the system_tick. */
 150:../freeRTOS750/portable/port.c **** static portTickType ticksRemainingInSec;
 151:../freeRTOS750/portable/port.c **** 
 152:../freeRTOS750/portable/port.c **** /*-----------------------------------------------------------*/
 153:../freeRTOS750/portable/port.c **** 
 154:../freeRTOS750/portable/port.c **** /*
 155:../freeRTOS750/portable/port.c ****  * Macro to save all the general purpose registers, the save the stack pointer
 156:../freeRTOS750/portable/port.c ****  * into the TCB.
 157:../freeRTOS750/portable/port.c ****  *
 158:../freeRTOS750/portable/port.c ****  * The first thing we do is save the flags then disable interrupts.  This is to
 159:../freeRTOS750/portable/port.c ****  * guard our stack against having a context switch interrupt after we have already
 160:../freeRTOS750/portable/port.c ****  * pushed the registers onto the stack - causing the 32 registers to be on the
 161:../freeRTOS750/portable/port.c ****  * stack twice.
 162:../freeRTOS750/portable/port.c ****  *
 163:../freeRTOS750/portable/port.c ****  * r1 is set to zero as the compiler expects it to be thus, however some
 164:../freeRTOS750/portable/port.c ****  * of the math routines make use of R1.
 165:../freeRTOS750/portable/port.c ****  *
 166:../freeRTOS750/portable/port.c ****  * The interrupts will have been disabled during the call to portSAVE_CONTEXT()
 167:../freeRTOS750/portable/port.c ****  * so we need not worry about reading/writing to the stack pointer.
 168:../freeRTOS750/portable/port.c ****  */
 169:../freeRTOS750/portable/port.c **** #if defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)
 170:../freeRTOS750/portable/port.c **** /* 3-Byte PC Save */
 171:../freeRTOS750/portable/port.c **** #define portSAVE_CONTEXT()									\
 172:../freeRTOS750/portable/port.c **** 	asm volatile (	"push	r0						\n\t"	\
 173:../freeRTOS750/portable/port.c **** 					"in		r0, __SREG__			\n\t"	\
 174:../freeRTOS750/portable/port.c **** 					"cli							\n\t"	\
 175:../freeRTOS750/portable/port.c **** 					"push	r0						\n\t"	\
 176:../freeRTOS750/portable/port.c **** 					"in		r0, 0x3b				\n\t"	\
 177:../freeRTOS750/portable/port.c **** 					"push	r0						\n\t"	\
 178:../freeRTOS750/portable/port.c **** 					"in		r0, 0x3c				\n\t"	\
 179:../freeRTOS750/portable/port.c **** 					"push	r0						\n\t"	\
 180:../freeRTOS750/portable/port.c **** 					"push	r1						\n\t"	\
 181:../freeRTOS750/portable/port.c **** 					"clr	r1						\n\t"	\
 182:../freeRTOS750/portable/port.c **** 					"push	r2						\n\t"	\
 183:../freeRTOS750/portable/port.c **** 					"push	r3						\n\t"	\
 184:../freeRTOS750/portable/port.c **** 					"push	r4						\n\t"	\
 185:../freeRTOS750/portable/port.c **** 					"push	r5						\n\t"	\
 186:../freeRTOS750/portable/port.c **** 					"push	r6						\n\t"	\
 187:../freeRTOS750/portable/port.c **** 					"push	r7						\n\t"	\
 188:../freeRTOS750/portable/port.c **** 					"push	r8						\n\t"	\
 189:../freeRTOS750/portable/port.c **** 					"push	r9						\n\t"	\
 190:../freeRTOS750/portable/port.c **** 					"push	r10						\n\t"	\
 191:../freeRTOS750/portable/port.c **** 					"push	r11						\n\t"	\
 192:../freeRTOS750/portable/port.c **** 					"push	r12						\n\t"	\
 193:../freeRTOS750/portable/port.c **** 					"push	r13						\n\t"	\
 194:../freeRTOS750/portable/port.c **** 					"push	r14						\n\t"	\
 195:../freeRTOS750/portable/port.c **** 					"push	r15						\n\t"	\
 196:../freeRTOS750/portable/port.c **** 					"push	r16						\n\t"	\
 197:../freeRTOS750/portable/port.c **** 					"push	r17						\n\t"	\
 198:../freeRTOS750/portable/port.c **** 					"push	r18						\n\t"	\
 199:../freeRTOS750/portable/port.c **** 					"push	r19						\n\t"	\
 200:../freeRTOS750/portable/port.c **** 					"push	r20						\n\t"	\
 201:../freeRTOS750/portable/port.c **** 					"push	r21						\n\t"	\
 202:../freeRTOS750/portable/port.c **** 					"push	r22						\n\t"	\
 203:../freeRTOS750/portable/port.c **** 					"push	r23						\n\t"	\
 204:../freeRTOS750/portable/port.c **** 					"push	r24						\n\t"	\
 205:../freeRTOS750/portable/port.c **** 					"push	r25						\n\t"	\
 206:../freeRTOS750/portable/port.c **** 					"push	r26						\n\t"	\
 207:../freeRTOS750/portable/port.c **** 					"push	r27						\n\t"	\
 208:../freeRTOS750/portable/port.c **** 					"push	r28						\n\t"	\
 209:../freeRTOS750/portable/port.c **** 					"push	r29						\n\t"	\
 210:../freeRTOS750/portable/port.c **** 					"push	r30						\n\t"	\
 211:../freeRTOS750/portable/port.c **** 					"push	r31						\n\t"	\
 212:../freeRTOS750/portable/port.c **** 					"lds	r26, pxCurrentTCB		\n\t"	\
 213:../freeRTOS750/portable/port.c **** 					"lds	r27, pxCurrentTCB + 1	\n\t"	\
 214:../freeRTOS750/portable/port.c **** 					"in		r0, 0x3d				\n\t"	\
 215:../freeRTOS750/portable/port.c **** 					"st		x+, r0					\n\t"	\
 216:../freeRTOS750/portable/port.c **** 					"in		r0, 0x3e				\n\t"	\
 217:../freeRTOS750/portable/port.c **** 					"st		x+, r0					\n\t"	\
 218:../freeRTOS750/portable/port.c **** 				);
 219:../freeRTOS750/portable/port.c **** #else
 220:../freeRTOS750/portable/port.c **** /* 2-Byte PC Save */
 221:../freeRTOS750/portable/port.c **** #define portSAVE_CONTEXT()									\
 222:../freeRTOS750/portable/port.c **** 	asm volatile (	"push	r0						\n\t"	\
 223:../freeRTOS750/portable/port.c **** 					"in		r0, __SREG__			\n\t"	\
 224:../freeRTOS750/portable/port.c **** 					"cli							\n\t"	\
 225:../freeRTOS750/portable/port.c **** 					"push	r0						\n\t"	\
 226:../freeRTOS750/portable/port.c **** 					"push	r1						\n\t"	\
 227:../freeRTOS750/portable/port.c **** 					"clr	r1						\n\t"	\
 228:../freeRTOS750/portable/port.c **** 					"push	r2						\n\t"	\
 229:../freeRTOS750/portable/port.c **** 					"push	r3						\n\t"	\
 230:../freeRTOS750/portable/port.c **** 					"push	r4						\n\t"	\
 231:../freeRTOS750/portable/port.c **** 					"push	r5						\n\t"	\
 232:../freeRTOS750/portable/port.c **** 					"push	r6						\n\t"	\
 233:../freeRTOS750/portable/port.c **** 					"push	r7						\n\t"	\
 234:../freeRTOS750/portable/port.c **** 					"push	r8						\n\t"	\
 235:../freeRTOS750/portable/port.c **** 					"push	r9						\n\t"	\
 236:../freeRTOS750/portable/port.c **** 					"push	r10						\n\t"	\
 237:../freeRTOS750/portable/port.c **** 					"push	r11						\n\t"	\
 238:../freeRTOS750/portable/port.c **** 					"push	r12						\n\t"	\
 239:../freeRTOS750/portable/port.c **** 					"push	r13						\n\t"	\
 240:../freeRTOS750/portable/port.c **** 					"push	r14						\n\t"	\
 241:../freeRTOS750/portable/port.c **** 					"push	r15						\n\t"	\
 242:../freeRTOS750/portable/port.c **** 					"push	r16						\n\t"	\
 243:../freeRTOS750/portable/port.c **** 					"push	r17						\n\t"	\
 244:../freeRTOS750/portable/port.c **** 					"push	r18						\n\t"	\
 245:../freeRTOS750/portable/port.c **** 					"push	r19						\n\t"	\
 246:../freeRTOS750/portable/port.c **** 					"push	r20						\n\t"	\
 247:../freeRTOS750/portable/port.c **** 					"push	r21						\n\t"	\
 248:../freeRTOS750/portable/port.c **** 					"push	r22						\n\t"	\
 249:../freeRTOS750/portable/port.c **** 					"push	r23						\n\t"	\
 250:../freeRTOS750/portable/port.c **** 					"push	r24						\n\t"	\
 251:../freeRTOS750/portable/port.c **** 					"push	r25						\n\t"	\
 252:../freeRTOS750/portable/port.c **** 					"push	r26						\n\t"	\
 253:../freeRTOS750/portable/port.c **** 					"push	r27						\n\t"	\
 254:../freeRTOS750/portable/port.c **** 					"push	r28						\n\t"	\
 255:../freeRTOS750/portable/port.c **** 					"push	r29						\n\t"	\
 256:../freeRTOS750/portable/port.c **** 					"push	r30						\n\t"	\
 257:../freeRTOS750/portable/port.c **** 					"push	r31						\n\t"	\
 258:../freeRTOS750/portable/port.c **** 					"lds	r26, pxCurrentTCB		\n\t"	\
 259:../freeRTOS750/portable/port.c **** 					"lds	r27, pxCurrentTCB + 1	\n\t"	\
 260:../freeRTOS750/portable/port.c **** 					"in		r0, 0x3d				\n\t"	\
 261:../freeRTOS750/portable/port.c **** 					"st		x+, r0					\n\t"	\
 262:../freeRTOS750/portable/port.c **** 					"in		r0, 0x3e				\n\t"	\
 263:../freeRTOS750/portable/port.c **** 					"st		x+, r0					\n\t"	\
 264:../freeRTOS750/portable/port.c **** 				);
 265:../freeRTOS750/portable/port.c **** #endif
 266:../freeRTOS750/portable/port.c **** 
 267:../freeRTOS750/portable/port.c **** /*
 268:../freeRTOS750/portable/port.c ****  * Opposite to portSAVE_CONTEXT().  Interrupts will have been disabled during
 269:../freeRTOS750/portable/port.c ****  * the context save so we can write to the stack pointer.
 270:../freeRTOS750/portable/port.c ****  */
 271:../freeRTOS750/portable/port.c **** #if defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)
 272:../freeRTOS750/portable/port.c **** /* 3-Byte PC Restore */
 273:../freeRTOS750/portable/port.c **** #define portRESTORE_CONTEXT()								\
 274:../freeRTOS750/portable/port.c **** 	asm volatile (	"lds	r26, pxCurrentTCB		\n\t"	\
 275:../freeRTOS750/portable/port.c **** 					"lds	r27, pxCurrentTCB + 1	\n\t"	\
 276:../freeRTOS750/portable/port.c **** 					"ld		r28, x+					\n\t"	\
 277:../freeRTOS750/portable/port.c **** 					"out	__SP_L__, r28			\n\t"	\
 278:../freeRTOS750/portable/port.c **** 					"ld		r29, x+					\n\t"	\
 279:../freeRTOS750/portable/port.c **** 					"out	__SP_H__, r29			\n\t"	\
 280:../freeRTOS750/portable/port.c **** 					"pop	r31						\n\t"	\
 281:../freeRTOS750/portable/port.c **** 					"pop	r30						\n\t"	\
 282:../freeRTOS750/portable/port.c **** 					"pop	r29						\n\t"	\
 283:../freeRTOS750/portable/port.c **** 					"pop	r28						\n\t"	\
 284:../freeRTOS750/portable/port.c **** 					"pop	r27						\n\t"	\
 285:../freeRTOS750/portable/port.c **** 					"pop	r26						\n\t"	\
 286:../freeRTOS750/portable/port.c **** 					"pop	r25						\n\t"	\
 287:../freeRTOS750/portable/port.c **** 					"pop	r24						\n\t"	\
 288:../freeRTOS750/portable/port.c **** 					"pop	r23						\n\t"	\
 289:../freeRTOS750/portable/port.c **** 					"pop	r22						\n\t"	\
 290:../freeRTOS750/portable/port.c **** 					"pop	r21						\n\t"	\
 291:../freeRTOS750/portable/port.c **** 					"pop	r20						\n\t"	\
 292:../freeRTOS750/portable/port.c **** 					"pop	r19						\n\t"	\
 293:../freeRTOS750/portable/port.c **** 					"pop	r18						\n\t"	\
 294:../freeRTOS750/portable/port.c **** 					"pop	r17						\n\t"	\
 295:../freeRTOS750/portable/port.c **** 					"pop	r16						\n\t"	\
 296:../freeRTOS750/portable/port.c **** 					"pop	r15						\n\t"	\
 297:../freeRTOS750/portable/port.c **** 					"pop	r14						\n\t"	\
 298:../freeRTOS750/portable/port.c **** 					"pop	r13						\n\t"	\
 299:../freeRTOS750/portable/port.c **** 					"pop	r12						\n\t"	\
 300:../freeRTOS750/portable/port.c **** 					"pop	r11						\n\t"	\
 301:../freeRTOS750/portable/port.c **** 					"pop	r10						\n\t"	\
 302:../freeRTOS750/portable/port.c **** 					"pop	r9						\n\t"	\
 303:../freeRTOS750/portable/port.c **** 					"pop	r8						\n\t"	\
 304:../freeRTOS750/portable/port.c **** 					"pop	r7						\n\t"	\
 305:../freeRTOS750/portable/port.c **** 					"pop	r6						\n\t"	\
 306:../freeRTOS750/portable/port.c **** 					"pop	r5						\n\t"	\
 307:../freeRTOS750/portable/port.c **** 					"pop	r4						\n\t"	\
 308:../freeRTOS750/portable/port.c **** 					"pop	r3						\n\t"	\
 309:../freeRTOS750/portable/port.c **** 					"pop	r2						\n\t"	\
 310:../freeRTOS750/portable/port.c **** 					"pop	r1						\n\t"	\
 311:../freeRTOS750/portable/port.c **** 					"pop	r0						\n\t"	\
 312:../freeRTOS750/portable/port.c **** 					"out	0x3c, r0				\n\t"	\
 313:../freeRTOS750/portable/port.c **** 					"pop	r0						\n\t"	\
 314:../freeRTOS750/portable/port.c **** 					"out	0x3b, r0				\n\t"	\
 315:../freeRTOS750/portable/port.c **** 					"pop	r0						\n\t"	\
 316:../freeRTOS750/portable/port.c **** 					"out	__SREG__, r0			\n\t"	\
 317:../freeRTOS750/portable/port.c **** 					"pop	r0						\n\t"	\
 318:../freeRTOS750/portable/port.c **** 				);
 319:../freeRTOS750/portable/port.c **** #else
 320:../freeRTOS750/portable/port.c **** /* 2-Byte PC Restore */
 321:../freeRTOS750/portable/port.c **** #define portRESTORE_CONTEXT()								\
 322:../freeRTOS750/portable/port.c **** 	asm volatile (	"lds	r26, pxCurrentTCB		\n\t"	\
 323:../freeRTOS750/portable/port.c **** 					"lds	r27, pxCurrentTCB + 1	\n\t"	\
 324:../freeRTOS750/portable/port.c **** 					"ld		r28, x+					\n\t"	\
 325:../freeRTOS750/portable/port.c **** 					"out	__SP_L__, r28			\n\t"	\
 326:../freeRTOS750/portable/port.c **** 					"ld		r29, x+					\n\t"	\
 327:../freeRTOS750/portable/port.c **** 					"out	__SP_H__, r29			\n\t"	\
 328:../freeRTOS750/portable/port.c **** 					"pop	r31						\n\t"	\
 329:../freeRTOS750/portable/port.c **** 					"pop	r30						\n\t"	\
 330:../freeRTOS750/portable/port.c **** 					"pop	r29						\n\t"	\
 331:../freeRTOS750/portable/port.c **** 					"pop	r28						\n\t"	\
 332:../freeRTOS750/portable/port.c **** 					"pop	r27						\n\t"	\
 333:../freeRTOS750/portable/port.c **** 					"pop	r26						\n\t"	\
 334:../freeRTOS750/portable/port.c **** 					"pop	r25						\n\t"	\
 335:../freeRTOS750/portable/port.c **** 					"pop	r24						\n\t"	\
 336:../freeRTOS750/portable/port.c **** 					"pop	r23						\n\t"	\
 337:../freeRTOS750/portable/port.c **** 					"pop	r22						\n\t"	\
 338:../freeRTOS750/portable/port.c **** 					"pop	r21						\n\t"	\
 339:../freeRTOS750/portable/port.c **** 					"pop	r20						\n\t"	\
 340:../freeRTOS750/portable/port.c **** 					"pop	r19						\n\t"	\
 341:../freeRTOS750/portable/port.c **** 					"pop	r18						\n\t"	\
 342:../freeRTOS750/portable/port.c **** 					"pop	r17						\n\t"	\
 343:../freeRTOS750/portable/port.c **** 					"pop	r16						\n\t"	\
 344:../freeRTOS750/portable/port.c **** 					"pop	r15						\n\t"	\
 345:../freeRTOS750/portable/port.c **** 					"pop	r14						\n\t"	\
 346:../freeRTOS750/portable/port.c **** 					"pop	r13						\n\t"	\
 347:../freeRTOS750/portable/port.c **** 					"pop	r12						\n\t"	\
 348:../freeRTOS750/portable/port.c **** 					"pop	r11						\n\t"	\
 349:../freeRTOS750/portable/port.c **** 					"pop	r10						\n\t"	\
 350:../freeRTOS750/portable/port.c **** 					"pop	r9						\n\t"	\
 351:../freeRTOS750/portable/port.c **** 					"pop	r8						\n\t"	\
 352:../freeRTOS750/portable/port.c **** 					"pop	r7						\n\t"	\
 353:../freeRTOS750/portable/port.c **** 					"pop	r6						\n\t"	\
 354:../freeRTOS750/portable/port.c **** 					"pop	r5						\n\t"	\
 355:../freeRTOS750/portable/port.c **** 					"pop	r4						\n\t"	\
 356:../freeRTOS750/portable/port.c **** 					"pop	r3						\n\t"	\
 357:../freeRTOS750/portable/port.c **** 					"pop	r2						\n\t"	\
 358:../freeRTOS750/portable/port.c **** 					"pop	r1						\n\t"	\
 359:../freeRTOS750/portable/port.c **** 					"pop	r0						\n\t"	\
 360:../freeRTOS750/portable/port.c **** 					"out	__SREG__, r0			\n\t"	\
 361:../freeRTOS750/portable/port.c **** 					"pop	r0						\n\t"	\
 362:../freeRTOS750/portable/port.c **** 				);
 363:../freeRTOS750/portable/port.c **** #endif
 364:../freeRTOS750/portable/port.c **** /*-----------------------------------------------------------*/
 365:../freeRTOS750/portable/port.c **** 
 366:../freeRTOS750/portable/port.c **** /*
 367:../freeRTOS750/portable/port.c ****  * Perform hardware setup to enable ticks from timer compare match A.
 368:../freeRTOS750/portable/port.c ****  */
 369:../freeRTOS750/portable/port.c **** static void prvSetupTimerInterrupt( void );
 370:../freeRTOS750/portable/port.c **** /*-----------------------------------------------------------*/
 371:../freeRTOS750/portable/port.c **** 
 372:../freeRTOS750/portable/port.c **** /*
 373:../freeRTOS750/portable/port.c ****  * See header file for description.
 374:../freeRTOS750/portable/port.c ****  */
 375:../freeRTOS750/portable/port.c **** portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvPa
 376:../freeRTOS750/portable/port.c **** {
 134               	.LM0:
 135               	.LFBB1:
 136               	/* prologue: function */
 137               	/* frame size = 0 */
 138               	/* stack size = 0 */
 139               	.L__stack_usage = 0
 377:../freeRTOS750/portable/port.c **** unsigned short usAddress;
 378:../freeRTOS750/portable/port.c **** 
 379:../freeRTOS750/portable/port.c **** #if defined (portQUAD_RAM) || defined (portMEGA_RAM)
 380:../freeRTOS750/portable/port.c **** 	// This function just here to ensure the library is included.
 381:../freeRTOS750/portable/port.c **** 	// Can go anywhere, as it is just to ensure that the .init3 code is included
 382:../freeRTOS750/portable/port.c **** 	extRAMcheck(); // This function just returns XMCRA. SRE is set if extended RAM enabled.
 383:../freeRTOS750/portable/port.c **** #warning "Ext RAM Enabled."
 384:../freeRTOS750/portable/port.c **** #endif
 385:../freeRTOS750/portable/port.c **** 
 386:../freeRTOS750/portable/port.c **** 	/* Place a few bytes of known values on the bottom of the stack.
 387:../freeRTOS750/portable/port.c **** 	This is just useful for debugging. */
 388:../freeRTOS750/portable/port.c **** 
 389:../freeRTOS750/portable/port.c **** 	*pxTopOfStack = 0x11;
 141               	.LM1:
 142 0000 31E1      		ldi r19,lo8(17)
 143 0002 FC01      		movw r30,r24
 144 0004 3083      		st Z,r19
 390:../freeRTOS750/portable/port.c **** 	pxTopOfStack--;
 391:../freeRTOS750/portable/port.c **** 	*pxTopOfStack = 0x22;
 146               	.LM2:
 147 0006 3197      		sbiw r30,1
 148 0008 22E2      		ldi r18,lo8(34)
 149 000a 2083      		st Z,r18
 392:../freeRTOS750/portable/port.c **** 	pxTopOfStack--;
 393:../freeRTOS750/portable/port.c **** 	*pxTopOfStack = 0x33;
 151               	.LM3:
 152 000c FC01      		movw r30,r24
 153 000e 3297      		sbiw r30,2
 154 0010 A3E3      		ldi r26,lo8(51)
 155 0012 A083      		st Z,r26
 394:../freeRTOS750/portable/port.c **** 	pxTopOfStack--;
 395:../freeRTOS750/portable/port.c **** 
 396:../freeRTOS750/portable/port.c **** 	/* Simulate how the stack would look after a call to vPortYield() generated by
 397:../freeRTOS750/portable/port.c **** 	the compiler. */
 398:../freeRTOS750/portable/port.c **** 
 399:../freeRTOS750/portable/port.c **** 	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */
 400:../freeRTOS750/portable/port.c **** 
 401:../freeRTOS750/portable/port.c **** 	/* The start of the task code will be popped off the stack last, so place
 402:../freeRTOS750/portable/port.c **** 	it on first. */
 403:../freeRTOS750/portable/port.c **** 
 404:../freeRTOS750/portable/port.c **** #if defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)
 405:../freeRTOS750/portable/port.c **** 	/* The AVR ATmega2560/ATmega2561 have 256KBytes of program memory and a 17-bit
 406:../freeRTOS750/portable/port.c **** 	 * program counter.  When a code address is stored on the stack, it takes 3 bytes
 407:../freeRTOS750/portable/port.c **** 	 * instead of 2 for the other ATmega* chips.
 408:../freeRTOS750/portable/port.c **** 	 *
 409:../freeRTOS750/portable/port.c **** 	 * Store 0 as the top byte since we force all task routines to the bottom 128K
 410:../freeRTOS750/portable/port.c **** 	 * of flash. We do this by adding the .task label in the linker script.
 411:../freeRTOS750/portable/port.c **** 	 *
 412:../freeRTOS750/portable/port.c **** 	 * In order to do this properly, we would need to get a full 3-byte pointer to
 413:../freeRTOS750/portable/port.c **** 	 * pxCode.  That requires a change to GCC.  Not likely to happen any time soon.
 414:../freeRTOS750/portable/port.c **** 	 */
 415:../freeRTOS750/portable/port.c **** 	usAddress = ( unsigned portSHORT ) pxCode;
 416:../freeRTOS750/portable/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned portSHORT ) 0x00ff );
 417:../freeRTOS750/portable/port.c **** 	pxTopOfStack--;
 418:../freeRTOS750/portable/port.c **** 
 419:../freeRTOS750/portable/port.c **** 	usAddress >>= 8;
 420:../freeRTOS750/portable/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned portSHORT ) 0x00ff );
 421:../freeRTOS750/portable/port.c **** 	pxTopOfStack--;
 422:../freeRTOS750/portable/port.c **** 
 423:../freeRTOS750/portable/port.c **** 	*pxTopOfStack = 0;
 424:../freeRTOS750/portable/port.c **** 	pxTopOfStack--;
 425:../freeRTOS750/portable/port.c **** #else
 426:../freeRTOS750/portable/port.c **** 	usAddress = ( unsigned short ) pxCode;
 427:../freeRTOS750/portable/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
 157               	.LM4:
 158 0014 FC01      		movw r30,r24
 159 0016 3397      		sbiw r30,3
 160 0018 6083      		st Z,r22
 428:../freeRTOS750/portable/port.c **** 	pxTopOfStack--;
 429:../freeRTOS750/portable/port.c **** 
 430:../freeRTOS750/portable/port.c **** 	usAddress >>= 8;
 431:../freeRTOS750/portable/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
 162               	.LM5:
 163 001a FC01      		movw r30,r24
 164 001c 3497      		sbiw r30,4
 165 001e 7083      		st Z,r23
 432:../freeRTOS750/portable/port.c **** 	pxTopOfStack--;
 433:../freeRTOS750/portable/port.c **** #endif
 434:../freeRTOS750/portable/port.c **** 
 435:../freeRTOS750/portable/port.c **** 	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().
 436:../freeRTOS750/portable/port.c **** 	portSAVE_CONTEXT places the flags on the stack immediately after r0
 437:../freeRTOS750/portable/port.c **** 	to ensure the interrupts get disabled as soon as possible, and so ensuring
 438:../freeRTOS750/portable/port.c **** 	the stack use is minimal should a context switch interrupt occur. */
 439:../freeRTOS750/portable/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R0 */
 167               	.LM6:
 168 0020 FC01      		movw r30,r24
 169 0022 3597      		sbiw r30,5
 170 0024 1082      		st Z,__zero_reg__
 440:../freeRTOS750/portable/port.c **** 	pxTopOfStack--;
 441:../freeRTOS750/portable/port.c **** 	*pxTopOfStack = portFLAGS_INT_ENABLED;
 172               	.LM7:
 173 0026 FC01      		movw r30,r24
 174 0028 3697      		sbiw r30,6
 175 002a 60E8      		ldi r22,lo8(-128)
 176 002c 6083      		st Z,r22
 442:../freeRTOS750/portable/port.c **** 	pxTopOfStack--;
 443:../freeRTOS750/portable/port.c **** 
 444:../freeRTOS750/portable/port.c **** #if defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)
 445:../freeRTOS750/portable/port.c **** 
 446:../freeRTOS750/portable/port.c **** 	/* If we have an ATmega256x, we are also saving the RAMPZ and EIND registers.
 447:../freeRTOS750/portable/port.c **** 	 * We should default those to 0.
 448:../freeRTOS750/portable/port.c **** 	 */
 449:../freeRTOS750/portable/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* EIND */
 450:../freeRTOS750/portable/port.c **** 	pxTopOfStack--;
 451:../freeRTOS750/portable/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* RAMPZ */
 452:../freeRTOS750/portable/port.c **** 	pxTopOfStack--;
 453:../freeRTOS750/portable/port.c **** 
 454:../freeRTOS750/portable/port.c **** #endif
 455:../freeRTOS750/portable/port.c **** 
 456:../freeRTOS750/portable/port.c **** 	/* Now the remaining registers.   The compiler expects R1 to be 0. */
 457:../freeRTOS750/portable/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R1 */
 178               	.LM8:
 179 002e FC01      		movw r30,r24
 180 0030 3797      		sbiw r30,7
 181 0032 1082      		st Z,__zero_reg__
 458:../freeRTOS750/portable/port.c **** 	pxTopOfStack--;
 459:../freeRTOS750/portable/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) 0x02;	/* R2 */
 183               	.LM9:
 184 0034 FC01      		movw r30,r24
 185 0036 3897      		sbiw r30,8
 186 0038 62E0      		ldi r22,lo8(2)
 187 003a 6083      		st Z,r22
 460:../freeRTOS750/portable/port.c **** 	pxTopOfStack--;
 461:../freeRTOS750/portable/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) 0x03;	/* R3 */
 189               	.LM10:
 190 003c FC01      		movw r30,r24
 191 003e 3997      		sbiw r30,9
 192 0040 63E0      		ldi r22,lo8(3)
 193 0042 6083      		st Z,r22
 462:../freeRTOS750/portable/port.c **** 	pxTopOfStack--;
 463:../freeRTOS750/portable/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) 0x04;	/* R4 */
 195               	.LM11:
 196 0044 FC01      		movw r30,r24
 197 0046 3A97      		sbiw r30,10
 198 0048 64E0      		ldi r22,lo8(4)
 199 004a 6083      		st Z,r22
 464:../freeRTOS750/portable/port.c **** 	pxTopOfStack--;
 465:../freeRTOS750/portable/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) 0x05;	/* R5 */
 201               	.LM12:
 202 004c FC01      		movw r30,r24
 203 004e 3B97      		sbiw r30,11
 204 0050 65E0      		ldi r22,lo8(5)
 205 0052 6083      		st Z,r22
 466:../freeRTOS750/portable/port.c **** 	pxTopOfStack--;
 467:../freeRTOS750/portable/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) 0x06;	/* R6 */
 207               	.LM13:
 208 0054 FC01      		movw r30,r24
 209 0056 3C97      		sbiw r30,12
 210 0058 66E0      		ldi r22,lo8(6)
 211 005a 6083      		st Z,r22
 468:../freeRTOS750/portable/port.c **** 	pxTopOfStack--;
 469:../freeRTOS750/portable/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) 0x07;	/* R7 */
 213               	.LM14:
 214 005c FC01      		movw r30,r24
 215 005e 3D97      		sbiw r30,13
 216 0060 67E0      		ldi r22,lo8(7)
 217 0062 6083      		st Z,r22
 470:../freeRTOS750/portable/port.c **** 	pxTopOfStack--;
 471:../freeRTOS750/portable/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) 0x08;	/* R8 */
 219               	.LM15:
 220 0064 FC01      		movw r30,r24
 221 0066 3E97      		sbiw r30,14
 222 0068 68E0      		ldi r22,lo8(8)
 223 006a 6083      		st Z,r22
 472:../freeRTOS750/portable/port.c **** 	pxTopOfStack--;
 473:../freeRTOS750/portable/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) 0x09;	/* R9 */
 225               	.LM16:
 226 006c FC01      		movw r30,r24
 227 006e 3F97      		sbiw r30,15
 228 0070 69E0      		ldi r22,lo8(9)
 229 0072 6083      		st Z,r22
 474:../freeRTOS750/portable/port.c **** 	pxTopOfStack--;
 475:../freeRTOS750/portable/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) 0x10;	/* R10 */
 231               	.LM17:
 232 0074 FC01      		movw r30,r24
 233 0076 7097      		sbiw r30,16
 234 0078 60E1      		ldi r22,lo8(16)
 235 007a 6083      		st Z,r22
 476:../freeRTOS750/portable/port.c **** 	pxTopOfStack--;
 477:../freeRTOS750/portable/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) 0x11;	/* R11 */
 237               	.LM18:
 238 007c FC01      		movw r30,r24
 239 007e 7197      		sbiw r30,17
 240 0080 3083      		st Z,r19
 478:../freeRTOS750/portable/port.c **** 	pxTopOfStack--;
 479:../freeRTOS750/portable/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) 0x12;	/* R12 */
 242               	.LM19:
 243 0082 FC01      		movw r30,r24
 244 0084 7297      		sbiw r30,18
 245 0086 32E1      		ldi r19,lo8(18)
 246 0088 3083      		st Z,r19
 480:../freeRTOS750/portable/port.c **** 	pxTopOfStack--;
 481:../freeRTOS750/portable/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) 0x13;	/* R13 */
 248               	.LM20:
 249 008a FC01      		movw r30,r24
 250 008c 7397      		sbiw r30,19
 251 008e 33E1      		ldi r19,lo8(19)
 252 0090 3083      		st Z,r19
 482:../freeRTOS750/portable/port.c **** 	pxTopOfStack--;
 483:../freeRTOS750/portable/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) 0x14;	/* R14 */
 254               	.LM21:
 255 0092 FC01      		movw r30,r24
 256 0094 7497      		sbiw r30,20
 257 0096 34E1      		ldi r19,lo8(20)
 258 0098 3083      		st Z,r19
 484:../freeRTOS750/portable/port.c **** 	pxTopOfStack--;
 485:../freeRTOS750/portable/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) 0x15;	/* R15 */
 260               	.LM22:
 261 009a FC01      		movw r30,r24
 262 009c 7597      		sbiw r30,21
 263 009e 35E1      		ldi r19,lo8(21)
 264 00a0 3083      		st Z,r19
 486:../freeRTOS750/portable/port.c **** 	pxTopOfStack--;
 487:../freeRTOS750/portable/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) 0x16;	/* R16 */
 266               	.LM23:
 267 00a2 FC01      		movw r30,r24
 268 00a4 7697      		sbiw r30,22
 269 00a6 36E1      		ldi r19,lo8(22)
 270 00a8 3083      		st Z,r19
 488:../freeRTOS750/portable/port.c **** 	pxTopOfStack--;
 489:../freeRTOS750/portable/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) 0x17;	/* R17 */
 272               	.LM24:
 273 00aa FC01      		movw r30,r24
 274 00ac 7797      		sbiw r30,23
 275 00ae 37E1      		ldi r19,lo8(23)
 276 00b0 3083      		st Z,r19
 490:../freeRTOS750/portable/port.c **** 	pxTopOfStack--;
 491:../freeRTOS750/portable/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) 0x18;	/* R18 */
 278               	.LM25:
 279 00b2 FC01      		movw r30,r24
 280 00b4 7897      		sbiw r30,24
 281 00b6 38E1      		ldi r19,lo8(24)
 282 00b8 3083      		st Z,r19
 492:../freeRTOS750/portable/port.c **** 	pxTopOfStack--;
 493:../freeRTOS750/portable/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) 0x19;	/* R19 */
 284               	.LM26:
 285 00ba FC01      		movw r30,r24
 286 00bc 7997      		sbiw r30,25
 287 00be 39E1      		ldi r19,lo8(25)
 288 00c0 3083      		st Z,r19
 494:../freeRTOS750/portable/port.c **** 	pxTopOfStack--;
 495:../freeRTOS750/portable/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) 0x20;	/* R20 */
 290               	.LM27:
 291 00c2 FC01      		movw r30,r24
 292 00c4 7A97      		sbiw r30,26
 293 00c6 30E2      		ldi r19,lo8(32)
 294 00c8 3083      		st Z,r19
 496:../freeRTOS750/portable/port.c **** 	pxTopOfStack--;
 497:../freeRTOS750/portable/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) 0x21;	/* R21 */
 296               	.LM28:
 297 00ca FC01      		movw r30,r24
 298 00cc 7B97      		sbiw r30,27
 299 00ce 31E2      		ldi r19,lo8(33)
 300 00d0 3083      		st Z,r19
 498:../freeRTOS750/portable/port.c **** 	pxTopOfStack--;
 499:../freeRTOS750/portable/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) 0x22;	/* R22 */
 302               	.LM29:
 303 00d2 FC01      		movw r30,r24
 304 00d4 7C97      		sbiw r30,28
 305 00d6 2083      		st Z,r18
 500:../freeRTOS750/portable/port.c **** 	pxTopOfStack--;
 501:../freeRTOS750/portable/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) 0x23;	/* R23 */
 307               	.LM30:
 308 00d8 FC01      		movw r30,r24
 309 00da 7D97      		sbiw r30,29
 310 00dc 23E2      		ldi r18,lo8(35)
 311 00de 2083      		st Z,r18
 502:../freeRTOS750/portable/port.c **** 	pxTopOfStack--;
 503:../freeRTOS750/portable/port.c **** 
 504:../freeRTOS750/portable/port.c **** 	/* Place the parameter on the stack in the expected location. */
 505:../freeRTOS750/portable/port.c **** 	usAddress = ( unsigned short ) pvParameters;
 506:../freeRTOS750/portable/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
 313               	.LM31:
 314 00e0 FC01      		movw r30,r24
 315 00e2 7E97      		sbiw r30,30
 316 00e4 4083      		st Z,r20
 507:../freeRTOS750/portable/port.c **** 	pxTopOfStack--;
 508:../freeRTOS750/portable/port.c **** 
 509:../freeRTOS750/portable/port.c **** 	usAddress >>= 8;
 510:../freeRTOS750/portable/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
 318               	.LM32:
 319 00e6 FC01      		movw r30,r24
 320 00e8 7F97      		sbiw r30,31
 321 00ea 5083      		st Z,r21
 511:../freeRTOS750/portable/port.c **** 	pxTopOfStack--;
 512:../freeRTOS750/portable/port.c **** 
 513:../freeRTOS750/portable/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) 0x26;	/* R26 X */
 323               	.LM33:
 324 00ec FC01      		movw r30,r24
 325 00ee B097      		sbiw r30,32
 326 00f0 26E2      		ldi r18,lo8(38)
 327 00f2 2083      		st Z,r18
 514:../freeRTOS750/portable/port.c **** 	pxTopOfStack--;
 515:../freeRTOS750/portable/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) 0x27;	/* R27 */
 329               	.LM34:
 330 00f4 FC01      		movw r30,r24
 331 00f6 B197      		sbiw r30,33
 332 00f8 27E2      		ldi r18,lo8(39)
 333 00fa 2083      		st Z,r18
 516:../freeRTOS750/portable/port.c **** 	pxTopOfStack--;
 517:../freeRTOS750/portable/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) 0x28;	/* R28 Y */
 335               	.LM35:
 336 00fc FC01      		movw r30,r24
 337 00fe B297      		sbiw r30,34
 338 0100 28E2      		ldi r18,lo8(40)
 339 0102 2083      		st Z,r18
 518:../freeRTOS750/portable/port.c **** 	pxTopOfStack--;
 519:../freeRTOS750/portable/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) 0x29;	/* R29 */
 341               	.LM36:
 342 0104 FC01      		movw r30,r24
 343 0106 B397      		sbiw r30,35
 344 0108 29E2      		ldi r18,lo8(41)
 345 010a 2083      		st Z,r18
 520:../freeRTOS750/portable/port.c **** 	pxTopOfStack--;
 521:../freeRTOS750/portable/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) 0x30;	/* R30 Z */
 347               	.LM37:
 348 010c FC01      		movw r30,r24
 349 010e B497      		sbiw r30,36
 350 0110 20E3      		ldi r18,lo8(48)
 351 0112 2083      		st Z,r18
 522:../freeRTOS750/portable/port.c **** 	pxTopOfStack--;
 523:../freeRTOS750/portable/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) 0x031;	/* R31 */
 353               	.LM38:
 354 0114 FC01      		movw r30,r24
 355 0116 B597      		sbiw r30,37
 356 0118 21E3      		ldi r18,lo8(49)
 357 011a 2083      		st Z,r18
 524:../freeRTOS750/portable/port.c **** 	pxTopOfStack--;
 525:../freeRTOS750/portable/port.c **** 
 526:../freeRTOS750/portable/port.c **** 	/*lint +e950 +e611 +e923 */
 527:../freeRTOS750/portable/port.c **** 
 528:../freeRTOS750/portable/port.c **** 	return pxTopOfStack;
 359               	.LM39:
 360 011c 9C01      		movw r18,r24
 361 011e 2652      		subi r18,38
 362 0120 3109      		sbc r19,__zero_reg__
 529:../freeRTOS750/portable/port.c **** }
 364               	.LM40:
 365 0122 C901      		movw r24,r18
 366 0124 0895      		ret
 368               	.Lscope1:
 370               		.stabd	78,0,0
 372               	.global	xPortStartScheduler
 374               	xPortStartScheduler:
 375               		.stabd	46,0,0
 530:../freeRTOS750/portable/port.c **** /*-----------------------------------------------------------*/
 531:../freeRTOS750/portable/port.c **** 
 532:../freeRTOS750/portable/port.c **** portBASE_TYPE xPortStartScheduler( void )
 533:../freeRTOS750/portable/port.c **** {
 377               	.LM41:
 378               	.LFBB2:
 379               	/* prologue: function */
 380               	/* frame size = 0 */
 381               	/* stack size = 0 */
 382               	.L__stack_usage = 0
 383               	.LBB4:
 384               	.LBB5:
 534:../freeRTOS750/portable/port.c **** 	/* Setup the hardware to generate the tick. */
 535:../freeRTOS750/portable/port.c **** 	prvSetupTimerInterrupt();
 536:../freeRTOS750/portable/port.c **** 
 537:../freeRTOS750/portable/port.c **** 	/* Restore the context of the first task that is going to run. */
 538:../freeRTOS750/portable/port.c **** 	portRESTORE_CONTEXT();
 539:../freeRTOS750/portable/port.c **** 
 540:../freeRTOS750/portable/port.c **** 	/* Simulate a function call end as generated by the compiler.  We will now
 541:../freeRTOS750/portable/port.c **** 	jump to the start of the task the context of which we have just restored. */
 542:../freeRTOS750/portable/port.c **** 	asm volatile ( "ret" );
 543:../freeRTOS750/portable/port.c **** 
 544:../freeRTOS750/portable/port.c **** 	/* Should not get here. */
 545:../freeRTOS750/portable/port.c **** 	return pdTRUE;
 546:../freeRTOS750/portable/port.c **** }
 547:../freeRTOS750/portable/port.c **** /*-----------------------------------------------------------*/
 548:../freeRTOS750/portable/port.c **** 
 549:../freeRTOS750/portable/port.c **** void vPortEndScheduler( void )
 550:../freeRTOS750/portable/port.c **** {
 551:../freeRTOS750/portable/port.c **** 	/* It is unlikely that the AVR port will get stopped.  If required simply
 552:../freeRTOS750/portable/port.c **** 	disable the tick interrupt here. */
 553:../freeRTOS750/portable/port.c **** }
 554:../freeRTOS750/portable/port.c **** /*-----------------------------------------------------------*/
 555:../freeRTOS750/portable/port.c **** 
 556:../freeRTOS750/portable/port.c **** /*
 557:../freeRTOS750/portable/port.c ****  * Manual context switch.  The first thing we do is save the registers so we
 558:../freeRTOS750/portable/port.c ****  * can use a naked attribute.
 559:../freeRTOS750/portable/port.c ****  */
 560:../freeRTOS750/portable/port.c **** void vPortYield( void ) __attribute__ ( ( naked ) );
 561:../freeRTOS750/portable/port.c **** void vPortYield( void )
 562:../freeRTOS750/portable/port.c **** {
 563:../freeRTOS750/portable/port.c **** 	portSAVE_CONTEXT();
 564:../freeRTOS750/portable/port.c **** 	vTaskSwitchContext();
 565:../freeRTOS750/portable/port.c **** 	portRESTORE_CONTEXT();
 566:../freeRTOS750/portable/port.c **** 
 567:../freeRTOS750/portable/port.c **** 	asm volatile ( "ret" );
 568:../freeRTOS750/portable/port.c **** }
 569:../freeRTOS750/portable/port.c **** /*-----------------------------------------------------------*/
 570:../freeRTOS750/portable/port.c **** 
 571:../freeRTOS750/portable/port.c **** /*
 572:../freeRTOS750/portable/port.c ****  * Context switch function used by the tick.  This must be identical to
 573:../freeRTOS750/portable/port.c ****  * vPortYield() from the call to vTaskSwitchContext() onwards.  The only
 574:../freeRTOS750/portable/port.c ****  * difference from vPortYield() is the tick count is incremented as the
 575:../freeRTOS750/portable/port.c ****  * call comes from the tick ISR.
 576:../freeRTOS750/portable/port.c ****  */
 577:../freeRTOS750/portable/port.c **** void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
 578:../freeRTOS750/portable/port.c **** void vPortYieldFromTick( void )
 579:../freeRTOS750/portable/port.c **** {
 580:../freeRTOS750/portable/port.c **** 	portSAVE_CONTEXT();
 581:../freeRTOS750/portable/port.c **** 
 582:../freeRTOS750/portable/port.c **** 	if (--ticksRemainingInSec == 0)
 583:../freeRTOS750/portable/port.c **** 	{
 584:../freeRTOS750/portable/port.c **** 		system_tick();
 585:../freeRTOS750/portable/port.c **** 		ticksRemainingInSec = portTickRateHz;
 586:../freeRTOS750/portable/port.c **** 	}
 587:../freeRTOS750/portable/port.c **** 
 588:../freeRTOS750/portable/port.c **** 	if( xTaskIncrementTick() != pdFALSE )
 589:../freeRTOS750/portable/port.c **** 	{
 590:../freeRTOS750/portable/port.c **** 		vTaskSwitchContext();
 591:../freeRTOS750/portable/port.c **** 	}
 592:../freeRTOS750/portable/port.c **** 
 593:../freeRTOS750/portable/port.c **** 	portRESTORE_CONTEXT();
 594:../freeRTOS750/portable/port.c **** 
 595:../freeRTOS750/portable/port.c **** 	asm volatile ( "ret" );
 596:../freeRTOS750/portable/port.c **** }
 597:../freeRTOS750/portable/port.c **** /*-----------------------------------------------------------*/
 598:../freeRTOS750/portable/port.c **** 
 599:../freeRTOS750/portable/port.c **** #ifndef portUSE_TIMER2
 600:../freeRTOS750/portable/port.c **** /*
 601:../freeRTOS750/portable/port.c ****  * Setup timer 0 or 1 or 3 compare match A to generate a tick interrupt.
 602:../freeRTOS750/portable/port.c ****  */
 603:../freeRTOS750/portable/port.c **** static void prvSetupTimerInterrupt( void )
 604:../freeRTOS750/portable/port.c **** {
 605:../freeRTOS750/portable/port.c **** unsigned portLONG ulCompareMatch;
 606:../freeRTOS750/portable/port.c **** #ifdef portOCRH
 607:../freeRTOS750/portable/port.c **** unsigned portCHAR ucHighByte;
 608:../freeRTOS750/portable/port.c **** #endif
 609:../freeRTOS750/portable/port.c **** unsigned portCHAR ucLowByte;
 610:../freeRTOS750/portable/port.c **** 
 611:../freeRTOS750/portable/port.c ****     /* Using 8bit Timer0 or 16bit Timer1 or Timer3 to generate the tick. */
 612:../freeRTOS750/portable/port.c **** 
 613:../freeRTOS750/portable/port.c ****     // ulCompareMatch 40,000 = 20,000,000 / 500; 20MHz
 614:../freeRTOS750/portable/port.c ****     // ulCompareMatch 110,592 = 22,118,400 / 200; 22.1184 MHz
 615:../freeRTOS750/portable/port.c ****     ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
 616:../freeRTOS750/portable/port.c **** 
 617:../freeRTOS750/portable/port.c ****     /* We only have 8 or 16 bits so have to scale 64 or 256 to get our required tick rate. */
 618:../freeRTOS750/portable/port.c ****     //ulCompareMatch = 625 /= portCLOCK_PRESCALER; 20MHz with 64 prescale
 619:../freeRTOS750/portable/port.c ****     //ulCompareMatch = 108 /= portCLOCK_PRESCALER; 22.1184 MHz with 1024 prescale
 620:../freeRTOS750/portable/port.c ****     ulCompareMatch /= portCLOCK_PRESCALER;
 621:../freeRTOS750/portable/port.c **** 
 622:../freeRTOS750/portable/port.c ****  	/* actual port tick rate in Hz, calculated */
 623:../freeRTOS750/portable/port.c **** 	portTickRateHz = (portTickType) ((unsigned portLONG) configCPU_CLOCK_HZ / ( portCLOCK_PRESCALER * 
 386               	.LM42:
 387 0126 81E0      		ldi r24,lo8(1)
 388 0128 90E0      		ldi r25,0
 389 012a 9093 0000 		sts portTickRateHz+1,r25
 390 012e 8093 0000 		sts portTickRateHz,r24
 624:../freeRTOS750/portable/port.c **** 	/* initialise first second of ticks */
 625:../freeRTOS750/portable/port.c **** 	ticksRemainingInSec = portTickRateHz;
 392               	.LM43:
 393 0132 9093 0000 		sts ticksRemainingInSec+1,r25
 394 0136 8093 0000 		sts ticksRemainingInSec,r24
 626:../freeRTOS750/portable/port.c **** 
 627:../freeRTOS750/portable/port.c ****     /* Adjust for correct value. */
 628:../freeRTOS750/portable/port.c ****     ulCompareMatch -= 1;
 629:../freeRTOS750/portable/port.c **** 
 630:../freeRTOS750/portable/port.c ****     /* Setup compare match value for compare match A.  Interrupts are disabled
 631:../freeRTOS750/portable/port.c ****     before this is called so we need not worry here. */
 632:../freeRTOS750/portable/port.c ****     ucLowByte = ( unsigned portCHAR ) ( ulCompareMatch & ( unsigned portLONG ) 0xff );
 633:../freeRTOS750/portable/port.c **** 
 634:../freeRTOS750/portable/port.c ****     //  OCR3AH = ucHighByte;
 635:../freeRTOS750/portable/port.c ****     //  OCR3AL = ucLowByte;
 636:../freeRTOS750/portable/port.c **** 
 637:../freeRTOS750/portable/port.c ****     // the HiByte is only needed, if a 16 Bit counter is being utilized
 638:../freeRTOS750/portable/port.c **** #ifdef portOCRH
 639:../freeRTOS750/portable/port.c **** 
 640:../freeRTOS750/portable/port.c ****     ulCompareMatch >>= 8;
 641:../freeRTOS750/portable/port.c ****     ucHighByte = ( unsigned portCHAR ) ( ulCompareMatch & ( unsigned portLONG ) 0xff );
 642:../freeRTOS750/portable/port.c ****     portOCRH = ucHighByte;
 643:../freeRTOS750/portable/port.c **** 
 644:../freeRTOS750/portable/port.c **** #endif
 645:../freeRTOS750/portable/port.c **** 
 646:../freeRTOS750/portable/port.c ****     portOCRL = ucLowByte;
 396               	.LM44:
 397 013a 88E0      		ldi r24,lo8(8)
 398 013c 87BD      		out 0x27,r24
 647:../freeRTOS750/portable/port.c **** 
 648:../freeRTOS750/portable/port.c **** #if defined( portUSE_TIMER0 )
 649:../freeRTOS750/portable/port.c ****    /* Setup clock source and compare match behaviour. Assuming 328p (no Timer3) */
 650:../freeRTOS750/portable/port.c ****    portTCCRa = portCLEAR_COUNTER_ON_MATCH;
 400               	.LM45:
 401 013e 82E0      		ldi r24,lo8(2)
 402 0140 84BD      		out 0x24,r24
 651:../freeRTOS750/portable/port.c ****    portTCCRb = portPRESCALE_1024;
 404               	.LM46:
 405 0142 85E0      		ldi r24,lo8(5)
 406 0144 85BD      		out 0x25,r24
 652:../freeRTOS750/portable/port.c **** 
 653:../freeRTOS750/portable/port.c **** #elif defined( portUSE_TIMER1 )
 654:../freeRTOS750/portable/port.c **** 	/* Setup clock source and compare match behaviour. Assuming 328p (with Timer1) */
 655:../freeRTOS750/portable/port.c **** 	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
 656:../freeRTOS750/portable/port.c **** 	portTCCRb = ucLowByte;
 657:../freeRTOS750/portable/port.c **** 
 658:../freeRTOS750/portable/port.c **** #elif defined( portUSE_TIMER3 )
 659:../freeRTOS750/portable/port.c **** 	/* Setup clock source and compare match behaviour. Assuming  640 / 1280 /1281 / 1284p / 2560 / 256
 660:../freeRTOS750/portable/port.c **** 	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
 661:../freeRTOS750/portable/port.c **** 	portTCCRb = ucLowByte;
 662:../freeRTOS750/portable/port.c **** #endif
 663:../freeRTOS750/portable/port.c **** 
 664:../freeRTOS750/portable/port.c ****     /* Enable the interrupt - this is okay as interrupt are currently globally
 665:../freeRTOS750/portable/port.c **** 	disabled. */
 666:../freeRTOS750/portable/port.c ****     ucLowByte = portTIMSK;
 408               	.LM47:
 409 0146 EEE6      		ldi r30,lo8(110)
 410 0148 F0E0      		ldi r31,0
 411 014a 8081      		ld r24,Z
 667:../freeRTOS750/portable/port.c ****     ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
 413               	.LM48:
 414 014c 8260      		ori r24,lo8(2)
 668:../freeRTOS750/portable/port.c ****     portTIMSK = ucLowByte;
 416               	.LM49:
 417 014e 8083      		st Z,r24
 418               	.LBE5:
 419               	.LBE4:
 538:../freeRTOS750/portable/port.c **** 	portRESTORE_CONTEXT();
 421               	.LM50:
 422               	/* #APP */
 423               	 ;  538 "../freeRTOS750/portable/port.c" 1
 424 0150 A091 0000 		lds	r26, pxCurrentTCB		
 425 0154 B091 0000 		lds	r27, pxCurrentTCB + 1	
 426 0158 CD91      		ld		r28, x+					
 427 015a CDBF      		out	__SP_L__, r28			
 428 015c DD91      		ld		r29, x+					
 429 015e DEBF      		out	__SP_H__, r29			
 430 0160 FF91      		pop	r31						
 431 0162 EF91      		pop	r30						
 432 0164 DF91      		pop	r29						
 433 0166 CF91      		pop	r28						
 434 0168 BF91      		pop	r27						
 435 016a AF91      		pop	r26						
 436 016c 9F91      		pop	r25						
 437 016e 8F91      		pop	r24						
 438 0170 7F91      		pop	r23						
 439 0172 6F91      		pop	r22						
 440 0174 5F91      		pop	r21						
 441 0176 4F91      		pop	r20						
 442 0178 3F91      		pop	r19						
 443 017a 2F91      		pop	r18						
 444 017c 1F91      		pop	r17						
 445 017e 0F91      		pop	r16						
 446 0180 FF90      		pop	r15						
 447 0182 EF90      		pop	r14						
 448 0184 DF90      		pop	r13						
 449 0186 CF90      		pop	r12						
 450 0188 BF90      		pop	r11						
 451 018a AF90      		pop	r10						
 452 018c 9F90      		pop	r9						
 453 018e 8F90      		pop	r8						
 454 0190 7F90      		pop	r7						
 455 0192 6F90      		pop	r6						
 456 0194 5F90      		pop	r5						
 457 0196 4F90      		pop	r4						
 458 0198 3F90      		pop	r3						
 459 019a 2F90      		pop	r2						
 460 019c 1F90      		pop	r1						
 461 019e 0F90      		pop	r0						
 462 01a0 0FBE      		out	__SREG__, r0			
 463 01a2 0F90      		pop	r0						
 464               		
 465               	 ;  0 "" 2
 542:../freeRTOS750/portable/port.c **** 	asm volatile ( "ret" );
 467               	.LM51:
 468               	 ;  542 "../freeRTOS750/portable/port.c" 1
 469 01a4 0895      		ret
 470               	 ;  0 "" 2
 546:../freeRTOS750/portable/port.c **** }
 472               	.LM52:
 473               	/* #NOAPP */
 474 01a6 81E0      		ldi r24,lo8(1)
 475 01a8 0895      		ret
 477               	.Lscope2:
 479               		.stabd	78,0,0
 481               	.global	vPortEndScheduler
 483               	vPortEndScheduler:
 484               		.stabd	46,0,0
 550:../freeRTOS750/portable/port.c **** {
 486               	.LM53:
 487               	.LFBB3:
 488               	/* prologue: function */
 489               	/* frame size = 0 */
 490               	/* stack size = 0 */
 491               	.L__stack_usage = 0
 492 01aa 0895      		ret
 494               	.Lscope3:
 496               		.stabd	78,0,0
 498               	.global	vPortYield
 500               	vPortYield:
 501               		.stabd	46,0,0
 562:../freeRTOS750/portable/port.c **** {
 503               	.LM54:
 504               	.LFBB4:
 505               	/* prologue: naked */
 506               	/* frame size = 0 */
 507               	/* stack size = 0 */
 508               	.L__stack_usage = 0
 563:../freeRTOS750/portable/port.c **** 	portSAVE_CONTEXT();
 510               	.LM55:
 511               	/* #APP */
 512               	 ;  563 "../freeRTOS750/portable/port.c" 1
 513 01ac 0F92      		push	r0						
 514 01ae 0FB6      		in		r0, __SREG__			
 515 01b0 F894      		cli							
 516 01b2 0F92      		push	r0						
 517 01b4 1F92      		push	r1						
 518 01b6 1124      		clr	r1						
 519 01b8 2F92      		push	r2						
 520 01ba 3F92      		push	r3						
 521 01bc 4F92      		push	r4						
 522 01be 5F92      		push	r5						
 523 01c0 6F92      		push	r6						
 524 01c2 7F92      		push	r7						
 525 01c4 8F92      		push	r8						
 526 01c6 9F92      		push	r9						
 527 01c8 AF92      		push	r10						
 528 01ca BF92      		push	r11						
 529 01cc CF92      		push	r12						
 530 01ce DF92      		push	r13						
 531 01d0 EF92      		push	r14						
 532 01d2 FF92      		push	r15						
 533 01d4 0F93      		push	r16						
 534 01d6 1F93      		push	r17						
 535 01d8 2F93      		push	r18						
 536 01da 3F93      		push	r19						
 537 01dc 4F93      		push	r20						
 538 01de 5F93      		push	r21						
 539 01e0 6F93      		push	r22						
 540 01e2 7F93      		push	r23						
 541 01e4 8F93      		push	r24						
 542 01e6 9F93      		push	r25						
 543 01e8 AF93      		push	r26						
 544 01ea BF93      		push	r27						
 545 01ec CF93      		push	r28						
 546 01ee DF93      		push	r29						
 547 01f0 EF93      		push	r30						
 548 01f2 FF93      		push	r31						
 549 01f4 A091 0000 		lds	r26, pxCurrentTCB		
 550 01f8 B091 0000 		lds	r27, pxCurrentTCB + 1	
 551 01fc 0DB6      		in		r0, 0x3d				
 552 01fe 0D92      		st		x+, r0					
 553 0200 0EB6      		in		r0, 0x3e				
 554 0202 0D92      		st		x+, r0					
 555               		
 556               	 ;  0 "" 2
 564:../freeRTOS750/portable/port.c **** 	vTaskSwitchContext();
 558               	.LM56:
 559               	/* #NOAPP */
 560 0204 0E94 0000 		call vTaskSwitchContext
 565:../freeRTOS750/portable/port.c **** 	portRESTORE_CONTEXT();
 562               	.LM57:
 563               	/* #APP */
 564               	 ;  565 "../freeRTOS750/portable/port.c" 1
 565 0208 A091 0000 		lds	r26, pxCurrentTCB		
 566 020c B091 0000 		lds	r27, pxCurrentTCB + 1	
 567 0210 CD91      		ld		r28, x+					
 568 0212 CDBF      		out	__SP_L__, r28			
 569 0214 DD91      		ld		r29, x+					
 570 0216 DEBF      		out	__SP_H__, r29			
 571 0218 FF91      		pop	r31						
 572 021a EF91      		pop	r30						
 573 021c DF91      		pop	r29						
 574 021e CF91      		pop	r28						
 575 0220 BF91      		pop	r27						
 576 0222 AF91      		pop	r26						
 577 0224 9F91      		pop	r25						
 578 0226 8F91      		pop	r24						
 579 0228 7F91      		pop	r23						
 580 022a 6F91      		pop	r22						
 581 022c 5F91      		pop	r21						
 582 022e 4F91      		pop	r20						
 583 0230 3F91      		pop	r19						
 584 0232 2F91      		pop	r18						
 585 0234 1F91      		pop	r17						
 586 0236 0F91      		pop	r16						
 587 0238 FF90      		pop	r15						
 588 023a EF90      		pop	r14						
 589 023c DF90      		pop	r13						
 590 023e CF90      		pop	r12						
 591 0240 BF90      		pop	r11						
 592 0242 AF90      		pop	r10						
 593 0244 9F90      		pop	r9						
 594 0246 8F90      		pop	r8						
 595 0248 7F90      		pop	r7						
 596 024a 6F90      		pop	r6						
 597 024c 5F90      		pop	r5						
 598 024e 4F90      		pop	r4						
 599 0250 3F90      		pop	r3						
 600 0252 2F90      		pop	r2						
 601 0254 1F90      		pop	r1						
 602 0256 0F90      		pop	r0						
 603 0258 0FBE      		out	__SREG__, r0			
 604 025a 0F90      		pop	r0						
 605               		
 606               	 ;  0 "" 2
 567:../freeRTOS750/portable/port.c **** 	asm volatile ( "ret" );
 608               	.LM58:
 609               	 ;  567 "../freeRTOS750/portable/port.c" 1
 610 025c 0895      		ret
 611               	 ;  0 "" 2
 612               	/* epilogue start */
 568:../freeRTOS750/portable/port.c **** }
 614               	.LM59:
 615               	/* #NOAPP */
 617               	.Lscope4:
 619               		.stabd	78,0,0
 621               	.global	vPortYieldFromTick
 623               	vPortYieldFromTick:
 624               		.stabd	46,0,0
 579:../freeRTOS750/portable/port.c **** {
 626               	.LM60:
 627               	.LFBB5:
 628               	/* prologue: naked */
 629               	/* frame size = 0 */
 630               	/* stack size = 0 */
 631               	.L__stack_usage = 0
 580:../freeRTOS750/portable/port.c **** 	portSAVE_CONTEXT();
 633               	.LM61:
 634               	/* #APP */
 635               	 ;  580 "../freeRTOS750/portable/port.c" 1
 636 025e 0F92      		push	r0						
 637 0260 0FB6      		in		r0, __SREG__			
 638 0262 F894      		cli							
 639 0264 0F92      		push	r0						
 640 0266 1F92      		push	r1						
 641 0268 1124      		clr	r1						
 642 026a 2F92      		push	r2						
 643 026c 3F92      		push	r3						
 644 026e 4F92      		push	r4						
 645 0270 5F92      		push	r5						
 646 0272 6F92      		push	r6						
 647 0274 7F92      		push	r7						
 648 0276 8F92      		push	r8						
 649 0278 9F92      		push	r9						
 650 027a AF92      		push	r10						
 651 027c BF92      		push	r11						
 652 027e CF92      		push	r12						
 653 0280 DF92      		push	r13						
 654 0282 EF92      		push	r14						
 655 0284 FF92      		push	r15						
 656 0286 0F93      		push	r16						
 657 0288 1F93      		push	r17						
 658 028a 2F93      		push	r18						
 659 028c 3F93      		push	r19						
 660 028e 4F93      		push	r20						
 661 0290 5F93      		push	r21						
 662 0292 6F93      		push	r22						
 663 0294 7F93      		push	r23						
 664 0296 8F93      		push	r24						
 665 0298 9F93      		push	r25						
 666 029a AF93      		push	r26						
 667 029c BF93      		push	r27						
 668 029e CF93      		push	r28						
 669 02a0 DF93      		push	r29						
 670 02a2 EF93      		push	r30						
 671 02a4 FF93      		push	r31						
 672 02a6 A091 0000 		lds	r26, pxCurrentTCB		
 673 02aa B091 0000 		lds	r27, pxCurrentTCB + 1	
 674 02ae 0DB6      		in		r0, 0x3d				
 675 02b0 0D92      		st		x+, r0					
 676 02b2 0EB6      		in		r0, 0x3e				
 677 02b4 0D92      		st		x+, r0					
 678               		
 679               	 ;  0 "" 2
 582:../freeRTOS750/portable/port.c **** 	if (--ticksRemainingInSec == 0)
 681               	.LM62:
 682               	/* #NOAPP */
 683 02b6 8091 0000 		lds r24,ticksRemainingInSec
 684 02ba 9091 0000 		lds r25,ticksRemainingInSec+1
 685 02be 0197      		sbiw r24,1
 686 02c0 9093 0000 		sts ticksRemainingInSec+1,r25
 687 02c4 8093 0000 		sts ticksRemainingInSec,r24
 688 02c8 892B      		or r24,r25
 689 02ca 01F4      		brne .L6
 584:../freeRTOS750/portable/port.c **** 		system_tick();
 691               	.LM63:
 692 02cc 0E94 0000 		call system_tick
 585:../freeRTOS750/portable/port.c **** 		ticksRemainingInSec = portTickRateHz;
 694               	.LM64:
 695 02d0 8091 0000 		lds r24,portTickRateHz
 696 02d4 9091 0000 		lds r25,portTickRateHz+1
 697 02d8 9093 0000 		sts ticksRemainingInSec+1,r25
 698 02dc 8093 0000 		sts ticksRemainingInSec,r24
 699               	.L6:
 588:../freeRTOS750/portable/port.c **** 	if( xTaskIncrementTick() != pdFALSE )
 701               	.LM65:
 702 02e0 0E94 0000 		call xTaskIncrementTick
 703 02e4 8111      		cpse r24,__zero_reg__
 590:../freeRTOS750/portable/port.c **** 		vTaskSwitchContext();
 705               	.LM66:
 706 02e6 0E94 0000 		call vTaskSwitchContext
 707               	.L7:
 593:../freeRTOS750/portable/port.c **** 	portRESTORE_CONTEXT();
 709               	.LM67:
 710               	/* #APP */
 711               	 ;  593 "../freeRTOS750/portable/port.c" 1
 712 02ea A091 0000 		lds	r26, pxCurrentTCB		
 713 02ee B091 0000 		lds	r27, pxCurrentTCB + 1	
 714 02f2 CD91      		ld		r28, x+					
 715 02f4 CDBF      		out	__SP_L__, r28			
 716 02f6 DD91      		ld		r29, x+					
 717 02f8 DEBF      		out	__SP_H__, r29			
 718 02fa FF91      		pop	r31						
 719 02fc EF91      		pop	r30						
 720 02fe DF91      		pop	r29						
 721 0300 CF91      		pop	r28						
 722 0302 BF91      		pop	r27						
 723 0304 AF91      		pop	r26						
 724 0306 9F91      		pop	r25						
 725 0308 8F91      		pop	r24						
 726 030a 7F91      		pop	r23						
 727 030c 6F91      		pop	r22						
 728 030e 5F91      		pop	r21						
 729 0310 4F91      		pop	r20						
 730 0312 3F91      		pop	r19						
 731 0314 2F91      		pop	r18						
 732 0316 1F91      		pop	r17						
 733 0318 0F91      		pop	r16						
 734 031a FF90      		pop	r15						
 735 031c EF90      		pop	r14						
 736 031e DF90      		pop	r13						
 737 0320 CF90      		pop	r12						
 738 0322 BF90      		pop	r11						
 739 0324 AF90      		pop	r10						
 740 0326 9F90      		pop	r9						
 741 0328 8F90      		pop	r8						
 742 032a 7F90      		pop	r7						
 743 032c 6F90      		pop	r6						
 744 032e 5F90      		pop	r5						
 745 0330 4F90      		pop	r4						
 746 0332 3F90      		pop	r3						
 747 0334 2F90      		pop	r2						
 748 0336 1F90      		pop	r1						
 749 0338 0F90      		pop	r0						
 750 033a 0FBE      		out	__SREG__, r0			
 751 033c 0F90      		pop	r0						
 752               		
 753               	 ;  0 "" 2
 595:../freeRTOS750/portable/port.c **** 	asm volatile ( "ret" );
 755               	.LM68:
 756               	 ;  595 "../freeRTOS750/portable/port.c" 1
 757 033e 0895      		ret
 758               	 ;  0 "" 2
 759               	/* epilogue start */
 596:../freeRTOS750/portable/port.c **** }
 761               	.LM69:
 762               	/* #NOAPP */
 764               	.Lscope5:
 766               		.stabd	78,0,0
 768               	.global	__vector_14
 770               	__vector_14:
 771               		.stabd	46,0,0
 669:../freeRTOS750/portable/port.c **** 
 670:../freeRTOS750/portable/port.c **** }
 671:../freeRTOS750/portable/port.c **** 
 672:../freeRTOS750/portable/port.c **** #else
 673:../freeRTOS750/portable/port.c **** /*
 674:../freeRTOS750/portable/port.c ****  * Setup Crystal-controlled timer2 compare match A to generate a tick interrupt.
 675:../freeRTOS750/portable/port.c ****  */
 676:../freeRTOS750/portable/port.c **** 
 677:../freeRTOS750/portable/port.c **** static void prvSetupTimerInterrupt( void )
 678:../freeRTOS750/portable/port.c **** {
 679:../freeRTOS750/portable/port.c **** 	unsigned portSHORT usCompareMatch;
 680:../freeRTOS750/portable/port.c **** 
 681:../freeRTOS750/portable/port.c **** 	/* Using 8bit Timer2 to generate the tick.  A 32.768 KHz crystal
 682:../freeRTOS750/portable/port.c **** 	 * must be attached to the appropriate pins.  We then adjust the number
 683:../freeRTOS750/portable/port.c **** 	 * to a power of two so we can get EXACT seconds for the Real Time clock.
 684:../freeRTOS750/portable/port.c **** 	 */
 685:../freeRTOS750/portable/port.c **** 
 686:../freeRTOS750/portable/port.c **** 	usCompareMatch = ((unsigned portLONG) 32768) / configTICK_RATE_HZ;
 687:../freeRTOS750/portable/port.c **** 
 688:../freeRTOS750/portable/port.c **** 	if ( usCompareMatch > 192 )
 689:../freeRTOS750/portable/port.c **** 	{
 690:../freeRTOS750/portable/port.c **** 		usCompareMatch = 256;
 691:../freeRTOS750/portable/port.c **** 	}
 692:../freeRTOS750/portable/port.c **** 	else
 693:../freeRTOS750/portable/port.c **** 	{
 694:../freeRTOS750/portable/port.c **** 		for (unsigned portCHAR i = 7; i >= 1; --i)
 695:../freeRTOS750/portable/port.c **** 		{
 696:../freeRTOS750/portable/port.c **** 			if ( usCompareMatch & ((unsigned portSHORT)1 << i) )
 697:../freeRTOS750/portable/port.c **** 			{
 698:../freeRTOS750/portable/port.c **** 				/* found the power - now let's see if we round up or down */
 699:../freeRTOS750/portable/port.c **** 				if ( usCompareMatch & ((unsigned portSHORT)1 << (i-1)) )
 700:../freeRTOS750/portable/port.c **** 				{
 701:../freeRTOS750/portable/port.c **** 					usCompareMatch = ((unsigned portSHORT)1 << (i+1));
 702:../freeRTOS750/portable/port.c **** 				}
 703:../freeRTOS750/portable/port.c **** 				else
 704:../freeRTOS750/portable/port.c **** 				{
 705:../freeRTOS750/portable/port.c **** 					usCompareMatch = ((unsigned portSHORT)1 << i);
 706:../freeRTOS750/portable/port.c **** 				}
 707:../freeRTOS750/portable/port.c **** 				break;
 708:../freeRTOS750/portable/port.c **** 			}
 709:../freeRTOS750/portable/port.c **** 		}
 710:../freeRTOS750/portable/port.c **** 	}
 711:../freeRTOS750/portable/port.c **** 
 712:../freeRTOS750/portable/port.c **** 	/* actual port tick rate in Hz, calculated */
 713:../freeRTOS750/portable/port.c **** 	portTickRateHz = (portTickType) ((unsigned portLONG) 32768 / usCompareMatch );
 714:../freeRTOS750/portable/port.c **** 	/* initialise first second of ticks */
 715:../freeRTOS750/portable/port.c **** 	ticksRemainingInSec = portTickRateHz;
 716:../freeRTOS750/portable/port.c **** 
 717:../freeRTOS750/portable/port.c **** 	/* Adjust for correct value. */
 718:../freeRTOS750/portable/port.c **** 	usCompareMatch -= 1;
 719:../freeRTOS750/portable/port.c **** 
 720:../freeRTOS750/portable/port.c **** 	portTIMSK &= ~( _BV(OCIE2B)|_BV(OCIE2A)|_BV(TOIE2) );	// disable all Timer2 interrupts
 721:../freeRTOS750/portable/port.c **** 	portTIFR |=  _BV(OCF2B)|_BV(OCF2A)|_BV(TOV2);			// clear all pending interrupts
 722:../freeRTOS750/portable/port.c ****     ASSR = _BV(AS2);              							// set Timer/Counter2 to be asynchronous from the CPU cloc
 723:../freeRTOS750/portable/port.c ****                                   	  	  	  	  	  		// with a second external clock (32,768kHz) driv
 724:../freeRTOS750/portable/port.c ****     portTCNT  = 0x00;				  						// zero out the counter
 725:../freeRTOS750/portable/port.c ****     portTCCRa = _BV(WGM21);									// mode CTC (clear on counter match)
 726:../freeRTOS750/portable/port.c **** 	portTCCRb = _BV(CS20);									// divide system clock by 1
 727:../freeRTOS750/portable/port.c **** 	portOCRL  = usCompareMatch;								// set the counter
 728:../freeRTOS750/portable/port.c **** 
 729:../freeRTOS750/portable/port.c ****     while( ASSR & (_BV(TCN2UB)|_BV(OCR2AUB)|_BV(TCR2AUB))); // Wait until Timer2 update complete
 730:../freeRTOS750/portable/port.c **** 
 731:../freeRTOS750/portable/port.c ****     portTIMSK |= _BV(OCIE2A);								// interrupt on Timer2 compare match
 732:../freeRTOS750/portable/port.c **** 
 733:../freeRTOS750/portable/port.c **** }
 734:../freeRTOS750/portable/port.c **** #endif
 735:../freeRTOS750/portable/port.c **** 
 736:../freeRTOS750/portable/port.c **** /*-----------------------------------------------------------*/
 737:../freeRTOS750/portable/port.c **** 
 738:../freeRTOS750/portable/port.c **** #if configUSE_PREEMPTION == 1
 739:../freeRTOS750/portable/port.c **** 
 740:../freeRTOS750/portable/port.c **** 	/*
 741:../freeRTOS750/portable/port.c **** 	 * Tick ISR for preemptive scheduler.  We can use a naked attribute as
 742:../freeRTOS750/portable/port.c **** 	 * the context is saved at the start of vPortYieldFromTick().  The tick
 743:../freeRTOS750/portable/port.c **** 	 * count is incremented after the context is saved.
 744:../freeRTOS750/portable/port.c **** 	 */
 745:../freeRTOS750/portable/port.c **** 	#warning "PRE-EMPTIVE scheduler."
 746:../freeRTOS750/portable/port.c **** 	ISR(TIMER_COMPA_ISR, ISR_NAKED)
 747:../freeRTOS750/portable/port.c **** 	{
 773               	.LM70:
 774               	.LFBB6:
 775               	/* prologue: naked */
 776               	/* frame size = 0 */
 777               	/* stack size = 0 */
 778               	.L__stack_usage = 0
 748:../freeRTOS750/portable/port.c **** 		vPortYieldFromTick();
 780               	.LM71:
 781 0340 0E94 0000 		call vPortYieldFromTick
 749:../freeRTOS750/portable/port.c **** 		asm volatile ( "reti" );
 783               	.LM72:
 784               	/* #APP */
 785               	 ;  749 "../freeRTOS750/portable/port.c" 1
 786 0344 1895      		reti
 787               	 ;  0 "" 2
 788               	/* epilogue start */
 750:../freeRTOS750/portable/port.c **** 	}
 790               	.LM73:
 791               	/* #NOAPP */
 793               	.Lscope6:
 795               		.stabd	78,0,0
 796               		.local	portTickRateHz
 797               		.comm	portTickRateHz,2,1
 798               		.local	ticksRemainingInSec
 799               		.comm	ticksRemainingInSec,2,1
 803               	.Letext0:
 804               		.ident	"GCC: (GNU) 4.7.2"
 805               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 port.c
     /tmp/ccugUWYm.s:2      *ABS*:0000003e __SP_H__
     /tmp/ccugUWYm.s:3      *ABS*:0000003d __SP_L__
     /tmp/ccugUWYm.s:4      *ABS*:0000003f __SREG__
     /tmp/ccugUWYm.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccugUWYm.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccugUWYm.s:131    .text:00000000 pxPortInitialiseStack
     /tmp/ccugUWYm.s:374    .text:00000126 xPortStartScheduler
                             .bss:00000000 portTickRateHz
     /tmp/ccugUWYm.s:797    .bss:00000002 ticksRemainingInSec
     /tmp/ccugUWYm.s:483    .text:000001aa vPortEndScheduler
     /tmp/ccugUWYm.s:500    .text:000001ac vPortYield
     /tmp/ccugUWYm.s:623    .text:0000025e vPortYieldFromTick
     /tmp/ccugUWYm.s:770    .text:00000340 __vector_14

UNDEFINED SYMBOLS
pxCurrentTCB
vTaskSwitchContext
system_tick
xTaskIncrementTick
__do_clear_bss
